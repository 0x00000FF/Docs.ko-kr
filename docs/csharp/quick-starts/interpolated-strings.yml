### YamlMime:Tutorial
title: "<span data-ttu-id=\"724b5-101\">C#에서 보간된 문자열</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-101\">Interpolated strings in C#</span></span>"
metadata:
  title: "C#에서 보간된 문자열입니다. 날짜 또는 숫자 등의 다른 값을 포함하는 문자열을 구성하는 방법에 대해 알아봅니다."
  description: "이 자습서에서는 브라우저를 사용하여 C# 보간된 문자열 기능을 대화형으로 사용합니다. C# 코드를 작성하고 브라우저에서 직접 코드를 컴파일하고 실행한 결과를 확인할 수 있습니다."
  audience: Developer
  ms.custom: mvc
  ms.topic: get-started-article
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection
  nextTutorialTitle: "<span data-ttu-id=\"724b5-106\">C#의 컬렉션</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-106\">Collections in C#</span></span>"
  ms.openlocfilehash: f54d8e5e3703556b333155fd9541f9d7c7e7fd1b
  ms.sourcegitcommit: 8bde7a3432f30fc771079744955c75c58c4eb393
  ms.translationtype: HT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 01/20/2018
items:
- durationInMinutes: 2
  content: "<span data-ttu-id=\"724b5-107\">이 빠른 시작에서는 C#에서 보간된 문자열을 사용하여 단일 출력 문자열에 값을 대화형으로 삽입하는 방법을 설명합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-107\">This quick start teaches you how to use interpolated strings in C# to insert values into a single ouput string interactively.</span></span> <span data-ttu-id=\"724b5-108\">브라우저를 사용하여 C# 코드를 작성하고, 코드를 컴파일하고 실행한 결과를 즉시 확인할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-108\">You use your browser to write C# code and can immediately see the results of compiling and running your code.</span></span> <span data-ttu-id=\"724b5-109\">빠른 시작은 문자열을 연결하고, 문자열에 값을 삽입하며, 이러한 값을 다양한 방식으로 서식화하는 일련의 단원으로 구성됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-109\">The quick start contains a series of lessons that concatenate strings, insert values into strings, and format those values in different ways.</span></span>\n"
- title: "<span data-ttu-id=\"724b5-110\">보간된 문자열 만들기</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-110\">Create an interpolated string</span></span>"
  durationInMinutes: 2
  content: "<span data-ttu-id=\"724b5-111\">대화형 창에서 다음 코드를 실행합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-111\">Run the following code in the interactive window.</span></span> <span data-ttu-id=\"724b5-112\">그렇게 하려면 대화형 창에 다음 코드 블록을 입력하고(\"\\<name>\"을 사용자의 이름으로 바꿈) **실행** 단추를 클릭합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-112\">To do that, type the following code block in the interactive window (replace \"\\<name>\" with your name) and click the **Run** button:</span></span>\n\n```csharp\nvar name = \"<name>\";\nConsole.WriteLine($\"Hello, {name}. It's a pleasure to meet you!\");\n```\n\n<span data-ttu-id=\"724b5-113\">프로그램을 실행하면 인사말에 사용자 이름이 포함된 단일 문자열이 표시됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-113\">When you run the program, it displays a single string that includes your name in the greeting.</span></span> <span data-ttu-id=\"724b5-114\"><xref:System.Console.WriteLine%2A> 메서드 호출에 포함된 문자열은 *보간된 문자열*입니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-114\">The string included in the <xref:System.Console.WriteLine%2A> method call is an *interpolated string*.</span></span> <span data-ttu-id=\"724b5-115\">이는 포함 코드가 들어있는 문자열에서 단일 문자열(*결과 문자열*이라고 함)을 생성할 수 있게 해주는 일종의 템플릿입니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-115\">It's a kind of template that lets you construct a single string (called the *result string*) from a string that includes embedded code.</span></span> <span data-ttu-id=\"724b5-116\">보간된 문자열은 문자열에 값을 삽입하거나 문자열을 연결(함께 조인)하는 데 특히 유용합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-116\">Interpolated strings are particularly useful for inserting values into a string or concatenating (joining together) strings.</span></span> \n\n<span data-ttu-id=\"724b5-117\">다음 간단한 예제에서는 모든 보간된 문자열이 포함해야 하는 두 가지 요소를 보여 줍니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-117\">This simple example contains the two elements that every interpolated string must have:</span></span> \n\n- <span data-ttu-id=\"724b5-118\">`$` 문자로 시작한 후 여는 따옴표 문자가 다음에 나오는 문자열 리터럴.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-118\">A string literal that begins with the `$` character before its opening quotation mark character.</span></span> <span data-ttu-id=\"724b5-119\">`$` 기호와 따옴표 문자 사이에는 공백이 없어야 합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-119\">There can't be any spaces between the `$` symbol and the quotation mark character.</span></span> <span data-ttu-id=\"724b5-120\">(공백을 포함하면 어떻게 되는지 확인하려면 대화형 창에서 `$` 문자 뒤에 공백을 삽입하고 **실행** 단추를 클릭합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-120\">(If you'd like to see what happens if you include one, insert a space after the `$` character in the interactive window and click the **Run** button.</span></span> <span data-ttu-id=\"724b5-121\">C# 컴파일러가 \"예기치 않은 문자 '$'\"라는 메시지를 표시합니다.)</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-121\">The C# compiler complains, \"Unexpected character '$'\".)</span></span> \n\n- <span data-ttu-id=\"724b5-122\">하나 이상의 *보간된 식*.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-122\">One or more *interpolated expressions*.</span></span> <span data-ttu-id=\"724b5-123\">보간된 식은 열기 및 닫기 중괄호(`{` 및 `}`)로 표시됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-123\">An interpolated expression is indicated by an opening and closing brace (`{` and `}`).</span></span> <span data-ttu-id=\"724b5-124\">중괄호 안에 값을 반환(`null` 포함)하는 C# 식을 배치할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-124\">You can put any C# expression that returns a value (including `null`) inside the braces.</span></span> \n\n<span data-ttu-id=\"724b5-125\">몇 가지 다른 데이터 형식을 포함하는 보간된 문자열 예제를 더 살펴보겠습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-125\">Let's try a few more interpolated string examples with some other data types.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"724b5-126\">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-126\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"724b5-127\">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-127\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"724b5-128\">다양한 데이터 형식 포함</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-128\">Include different data types</span></span>"
  durationInMinutes: 3
  content: "<span data-ttu-id=\"724b5-129\">이전 빠른 시작에서는 한 문자열을 다른 문자열 내에 삽입하는 데 보간된 문자열을 사용했습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-129\">In the previous quick start, you used an interpolated string to insert one string inside of another.</span></span> <span data-ttu-id=\"724b5-130\">하지만 보간된 문자열 식은 모든 데이터 형식일 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-130\">An interpolated string expression can be any data type, though.</span></span> <span data-ttu-id=\"724b5-131\">여러 데이터 형식의 값을 포함하는 보간된 문자열을 살펴보겠습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-131\">Let's try an interpolated string that has values of multiple data types.</span></span> \n\n<span data-ttu-id=\"724b5-132\">다음 예제에서는 `Vegetable` 개체, `Unit` 열거형의 멤버, <xref:System.DateTime> 값 및 <xref:System.Decimal> 값이 있는 보간된 식을 포함합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-132\">The following example includes interpolated expressions with a `Vegetable` object, a member of the `Unit` enumeration, a <xref:System.DateTime> value, and a <xref:System.Decimal> value.</span></span> <span data-ttu-id=\"724b5-133\">대화형 창에서 실행하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-133\">Run it in the interactive window.</span></span>\n\n```csharp\npublic class Vegetable\n{\n   public Vegetable(string name) => Name = name;\n\n   public string Name { get; }\n\n   public override string ToString() => Name;\n}\n\npublic class Example\n{\n   public enum Unit { item, pound, ounce, dozen };\n\n   public static void Main()\n   {\n      var item = new Vegetable(\"eggplant\");\n      var date = DateTime.Now;\n      var price = 1.99m;\n      var unit = Unit.item;\n      Console.WriteLine($\"On {date}, the price of {item} was {price} per {unit}.\");\n   }\n}\n```\n\n<span data-ttu-id=\"724b5-134\">보간된 식 중 하나에는 콘솔에 표시되는 결과 문자열의 `item` 개체가 포함되며, 이 경우 \"eggplant\"가 결과 문자열에 삽입됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-134\">Note that one of the interpolated expressions includes the `item` object in the result string that's displayed to the console, and in this case the string \"eggplant\" is inserted into the result string.</span></span> <span data-ttu-id=\"724b5-135\">보간된 식의 형식이 문자열이 아닌 경우 C# 컴파일러가 다음을 수행하기 때문입니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-135\">That's because, when the type of an interpolated expression is not a string, the C# compiler does the following:</span></span>\n\n- <span data-ttu-id=\"724b5-136\">보간된 식이 `null`이면 보간된 식은 빈 문자열(\"\" 또는 <xref:System.String.Empty?displayProperty=nameWithType>)을 반환합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-136\">If the interpolated expression is `null`, the interpolated expression returns an empty string (\"\", or <xref:System.String.Empty?displayProperty=nameWithType>).</span></span>\n\n- <span data-ttu-id=\"724b5-137\">보간된 식이 `null`이 아닌 경우, 보간된 식 형식의 `ToString` 메서드가 호출됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-137\">If the interpolated expression is not `null`, the `ToString` method of the type of the interpolated expression is called.</span></span> <span data-ttu-id=\"724b5-138\">`Vegetable.ToString` 메서드 정의 앞에 주석 기호(`//`)를 넣어 정의를 주석 처리하여 테스트할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-138\">You can test this by commenting out the definition of the `Vegetable.ToString` method in the example by putting a comment symbol (`//`) in front of it.</span></span> <span data-ttu-id=\"724b5-139\">출력에서 \"eggplant\" 문자열은 <xref:System.Object.ToString?displayProperty=nameWithType> 메서드의 기본 동작인 정규화된 형식 이름(형식 이름과 함께 C# REPL에 의해 정의된 네임스페이스)으로 바뀝니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-139\">In the output, the string \"eggplant\" is replaced by the fully qualified type name (the namespace defined by the C# REPL along with the type name), which is the default behavior of the <xref:System.Object.ToString?displayProperty=nameWithType> method.</span></span>   \n\n<span data-ttu-id=\"724b5-140\">이 예제의 출력에서 날짜는 매우 정확하며(eggplant 가격은 초마다 달라지지 않음), 가격 값은 통화 단위를 나타내지 않습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-140\">In the output from this example, the date is too precise (the price of eggplant does not vary by the second), and the price value doesn't indicate a unit of currency.</span></span> <span data-ttu-id=\"724b5-141\">다음 단계에서는 보간된 식에서 반환된 문자열 형식을 제어하여 해당 문제를 해결하는 방법을 알아봅니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-141\">In the next step, you'll learn how to fix those issues by controlling the format of strings returned by interpolated expressions.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"724b5-142\">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-142\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"724b5-143\">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-143\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"724b5-144\">보간된 식의 서식 제어</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-144\">Control the formatting of interpolated expressions</span></span>"
  durationInMinutes: 5
  content: "<span data-ttu-id=\"724b5-145\">이전 단원에서는 형식이 잘못 지정된 두 개의 문자열을 결과 문자열에 삽입했습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-145\">In the previous lesson, two poorly formatted strings were inserted into the result string.</span></span> <span data-ttu-id=\"724b5-146\">하나는 날짜만 적절한 날짜 및 시간 값이었습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-146\">One was a date and time value for which only the date was appropriate.</span></span> <span data-ttu-id=\"724b5-147\">두 번째는 통화 단위를 나타내지 않는 가격이었습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-147\">The second was a price that did not indicate its unit of currency.</span></span> <span data-ttu-id=\"724b5-148\">두 가지 문제는 쉽게 해결할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-148\">Both issues are easy to address.</span></span> <span data-ttu-id=\"724b5-149\">보간된 식은 특정 형식의 서식을 제어하는 *형식 문자열*을 포함할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-149\">Interpolated expressions can include *format strings* that control the formatting of particular types.</span></span> <span data-ttu-id=\"724b5-150\">다음 줄에 표시된 것처럼 이전 예제의 `Console.WriteLine`에 대한 호출을 수정하여 날짜 및 가격 필드의 형식 지정자를 포함시킵니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-150\">Modify the call to `Console.WriteLine` from the previous example to include the format specifier for the date and price fields as shown in the following line:</span></span>\n\n```csharp\nConsole.WriteLine($\"On {date:d}, the price of {item} was {price:C2} per {unit}.\");\n```\n\n<span data-ttu-id=\"724b5-151\">콜론과 형식 문자열을 사용하여 보간된 식에 따라 형식 문자열을 지정합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-151\">You specify a format string by following the interpolated expression with a colon and the format string.</span></span> <span data-ttu-id=\"724b5-152\">\"d\"는 간단한 날짜 형식을 나타내는 [표준 날짜 및 시간 형식 문자열](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier)입니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-152\">\"d\" is a [standard date and time format string](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) that represents the short date format.</span></span> <span data-ttu-id=\"724b5-153\">\"C2\"는 소수점 뒤 두 자릿수를 포함하는 통화 값으로 숫자를 나타내는 [표준 숫자 형식 문자열](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier)입니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-153\">\"C2\" is a  [standard numeric format string](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) that represents a number as a currency value with two digits after the decimal point.</span></span>\n\n<span data-ttu-id=\"724b5-154\">.NET 표준 라이브러리의 많은 형식은 미리 정의된 형식 문자열 집합을 지원합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-154\">A number of types in the .NET Standard libraries support a predefined set of format strings.</span></span> <span data-ttu-id=\"724b5-155\">여기에는 모든 숫자 형식과 날짜 및 시간 형식이 포함됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-155\">These include all the numeric types and the date and time types.</span></span> <span data-ttu-id=\"724b5-156\">형식 문자열을 지원하는 형식의 전체 목록을 보려면 [.NET의 서식 지정 형식](../../standard/base-types/formatting-types.md) 문서의 [형식 문자열 및 .NET 클래스 라이브러리 형식](../../standard/base-types/formatting-types.md#stringRef)을 참조하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-156\">For a complete list of types that support format strings, see [Format Strings and .NET Class Library Types](../../standard/base-types/formatting-types.md#stringRef) in the [Formatting Types in .NET](../../standard/base-types/formatting-types.md) article.</span></span> <span data-ttu-id=\"724b5-157\">모든 형식에서 형식 문자열 집합을 지원할 수 있으며, 기존 형식에 대한 사용자 지정 서식을 제공하는 사용자 지정 서식 확장을 개발할 수도 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-157\">Any type can support a set of format strings, and you can also develop custom formatting extensions that provide custom formatting for existing types.</span></span> <span data-ttu-id=\"724b5-158\"><xref:System.ICustomFormatter> 구현을 제공한 사용자 지정 서식에 대한 자세한 내용은 [.NET의 서식 지정 형식](../../standard/base-types/formatting-types.md) 문서의 [ICustomFormatter를 사용한 사용자 지정 서식 지정](../../standard/base-types/formatting-types.md#custom-formatting-with-icustomformatter)을 참조하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-158\">For information on custom formatting by providing an <xref:System.ICustomFormatter> implementation, see [Custom Formatting with ICustomFormatter](../../standard/base-types/formatting-types.md#custom-formatting-with-icustomformatter) in the [Formatting Types in .NET](../../standard/base-types/formatting-types.md) article.</span></span>\n\n<span data-ttu-id=\"724b5-159\">**.NET 편집기**에서 형식 문자열을 수정하여 날짜 및 시간의 서식과 숫자 값에 미치는 영향을 확인해 보세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-159\">Try modifying the the format strings in the **.NET Editor** to see how they affect the formatting of the date and time and the numeric value.</span></span> <span data-ttu-id=\"724b5-160\">`{date:d}`의 \"d\"를 \"t\"(짧은 시간 형식 표시), \"y\"(연도 및 월 표시) 및 \"yyyy\"(연도를 4자리 숫자로 표시)로 변경합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-160\">Change the \"d\" in `{date:d}` to \"t\" (to display the short time format), \"y\" (to display the year and month), and \"yyyy\" (to display the year as a four-digit number).</span></span> <span data-ttu-id=\"724b5-161\">`{price:C2}`의 \"C2\"를 \"e\"(지수 표기) 및 \"F3\"(소수점 뒤 세 자릿수의 숫자 값)으로 변경합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-161\">Change the \"C2\" in `{price:C2}` to \"e\" (for exponential notation) and \"F3\" (for a numeric value with three digits after the decimal point).</span></span>\n\n<span data-ttu-id=\"724b5-162\">서식을 제어하는 것 외에도, 보간된 식에서 반환된 문자열의 필드 너비와 문자열 맞춤을 제어할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-162\">In addition to controlling formatting, you can also control the field width and alignment of the strings returned by an interpolated expression.</span></span> <span data-ttu-id=\"724b5-163\">다음 단계에서 이 작업을 수행하는 방법을 알아봅니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-163\">In the next step, you'll learn how to do this.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"724b5-164\">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-164\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"724b5-165\">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-165\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"724b5-166\">필드 너비와 보간된 식의 맞춤을 제어합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-166\">Control the field width and alignment of interpolated expressions</span></span>"
  durationInMinutes: 6
  content: "<span data-ttu-id=\"724b5-167\">일반적으로 보간된 식에서 반환된 문자열은 결과 문자열에 포함되며 선행 또는 후행 공백이 없습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-167\">Ordinarily, when the string returned by an interpolated expression is included in a result string, it has no leading or trailing spaces.</span></span> <span data-ttu-id=\"724b5-168\">특히 데이터 집합을 사용하여 작업하는 경우에는 보간된 식을 사용하여 필드 너비와 해당 맞춤을 지정할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-168\">Particularly for instances in which you are working with a set of data, interpolated expressions let you specify a field width and its alignment.</span></span> <span data-ttu-id=\"724b5-169\">이를 확인하려면 다음 코드를 수행합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-169\">To see this, run the following code.</span></span>\n\n```csharp\n  var inventory = new Dictionary<string, int>();\n  inventory.Add(\"hammer, ball pein\", 18);\n  inventory.Add(\"hammer, cross pein\", 5);\n  inventory.Add(\"screwdriver, Phillips #2\", 14);\n\n  Console.WriteLine($\"Inventory on {DateTime.Now:d}\");\n  Console.WriteLine(\" \");\n  Console.WriteLine($\"{\"Item\",-25}    {\"Quantity\",10}\");\n  Console.WriteLine(\" \"); \n  foreach (var item in inventory)\n     Console.WriteLine($\"{item.Key,-25}     {item.Value,10}\");\n```\n\n<span data-ttu-id=\"724b5-170\">항목 이름은 왼쪽 맞춤이며 해당 수량은 오른쪽 맞춤입니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-170\">The item names are left-aligned, and their quantities are right-aligned.</span></span> <span data-ttu-id=\"724b5-171\">식 뒤에 쉼표(\",\")를 추가하고 필더 너비를 지정하여 맞춤을 지정합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-171\">You specify the alignment by adding a comma (\",\") after the expression and designating the field width.</span></span> <span data-ttu-id=\"724b5-172\">필드 너비가 양수이면 필드는 오른쪽 맞춤입니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-172\">If the field width is a positive number, the field is right-aligned:</span></span>\n\n```text\n{expression, width}\n```\n\n<span data-ttu-id=\"724b5-173\">필드 너비가 음수이면 필드는 왼쪽 맞춤입니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-173\">If the field width is a negative number, the field is left-aligned:</span></span>\n\n```text\n{expression, -width}\n```\n<span data-ttu-id=\"724b5-174\">`{\"Item\",-25}` 및 `{item.Key,-25}` 보간된 식에서 음수 기호를 제거하고 예제를 다시 실행해 보세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-174\">Try removing the negative signs from the `{\"Item\",-25}` and `{item.Key,-25}` interpolated expressions and run the example again.</span></span> <span data-ttu-id=\"724b5-175\">이때 항목 이름은 오른쪽 맞춤입니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-175\">This time, the item name is right-aligned.</span></span>\n\n<span data-ttu-id=\"724b5-176\">필드 너비 및 형식 문자열을 단일 보간된 식으로 결합할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-176\">You can combine a field width and a format string in a single interpolated expression.</span></span> <span data-ttu-id=\"724b5-177\">필드 너비가 먼저 나오고 그 다음으로, 콜론 및 형식 문자열이 나옵니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-177\">The field width comes first, followed by a colon and the format string.</span></span> <span data-ttu-id=\"724b5-178\">필드 너비가 정의된 세 가지 형식이 지정된 문자열을 표시하는 다음의 간단한 프로그램을 사용해 보세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-178\">Try the following simple program that displays three formatted strings with defined field widths.</span></span>\n\n```csharp\nConsole.WriteLine($\"{DateTime.Now,-20:d} Hour {DateTime.Now,-10:HH} {1063.342,15:N2} feet\");\n```\n\n> [!NOTE]\n> <span data-ttu-id=\"724b5-179\">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-179\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"724b5-180\">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-180\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- content: "<span data-ttu-id=\"724b5-181\">보간된 문자열 빠른 시작을 완료했습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-181\">You've completed the interpolated strings quick start.</span></span> \n\n<span data-ttu-id=\"724b5-182\">사용자의 로컬 개발 환경에서 이러한 빠른 시작을 계속 진행할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-182\">You can continue these quick starts on your own local development environment.</span></span> <span data-ttu-id=\"724b5-183\">[로컬 개발](local-environment.md)의 기본 내용을 알아본 후 빠른 시작을 선택하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-183\">Learn the basics of [local development](local-environment.md) and then pick a quick start.</span></span> <span data-ttu-id=\"724b5-184\">동일한 연습을 시도해 보고, 다음 빠른 시작으로 직접 이동하거나, [C#의 숫자](numbers-in-csharp-local.md) 빠른 시작을 다시 시작할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-184\">You can try this same exercise, move directly to the next quick start, or start again with the [numbers in C#](numbers-in-csharp-local.md) quickstart.</span></span>\n\n<span data-ttu-id=\"724b5-185\">C# 참조의 [보간된 문자열](../language-reference/keywords/interpolated-strings.md) 항목에서 보간된 문자열로 작업하는 방법에 대해 자세히 알아볼 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"724b5-185\">You can learn more about working with interpolated strings in the [Interpolated Strings](../language-reference/keywords/interpolated-strings.md) topic in the C# Reference.</span></span>\0"
