### YamlMime:Tutorial
title: <span data-ttu-id="cf6df-101">C#의 문자열 보간</span><span class="sxs-lookup"><span data-stu-id="cf6df-101">String interpolation in C#</span></span>
metadata:
  title: 문자열 보간 대화형 자습서 - C# 빠른 시작
  description: 이 자습서에서는 브라우저를 사용하여 C# 문자열 보간 기능을 대화식으로 탐색합니다. C# 코드를 작성하고 브라우저에서 직접 코드를 컴파일하고 실행한 결과를 확인할 수 있습니다.
  audience: Developer
  ms.custom: mvc
  ms.topic: get-started-article
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: <span data-ttu-id="cf6df-105">C#의 컬렉션</span><span class="sxs-lookup"><span data-stu-id="cf6df-105">Collections in C#</span></span>
  ms.openlocfilehash: ac9c8488c787b1dc9b4fb60b18834d328faa4e83
  ms.sourcegitcommit: 88f251b08bf0718ce119f3d7302f514b74895038
  ms.translationtype: HT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 05/10/2018
items:
- durationInMinutes: 2
  content: >
    <span data-ttu-id="cf6df-106">이 빠른 시작에서는 [문자열 보간](../language-reference/tokens/interpolated.md)을 사용하여 단일 문자열에 값을 삽입하는 방법을 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="cf6df-106">This quickstart teaches you how to use [string interpolation](../language-reference/tokens/interpolated.md) to insert values into a single string.</span></span> <span data-ttu-id="cf6df-107">또한 결과 문자열에서 해당 값의 텍스트 표현을 제어하는 방법을 알아봅니다.</span><span class="sxs-lookup"><span data-stu-id="cf6df-107">You also learn how to control text representations of those values in the result string.</span></span> <span data-ttu-id="cf6df-108">브라우저를 사용하여 C# 코드를 작성 및 실행하고 생성된 결과를 즉시 볼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cf6df-108">You use your browser to write and run C# code and can immediately see the produced results.</span></span>
- title: <span data-ttu-id="cf6df-109">보간된 문자열 만들기</span><span class="sxs-lookup"><span data-stu-id="cf6df-109">Create an interpolated string</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"cf6df-110\">대화형 창에서 다음 코드를 실행합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-110\">Run the following code in the interactive window.</span></span> <span data-ttu-id=\"cf6df-111\">이를 위해서 대화형 창에 코드를 입력하고(`\\<name>`을 사용자의 이름으로 바꿈) **실행** 단추를 클릭합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-111\">To do that, type the code in the interactive window (replace `\\<name>` with your name) and select **Run**:</span></span>\n\n```csharp\nvar name = \"<name>\";\nConsole.WriteLine($\"Hello, {name}. It's a pleasure to meet you!\");\n```\n\n<span data-ttu-id=\"cf6df-112\">코드를 실행하면 인사말에 사용자 이름이 포함된 문자열이 **출력**에 표시됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-112\">When you run the code, **Output** displays a string that includes your name in the greeting.</span></span> <span data-ttu-id=\"cf6df-113\"><xref:System.Console.WriteLine%2A> 메서드 호출의 문자열 인수는 *보간된 문자열*입니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-113\">The string argument of the <xref:System.Console.WriteLine%2A> method call is an *interpolated string*.</span></span> <span data-ttu-id=\"cf6df-114\">이는 포함 코드가 들어있는 문자열에서 단일 문자열(*결과 문자열*이라고 함)을 생성할 수 있게 해주는 일종의 템플릿입니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-114\">It's a kind of template that lets you construct a single string (called the *result string*) from a string that includes embedded code.</span></span> <span data-ttu-id=\"cf6df-115\">보간된 문자열은 문자열에 값을 삽입하거나 여러 개의 문자열을 연결(함께 조인)하는 데 특히 유용합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-115\">Interpolated strings are particularly useful for inserting values into a string or concatenating (joining together) several strings.</span></span> \n\n<span data-ttu-id=\"cf6df-116\">위의 예제에는 모든 보간된 문자열이 포함해야 하는 두 가지 요소가 포함됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-116\">The example above contains the two elements that every interpolated string must have:</span></span> \n\n- <span data-ttu-id=\"cf6df-117\">`$` 문자로 시작한 후 여는 따옴표 문자가 다음에 나오는 문자열 리터럴.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-117\">A string literal that begins with the `$` character before its opening quotation mark character.</span></span> <span data-ttu-id=\"cf6df-118\">`$` 기호와 따옴표 문자 사이에는 공백이 없어야 합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-118\">There can't be any spaces between the `$` symbol and the quotation mark character.</span></span> <span data-ttu-id=\"cf6df-119\">(공백을 포함하면 어떻게 되는지 확인하려면 대화형 창에서 `$` 문자 뒤에 공백을 삽입하고 업데이트된 코드를 실행합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-119\">(If you'd like to see what happens if you include one, insert a space after the `$` character in the interactive window and run the updated code.</span></span> <span data-ttu-id=\"cf6df-120\">C# 컴파일러가 \"예기치 않은 문자 '$'\"라는 메시지를 표시합니다.)</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-120\">The C# compiler complains, \"Unexpected character '$'\".)</span></span> \n\n- <span data-ttu-id=\"cf6df-121\">하나 이상의 *보간된 식*.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-121\">One or more *interpolated expressions*.</span></span> <span data-ttu-id=\"cf6df-122\">보간된 식은 열기 및 닫기 중괄호(`{` 및 `}`)로 표시됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-122\">An interpolated expression is indicated by an opening and closing brace (`{` and `}`).</span></span> <span data-ttu-id=\"cf6df-123\">중괄호 안에 값을 반환(`null` 포함)하는 C# 식을 배치할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-123\">You can put any C# expression that returns a value (including `null`) inside the braces.</span></span> \n\n<span data-ttu-id=\"cf6df-124\">몇 가지 다른 데이터 형식을 포함하는 문자열 보간 예제를 더 살펴보겠습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-124\">Let's try a few more string interpolation examples with some other data types.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"cf6df-125\">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-125\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"cf6df-126\">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-126\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="cf6df-127">다양한 데이터 형식 포함</span><span class="sxs-lookup"><span data-stu-id="cf6df-127">Include different data types</span></span>
  durationInMinutes: 5
  content: "<span data-ttu-id=\"cf6df-128\">이전 단계에서는 한 문자열을 다른 문자열 내에 삽입하는 데 문자열 보간을 사용했습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-128\">In the previous step, you used string interpolation to insert one string inside of another.</span></span> <span data-ttu-id=\"cf6df-129\">보간된 식의 결과는 모든 데이터 형식일 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-129\">The result of an interpolated expression can be of any data type, though.</span></span> <span data-ttu-id=\"cf6df-130\">보간된 문자열에 다양한 데이터 형식의 값을 포함시켜 보겠습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-130\">Let's include values of various data types in an interpolated string.</span></span> \n\n<span data-ttu-id=\"cf6df-131\">다음 예제에서는 먼저 `Name` [속성](../properties.md) 및 `ToString` 메서드가 있는 사용자 지정 데이터 형식 `Vegetable`을 정의합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-131\">In the following example, first, we define a custom data type `Vegetable` that has the `Name` [property](../properties.md) and the `ToString` method.</span></span> <span data-ttu-id=\"cf6df-132\">클라이언트 코드는 해당 메서드를 사용하여 `Vegetable` 인스턴스의 문자열 표현을 구할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-132\">The client code can use that method to get the string representation of a `Vegetable` instance.</span></span> <span data-ttu-id=\"cf6df-133\">예제에서 `Vegetable.ToString` 메서드는 `Vegetable` 생성자에서 초기화된 `Name` 속성의 값을 반환합니다. `Vegetable(string name) => Name = name;`</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-133\">In the example the `Vegetable.ToString` method returns the value of the `Name` property that is initialized at the `Vegetable` constructor: `Vegetable(string name) => Name = name;`.</span></span> <span data-ttu-id=\"cf6df-134\">다음으로, `new` 키워드를 사용하고 생성자 `Vegetable`에 대한 name 매개 변수를 제공하여 `Vegetable` 형식의 인스턴스를 만듭니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-134\">Then we create an instance of the `Vegetable` type by using `new` keyword and providing a name parameter for the constructor `Vegetable`.</span></span> <span data-ttu-id=\"cf6df-135\">마지막으로 <xref:System.DateTime> 값, <xref:System.Decimal> 값 및 `Unit` [열거형](../programming-guide/enumeration-types.md) 값을 포함하는 보간된 문자열에 해당 인스턴스를 포함시킵니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-135\">Finally, we include that instance into an interpolated string that also contains a <xref:System.DateTime> value, a <xref:System.Decimal> value, and a `Unit` [enumeration](../programming-guide/enumeration-types.md) value.</span></span> <span data-ttu-id=\"cf6df-136\">대화형 창에서 다음 코드를 실행합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-136\">Run the following code in the interactive window:</span></span>\n\n```csharp\npublic class Vegetable\n{\n   public Vegetable(string name) => Name = name;\n\n   public string Name { get; }\n\n   public override string ToString() => Name;\n}\n\npublic enum Unit { item, pound, ounce, dozen };\n\nvar item = new Vegetable(\"eggplant\");\nvar date = DateTime.Now;\nvar price = 1.99m;\nvar unit = Unit.item;\nConsole.WriteLine($\"On {date}, the price of {item} was {price} per {unit}.\");\n```\n\n<span data-ttu-id=\"cf6df-137\">보간된 문자열의 보간된 식 `item`은 결과 문자열에 \"eggplant\"라는 텍스트로 확인됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-137\">Note that the interpolated expression `item` in the interpolated string resolves to the text \"eggplant\" in the result string.</span></span> <span data-ttu-id=\"cf6df-138\">이것은 식 결과의 형식이 문자열이 아닌 경우 다음과 같은 방식으로 결과가 문자열로 확인되기 때문입니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-138\">That's because, when the type of the expression result is not a string, the result is resolved to a string in the following way:</span></span>\n\n- <span data-ttu-id=\"cf6df-139\">보간된 식이 `null`로 계산되고 빈 문자열(\"\" 또는 <xref:System.String.Empty?displayProperty=nameWithType>)이 사용됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-139\">If the interpolated expression evaluates to `null`, an empty string (\"\", or <xref:System.String.Empty?displayProperty=nameWithType>) is used.</span></span>\n\n- <span data-ttu-id=\"cf6df-140\">보간된 식이 `null`로 계산되지 않고 결과 형식의 `ToString` 메서드가 호출됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-140\">If the interpolated expression doesn't evaluate to `null`, typically the `ToString` method of the result type is called.</span></span> <span data-ttu-id=\"cf6df-141\">이것은 `Vegetable.ToString` 메서드의 구현을 업데이트하여 테스트할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-141\">You can test this by updating the implementation of the `Vegetable.ToString` method.</span></span> <span data-ttu-id=\"cf6df-142\">모든 C# 데이터 형식에는 이 메서드가 구현되어 있기 때문에 `ToString` 메서드를 구현하지 않을 수도 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-142\">You might even not implement `ToString` method since every C# data type has some implementation of this method.</span></span> <span data-ttu-id=\"cf6df-143\">이것을 테스트하려면 예제에서 `Vegetable.ToString` 메서드 정의를 주석으로 처리합니다. (이렇게 하려면, 그 앞에 주석 기호 즉, `//`를 추가합니다.)</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-143\">To test that, comment out the definition of the `Vegetable.ToString` method in the example (to do that, put a comment symbol `//` in front of it).</span></span> <span data-ttu-id=\"cf6df-144\">출력에서 \"eggplant\" 문자열은 <xref:System.Object.ToString?displayProperty=nameWithType> 메서드의 기본 동작인 정규화된 형식 이름(형식 이름과 함께 C# REPL에 의해 정의된 네임스페이스)으로 바뀝니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-144\">In the output, the string \"eggplant\" is replaced by the fully qualified type name (the namespace defined by the C# REPL along with the type name), which is the default behavior of the <xref:System.Object.ToString?displayProperty=nameWithType> method.</span></span> <span data-ttu-id=\"cf6df-145\">열거형 형식에 대한 `ToString` 메서드의 기본 동작은 열거형을 정의하는 데 사용된 값의 문자열 표현을 반환하는 것입니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-145\">Default behavior of the `ToString` method for an enumeration type is to return the string representation of a value used at the definition of the enumeration.</span></span>   \n\n<span data-ttu-id=\"cf6df-146\">이 예제의 출력에서 날짜는 매우 정확하며(eggplant 가격은 초마다 변경되지 않음), 가격 값은 통화 단위를 나타내지 않습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-146\">In the output from this example, the date is too precise (the price of eggplant doesn't change every second), and the price value doesn't indicate a unit of currency.</span></span> <span data-ttu-id=\"cf6df-147\">다음 단계에서는 식 결과에 대한 문자열 표현의 형식을 제어하여 해당 문제를 해결하는 방법을 알아봅니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-147\">In the next step, you'll learn how to fix those issues by controlling the format of string representations of the expression results.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"cf6df-148\">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-148\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"cf6df-149\">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-149\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="cf6df-150">보간된 식의 서식 제어</span><span class="sxs-lookup"><span data-stu-id="cf6df-150">Control the formatting of interpolated expressions</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="cf6df-151">이전 단계에서는 형식이 잘못 지정된 두 개의 문자열을 결과 문자열에 삽입했습니다.</span><span class="sxs-lookup"><span data-stu-id="cf6df-151">In the previous step, two poorly formatted strings were inserted into the result string.</span></span> <span data-ttu-id="cf6df-152">하나는 날짜만 적절한 날짜 및 시간 값이었습니다.</span><span class="sxs-lookup"><span data-stu-id="cf6df-152">One was a date and time value for which only the date was appropriate.</span></span> <span data-ttu-id="cf6df-153">두 번째는 통화 단위를 나타내지 않는 가격이었습니다.</span><span class="sxs-lookup"><span data-stu-id="cf6df-153">The second was a price that didn't indicate its unit of currency.</span></span> <span data-ttu-id="cf6df-154">두 가지 문제는 쉽게 해결할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cf6df-154">Both issues are easy to address.</span></span> <span data-ttu-id="cf6df-155">문자열 보간을 통해 특정 유형의 형식을 제어하는 *형식 문자열*을 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cf6df-155">String interpolation lets you specify *format strings* that control the formatting of particular types.</span></span> <span data-ttu-id="cf6df-156">다음 줄에 표시된 것처럼 이전 예제의 `Console.WriteLine`에 대한 호출을 수정하여 날짜 및 가격 식의 형식 문자열을 포함시킵니다.</span><span class="sxs-lookup"><span data-stu-id="cf6df-156">Modify the call to `Console.WriteLine` from the previous example to include the format strings for the date and price expressions as shown in the following line:</span></span>


    ```csharp

    Console.WriteLine($"On {date:d}, the price of {item} was {price:C2} per {unit}.");

    ```


    <span data-ttu-id="cf6df-157">콜론(":")과 형식 문자열을 사용하여 보간된 식에 따라 형식 문자열을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="cf6df-157">You specify a format string by following the interpolated expression with a colon (":") and the format string.</span></span> <span data-ttu-id="cf6df-158">"d"는 간단한 날짜 형식을 나타내는 [표준 날짜 및 시간 형식 문자열](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier)입니다.</span><span class="sxs-lookup"><span data-stu-id="cf6df-158">"d" is a [standard date and time format string](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) that represents the short date format.</span></span> <span data-ttu-id="cf6df-159">"C2"는 소수점 뒤 두 자릿수를 포함하는 통화 값으로 숫자를 나타내는 [표준 숫자 형식 문자열](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier)입니다.</span><span class="sxs-lookup"><span data-stu-id="cf6df-159">"C2" is a [standard numeric format string](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) that represents a number as a currency value with two digits after the decimal point.</span></span>


    <span data-ttu-id="cf6df-160">.NET 라이브러리의 많은 형식은 미리 정의된 형식 문자열 집합을 지원합니다.</span><span class="sxs-lookup"><span data-stu-id="cf6df-160">A number of types in the .NET libraries support a predefined set of format strings.</span></span> <span data-ttu-id="cf6df-161">여기에는 모든 숫자 형식과 날짜 및 시간 형식이 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="cf6df-161">These include all the numeric types and the date and time types.</span></span> <span data-ttu-id="cf6df-162">형식 문자열을 지원하는 형식의 전체 목록을 보려면 [.NET의 서식 지정 형식](../../standard/base-types/formatting-types.md) 문서의 [형식 문자열 및 .NET 클래스 라이브러리 형식](../../standard/base-types/formatting-types.md#stringRef)을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="cf6df-162">For a complete list of types that support format strings, see [Format Strings and .NET Class Library Types](../../standard/base-types/formatting-types.md#stringRef) in the [Formatting Types in .NET](../../standard/base-types/formatting-types.md) article.</span></span>


    <span data-ttu-id="cf6df-163">예제에서 형식 문자열을 수정하여 날짜 및 시간의 서식과 숫자 값에 미치는 영향을 확인해 보세요.</span><span class="sxs-lookup"><span data-stu-id="cf6df-163">Try modifying the format strings in the example to see how they affect the formatting of the date and time and the numeric value.</span></span> <span data-ttu-id="cf6df-164">`{date:d}`의 "d"를 "t"(짧은 시간 형식 표시), "y"(연도 및 월 표시) 및 "yyyy"(연도를 4자리 숫자로 표시)로 변경합니다.</span><span class="sxs-lookup"><span data-stu-id="cf6df-164">Change the "d" in `{date:d}` to "t" (to display the short time format), "y" (to display the year and month), and "yyyy" (to display the year as a four-digit number).</span></span> <span data-ttu-id="cf6df-165">`{price:C2}`의 "C2"를 "e"(지수 표기) 및 "F3"(소수점 뒤 세 자릿수의 숫자 값)으로 변경합니다.</span><span class="sxs-lookup"><span data-stu-id="cf6df-165">Change the "C2" in `{price:C2}` to "e" (for exponential notation) and "F3" (for a numeric value with three digits after the decimal point).</span></span>


    <span data-ttu-id="cf6df-166">형식을 제어하는 것 외에도, 결과 문자열에 포함된 형식이 지정된 문자열의 필드 너비와 맞춤을 제어할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cf6df-166">In addition to controlling formatting, you can also control the field width and alignment of the formatted strings that are included in the result string.</span></span> <span data-ttu-id="cf6df-167">다음 단계에서 이 작업을 수행하는 방법을 알아봅니다.</span><span class="sxs-lookup"><span data-stu-id="cf6df-167">In the next step, you'll learn how to do this.</span></span>


    > [!NOTE]

    > <span data-ttu-id="cf6df-168">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class="sxs-lookup"><span data-stu-id="cf6df-168">This online coding experience is in preview mode.</span></span> <span data-ttu-id="cf6df-169">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class="sxs-lookup"><span data-stu-id="cf6df-169">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="cf6df-170">필드 너비와 보간된 식의 맞춤을 제어합니다.</span><span class="sxs-lookup"><span data-stu-id="cf6df-170">Control the field width and alignment of interpolated expressions</span></span>
  durationInMinutes: 6
  content: >
    <span data-ttu-id="cf6df-171">일반적으로 보간된 식의 결과가 문자열로 형식이 지정되면 해당 문자열은 결과 문자열에 선행 또는 후행 공백 없이 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="cf6df-171">Ordinarily, when the result of an interpolated expression is formatted to string, that string is included in a result string without leading or trailing spaces.</span></span> <span data-ttu-id="cf6df-172">특히 데이터 집합을 가지고 작업하는 경우 필드 너비와 텍스트 맞춤을 제어할 수 있으면 보다 읽기 쉬운 출력을 생성하는 데 도움이 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cf6df-172">Particularly when you work with a set of data, being able to control a field width and text alignment helps to produce a more readable output.</span></span> <span data-ttu-id="cf6df-173">이를 확인하려면 다음 코드를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="cf6df-173">To see this, run the following code:</span></span>


    ```csharp
      var inventory = new Dictionary<string, int>()
      {
          ["hammer, ball pein"] = 18,
          ["hammer, cross pein"] = 5,
          ["screwdriver, Phillips #2"] = 14
      };

      Console.WriteLine($"Inventory on {DateTime.Now:d}");
      Console.WriteLine(" ");
      Console.WriteLine($"|{"Item",-25}|{"Quantity",10}|");
      foreach (var item in inventory)
         Console.WriteLine($"|{item.Key,-25}|{item.Value,10}|");
    ```


    <span data-ttu-id="cf6df-174">항목 이름은 왼쪽 맞춤이며 해당 수량은 오른쪽 맞춤입니다.</span><span class="sxs-lookup"><span data-stu-id="cf6df-174">The item names are left-aligned, and their quantities are right-aligned.</span></span> <span data-ttu-id="cf6df-175">보간된 식 뒤에 쉼표(",")를 추가하고 *최소* 필드 너비를 지정하여 맞춤을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="cf6df-175">You specify the alignment by adding a comma (",") after an interpolated expression and designating the *minimum* field width.</span></span> <span data-ttu-id="cf6df-176">지정한 값이 양수이면 필드는 오른쪽 맞춤입니다.</span><span class="sxs-lookup"><span data-stu-id="cf6df-176">If the specified value is a positive number, the field is right-aligned.</span></span> <span data-ttu-id="cf6df-177">음수이면 필드는 왼쪽 맞춤입니다.</span><span class="sxs-lookup"><span data-stu-id="cf6df-177">If it is a negative number, the field is left-aligned.</span></span>


    <span data-ttu-id="cf6df-178">`{"Item",-25}` 및 `{item.Key,-25}` 코드에서 음수 기호를 제거하고 예제를 다시 실행해 보세요.</span><span class="sxs-lookup"><span data-stu-id="cf6df-178">Try removing the negative signs from the `{"Item",-25}` and `{item.Key,-25}` code and run the example again.</span></span> <span data-ttu-id="cf6df-179">이때 항목 이름은 오른쪽 맞춤으로 정렬됩니다.</span><span class="sxs-lookup"><span data-stu-id="cf6df-179">This time, the item names are right-aligned.</span></span>


    <span data-ttu-id="cf6df-180">하나의 보간된 식에 대해 맞춤 지정자 및 형식 문자열을 결합할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cf6df-180">You can combine an alignment specifier and a format string for a single interpolated expression.</span></span> <span data-ttu-id="cf6df-181">이렇게 하려면 먼저 맞춤을 지정하고 콜론과 형식 문자열을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="cf6df-181">To do that, specify the alignment first, followed by a colon and the format string.</span></span> <span data-ttu-id="cf6df-182">필드 너비가 정의된 세 가지 형식이 지정된 문자열을 표시하는 다음 코드를 실행해 보세요.</span><span class="sxs-lookup"><span data-stu-id="cf6df-182">Try the following code that displays three formatted strings with defined field widths:</span></span>


    ```csharp

    Console.WriteLine($"[{DateTime.Now,-20:d}] Hour [{DateTime.Now,-10:HH}] [{1063.342,15:N2}] feet");

    ```


    > [!NOTE]

    > <span data-ttu-id="cf6df-183">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class="sxs-lookup"><span data-stu-id="cf6df-183">This online coding experience is in preview mode.</span></span> <span data-ttu-id="cf6df-184">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class="sxs-lookup"><span data-stu-id="cf6df-184">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- content: "<span data-ttu-id=\"cf6df-185\">문자 보간 빠른 시작을 완료했습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-185\">You've completed the string interpolation quickstart.</span></span> \n\n<span data-ttu-id=\"cf6df-186\">자체 로컬 개발 환경에서 빠른 시작을 계속 진행할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-186\">You can continue these quickstarts in your own local development environment.</span></span> <span data-ttu-id=\"cf6df-187\">[로컬 개발](local-environment.md)의 기본 내용을 알아본 후 빠른 시작을 선택하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-187\">Learn the basics of [local development](local-environment.md) and then pick a quickstart.</span></span> <span data-ttu-id=\"cf6df-188\">동일한 빠른 시작을 시도해 보고, 다음 빠른 시작으로 직접 이동하거나, [C#의 숫자](numbers-in-csharp-local.md) 빠른 시작을 다시 시작할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-188\">You can try this same quickstart, move directly to the next quickstart, or start again with the [Numbers in C#](numbers-in-csharp-local.md) quickstart.</span></span>\n\n<span data-ttu-id=\"cf6df-189\">자세한 내용은 [문자열 보간](../language-reference/tokens/interpolated.md) 항목 및 [C#에서 문자열 보간](../tutorials/string-interpolation.md) 자습서를 참조하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"cf6df-189\">For more information, see the [String interpolation](../language-reference/tokens/interpolated.md) topic and the [String interpolation in C#](../tutorials/string-interpolation.md) tutorial.</span></span>"
