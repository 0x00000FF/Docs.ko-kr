### YamlMime:YamlDocument
documentType: Tutorial
title: '<span data-ttu-id="14969-101">C#의 숫자</span><span class="sxs-lookup"><span data-stu-id="14969-101">Numbers in C#</span></span>'
metadata:
  title: '<span data-ttu-id="14969-102">C#의 숫자</span><span class="sxs-lookup"><span data-stu-id="14969-102">Numbers in C#</span></span>'
  description: '<span data-ttu-id="14969-103">숫자 형식에 대한 이 자습서에서는 브라우저를 사용하여 C#을 대화형으로 학습할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14969-103">In this tutorial about numeric types, you''ll use your browser to learn C# interactively.</span></span> <span data-ttu-id="14969-104">C# 코드를 작성하고 브라우저에서 직접 코드를 컴파일하고 실행한 결과를 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14969-104">You''re going to write C# code and see the results of compiling and running your code directly in the browser.</span></span>'
  audience: Developer
  level: Beginner
  nextTutorialHref: branches-and-loops
  nextTutorialTitle: 'Branches and loops in C#'
  displayType: two-column
  interactive: csharp
items:
  - durationInMinutes: 1
    content: |
      <span data-ttu-id="14969-105">이 자습서에서는 브라우저를 사용하여 C#을 작성하고 코드를 컴파일하고 실행한 결과를 확인하여, C#의 숫자 형식을 대화형으로 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="14969-105">This tutorial teaches you about the number types in C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="14969-106">이 자습서에는 C#의 숫자 및 수학 연산을 살펴보는 일련의 단원이 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14969-106">It contains a series of lessons that explore numbers and math operations in C#.</span></span> <span data-ttu-id="14969-107">이러한 단원에서는 C# 언어의 기본 사항을 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="14969-107">These lessons teach you the fundamentals of the C# language.</span></span>
  - title: <span data-ttu-id="14969-108">정수 계산 살펴보기</span><span class="sxs-lookup"><span data-stu-id="14969-108">Explore integer math</span></span>
    durationInMinutes: 4
    content: |
      <span data-ttu-id="14969-109">대화형 창에서 다음 코드를 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="14969-109">Run the following code in the interactive window.</span></span> <span data-ttu-id="14969-110">그렇게 하려면 대화형 창에 다음 코드 블록을 입력하고 **실행** 단추를 클릭합니다.</span><span class="sxs-lookup"><span data-stu-id="14969-110">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>

      ```csharp
      int a = 18;
      int b = 6;
      int c = a + b;
      Console.WriteLine(c);
      ```

      <span data-ttu-id="14969-111">정수를 사용하는 기본 수학 연산 중 하나를 방금 살펴봤습니다.</span><span class="sxs-lookup"><span data-stu-id="14969-111">You've just seen one of the fundamental math operations with integers.</span></span> <span data-ttu-id="14969-112">`int` 형식은 **정수**(양의 정수 또는 음의 정수)를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="14969-112">The `int` type represents an **integer**, a positive or negative whole number.</span></span> <span data-ttu-id="14969-113">더하기의 경우 `+` 기호를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="14969-113">You use the `+` symbol for addition.</span></span> <span data-ttu-id="14969-114">정수에 대해 다른 일반적인 수학 연산은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="14969-114">Other common mathematical operations for integers include:</span></span>

      - <span data-ttu-id="14969-115">빼기의 경우 `-`</span><span class="sxs-lookup"><span data-stu-id="14969-115">`-` for subtraction</span></span>
      - <span data-ttu-id="14969-116">곱하기의 경우 `*`</span><span class="sxs-lookup"><span data-stu-id="14969-116">`*` for multiplication</span></span>
      - <span data-ttu-id="14969-117">나누기의 경우 `/`</span><span class="sxs-lookup"><span data-stu-id="14969-117">`/` for division</span></span>

      > [!TIP]
      > <span data-ttu-id="14969-118">이 자습서에서는 대화형 창에서 작성한 코드를 수정하여 자신만의 코드를 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14969-118">Throughout this tutorial, you can explore on your own by modifying the code you've written in the interactive window.</span></span> <span data-ttu-id="14969-119">이 자습서에서는 각 단계에서 시도할 수 있는 예제를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="14969-119">This tutorial provides examples that you can try at each step.</span></span>

      <span data-ttu-id="14969-120">다른 연산을 살펴보세요.</span><span class="sxs-lookup"><span data-stu-id="14969-120">Start by exploring those different operations.</span></span> <span data-ttu-id="14969-121">세 번째 줄을 수정하여 이러한 각 연산을 사용해 보세요.</span><span class="sxs-lookup"><span data-stu-id="14969-121">Modify the third line to try each of these operations.</span></span> <span data-ttu-id="14969-122">각각을 편집한 후 **실행** 단추를 클릭합니다.</span><span class="sxs-lookup"><span data-stu-id="14969-122">After each edit, click the **Run** button.</span></span>

      <span data-ttu-id="14969-123">빼기:</span><span class="sxs-lookup"><span data-stu-id="14969-123">Subtraction:</span></span>

      ```csharp
      int c = a - b;
      ```

      <span data-ttu-id="14969-124">곱하기:</span><span class="sxs-lookup"><span data-stu-id="14969-124">Multiplication:</span></span>

      ```csharp
      int c = a * b;
      ```

      <span data-ttu-id="14969-125">나누기:</span><span class="sxs-lookup"><span data-stu-id="14969-125">Division:</span></span> 

      ```csharp
      int c = a / b;
      ```

      <span data-ttu-id="14969-126">원하는 경우 동일한 줄에서 여러 수학 연산을 수행하여 실험할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14969-126">You can also experiment by performing multiple mathematics operations in the same line, if you'd like.</span></span>

      > [!TIP]
      > <span data-ttu-id="14969-127">C# (또는 다른 프로그래밍 언어)를 살펴보면서 코드를 작성할 때 실수를 하게 될 것입니다.</span><span class="sxs-lookup"><span data-stu-id="14969-127">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="14969-128">**컴파일러**는 그러한 오류를 찾아 사용자에게 보고합니다.</span><span class="sxs-lookup"><span data-stu-id="14969-128">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="14969-129">출력에 오류 메시지가 포함되어 있으면 예제 코드와 대화형 창의 코드를 자세히 살펴보고 수정 사항을 확인하세요.</span><span class="sxs-lookup"><span data-stu-id="14969-129">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>
      > <span data-ttu-id="14969-130">이 연습은 C# 코드의 구조를 학습하는 데 도움이 됩니다.</span><span class="sxs-lookup"><span data-stu-id="14969-130">That exercise will help you learn the structure of C# code.</span></span>     

      > [!NOTE]
      > <span data-ttu-id="14969-131">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class="sxs-lookup"><span data-stu-id="14969-131">This online coding experience is in preview mode.</span></span> <span data-ttu-id="14969-132">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class="sxs-lookup"><span data-stu-id="14969-132">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="14969-133">연산 순서 알아보기</span><span class="sxs-lookup"><span data-stu-id="14969-133">Explore order of operations</span></span>
    durationInMinutes: 7
    content: |
      <span data-ttu-id="14969-134">C# 언어는 수학에서 배운 규칙과 일치하는 규칙으로 여러 가지 수학 연산의 우선 순위를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="14969-134">The C# language defines the precedence of different mathematics operations with rules consistent with the rules you learned in mathematics.</span></span>
      <span data-ttu-id="14969-135">곱하기와 나누기는 더하기와 빼기보다 우선 순위가 높습니다.</span><span class="sxs-lookup"><span data-stu-id="14969-135">Multiplication and division take precedence over addition and subtraction.</span></span>
      <span data-ttu-id="14969-136">대화형 창에서 다음 코드를 실행하여 살펴보세요.</span><span class="sxs-lookup"><span data-stu-id="14969-136">Explore that by running the following code in the interactive window:</span></span>

      ```csharp
      int a = 5;
      int b = 4;
      int c = 2;
      int d = a + b * c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="14969-137">출력에서는 곱하기가 수행된 후 더하기가 수행되었음을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="14969-137">The output demonstrates that the multiplication is performed before the addition.</span></span>

      <span data-ttu-id="14969-138">먼저 수행하려는 연산 주위에 괄호를 추가하여 여러 연산의 순서를 적용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14969-138">You can force a different order of operation by adding parentheses around the operation or operations you want performed first:</span></span>

      ```csharp
      int a = 5;
      int b = 4;
      int c = 2;
      int d = (a  + b) * c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="14969-139">여러 다른 연산을 결합하여 자세히 살펴보세요.</span><span class="sxs-lookup"><span data-stu-id="14969-139">Explore more by combining many different operations.</span></span> <span data-ttu-id="14969-140">위에서 네 번째 줄을 다음과 같이 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="14969-140">Replace the fourth line above with something like this:</span></span>

      ```csharp
      int d = (a + b) - 6 * c + (12 * 4) / 3 + 12;
      ```

      <span data-ttu-id="14969-141">정수에 대해 흥미로운 동작을 이미 알고 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14969-141">You may have noticed an interesting behavior for integers.</span></span> <span data-ttu-id="14969-142">수학 결과에 소수나 분수 부분이 포함된 경우에도 정수 나누기는 항상 정수 결과를 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="14969-142">Integer division always produces an integer result, even when the mathematical result would include a decimal or fraction portion.</span></span>

      <span data-ttu-id="14969-143">이러한 동작을 본 적이 없다면 다음을 시도해 보세요.</span><span class="sxs-lookup"><span data-stu-id="14969-143">If you haven't seen this behavior, try the following:</span></span>

      ```csharp
      int a = 7;
      int b = 4;
      int c = 3;
      int d = (a  + b) / c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="14969-144">**실행**을 클릭하여 결과를 다시 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="14969-144">Click **Run** again to see the results.</span></span>

      > [!NOTE]
      > <span data-ttu-id="14969-145">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class="sxs-lookup"><span data-stu-id="14969-145">This online coding experience is in preview mode.</span></span> <span data-ttu-id="14969-146">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class="sxs-lookup"><span data-stu-id="14969-146">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="14969-147">정수 전체 자릿수 및 한도 살펴보기</span><span class="sxs-lookup"><span data-stu-id="14969-147">Explore integer precision and limits</span></span>
    durationInMinutes: 5
    content: |
      <span data-ttu-id="14969-148">마지막 샘플에서는 정수 나누기가 결과를 자르는 것을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="14969-148">That last sample showed you that integer division truncates the result.</span></span>
      <span data-ttu-id="14969-149">**modulo** 연산자(`%` 문자)를 사용하여 **나머지**를 얻을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14969-149">You can get the **remainder** by using the **modulo** operator, the `%` character:</span></span>

      ```csharp
      int a = 7;
      int b = 4;
      int c = 3;
      int d = (a  + b) / c;
      int e = (a + b) % c;
      Console.WriteLine("quotient: " + d);
      Console.WriteLine("remainder: " + e);
      ```

      <span data-ttu-id="14969-150">C# 정수 형식은 한 가지 다른 면에서 수학의 정수와 다릅니다. 즉 `int` 형식에는 최소 한도와 최대 한도가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14969-150">The C# integer type differs from mathematical integers in one other way: the `int` type has minimum and maximum limits.</span></span> <span data-ttu-id="14969-151">대화형 창에서 이 코드를 실행하여 해당 한도를 확인하세요.</span><span class="sxs-lookup"><span data-stu-id="14969-151">Run this code in the interactive window to see those limits:</span></span>

      ```csharp
      int max = int.MaxValue;
      int min = int.MinValue;
      Console.WriteLine("The range of integers is " + min + " to " + max);
      ```

      <span data-ttu-id="14969-152">계산이 해당 한도를 초과하는 값을 생성하는 경우 **언더플로** 또는 **오버플로** 조건이 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="14969-152">If a calculation produces a value that exceeds those limits, you have an **underflow** or **overflow** condition.</span></span> <span data-ttu-id="14969-153">답은 한 한도에서 다른 한도로 래핑하는 것으로 나타납니다.</span><span class="sxs-lookup"><span data-stu-id="14969-153">The answer appears to wrap from one limit to the other.</span></span> <span data-ttu-id="14969-154">대화형 창에 다음 두 줄을 추가하여 예제를 확인하세요.</span><span class="sxs-lookup"><span data-stu-id="14969-154">Add these two lines to the interactive window to see an example:</span></span>

      ```csharp
      int what = max + 3;
      Console.WriteLine("An example of overflow: " + what);
      ```

      <span data-ttu-id="14969-155">답은 최소 (음의) 정수와 아주 가깝습니다.</span><span class="sxs-lookup"><span data-stu-id="14969-155">Notice that the answer is very close to the minimum (negative) integer.</span></span> <span data-ttu-id="14969-156">`min + 2`와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="14969-156">It's the same as `min + 2`.</span></span> <span data-ttu-id="14969-157">더하기 연산은 정수에 대해 허용된 값을 **오버플로했습니다**.</span><span class="sxs-lookup"><span data-stu-id="14969-157">The addition operation **overflowed** the allowed values for integers.</span></span>
      <span data-ttu-id="14969-158">오버플로가 가능한 가장 큰 정수에서 가장 작은 정수로 “래핑”하기 때문에 답은 아주 큰 음수입니다.</span><span class="sxs-lookup"><span data-stu-id="14969-158">The answer is a very large negative number because an overflow "wraps around" from the largest possible integer value to the smallest.</span></span>

      <span data-ttu-id="14969-159">`int` 형식이 요구 사항을 충족하지 않을 때 사용하는 여러 한도와 전체 자릿수가 있는 다른 숫자 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14969-159">There are other numeric types with different limits and precision that you would use when the `int` type doesn't meet your needs.</span></span> <span data-ttu-id="14969-160">이에 대해 다음에 살펴보겠습니다.</span><span class="sxs-lookup"><span data-stu-id="14969-160">Let's explore those next.</span></span>

      > [!NOTE]
      > <span data-ttu-id="14969-161">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class="sxs-lookup"><span data-stu-id="14969-161">This online coding experience is in preview mode.</span></span> <span data-ttu-id="14969-162">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class="sxs-lookup"><span data-stu-id="14969-162">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="14969-163">double 형식 작업</span><span class="sxs-lookup"><span data-stu-id="14969-163">Work with the double type</span></span>
    durationInMinutes: 5
    content: |
      <span data-ttu-id="14969-164">`double` 숫자 형식은 배정밀도 부동 소수점 수를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="14969-164">The `double` numeric type represents a double-precision floating point number.</span></span> <span data-ttu-id="14969-165">이러한 용어는 생소할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14969-165">Those terms may be new to you.</span></span> <span data-ttu-id="14969-166">**부동 소수점** 수는 아주 크거나 작은 정수가 아닌 수를 나타낼 때 유용합니다.</span><span class="sxs-lookup"><span data-stu-id="14969-166">A **floating point** number is useful to represent non-integral numbers that may be very large, or small in magnitude.</span></span> <span data-ttu-id="14969-167">**배정밀도**란 이러한 숫자가 **단정밀도**보다 큰 전체 자릿수를 사용하여 저장됨을 의미합니다.</span><span class="sxs-lookup"><span data-stu-id="14969-167">**Double-precision** means that these numbers are stored using greater precision than **single-precision**.</span></span> <span data-ttu-id="14969-168">최신 컴퓨터에서는 단정밀도 숫자보다 배정밀도를 더 많이 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="14969-168">On modern computers, it is more common to use double precision than single precision numbers.</span></span>
      <span data-ttu-id="14969-169">지금 살펴보세요.</span><span class="sxs-lookup"><span data-stu-id="14969-169">Let's explore.</span></span> <span data-ttu-id="14969-170">대화형 창에서 다음 코드를 실행하고 결과를 확인하세요.</span><span class="sxs-lookup"><span data-stu-id="14969-170">Try the following code in the interactive window and see the result:</span></span>

      ```csharp
      double a = 5;
      double b = 4;
      double c = 2;
      double d = (a  + b) / c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="14969-171">답에 몫의 소수 부분이 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14969-171">Notice that the answer includes the decimal portion of the quotient.</span></span> <span data-ttu-id="14969-172">double을 사용하여 약간 더 복잡한 식을 사용해 보세요.</span><span class="sxs-lookup"><span data-stu-id="14969-172">Try a slightly more complicated expression with doubles:</span></span>

      ```csharp
      double a = 19;
      double b = 23;
      double c = 8;
      double d = (a  + b) / c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="14969-173">double 값의 범위는 정수 값보다 훨씬 큽니다.</span><span class="sxs-lookup"><span data-stu-id="14969-173">The range of a double value is much greater than integer values.</span></span> <span data-ttu-id="14969-174">대화형 창에서 다음 코드를 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="14969-174">Try the following code in the interactive window:</span></span>

      ```csharp
      double max = double.MaxValue;
      double min = double.MinValue;
      Console.WriteLine("The range of double is " + min + " to " + max);
      ```

      <span data-ttu-id="14969-175">이러한 값은 과학적 표기법을 나타내도록 출력됩니다.</span><span class="sxs-lookup"><span data-stu-id="14969-175">These values are printed out to represent scientific notation.</span></span> <span data-ttu-id="14969-176">`E`의 왼쪽에 있는 숫자는 유효 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="14969-176">The number to the left of the `E` is the significant.</span></span> <span data-ttu-id="14969-177">오른쪽의 숫자는 지수이며 10의 배수입니다.</span><span class="sxs-lookup"><span data-stu-id="14969-177">The number to the right is the exponent, as a power of 10.</span></span> <span data-ttu-id="14969-178">내부적으로 이러한 숫자는 비슷하게 표시되지만 이진 형식으로 표시됩니다.</span><span class="sxs-lookup"><span data-stu-id="14969-178">Internally, these numbers are represented similarly, but in a binary form.</span></span> <span data-ttu-id="14969-179">한 부분은 유효한 이진 숫자를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="14969-179">One part represents the significant binary digits.</span></span>
      <span data-ttu-id="14969-180">다른 부분은 해당 유효 숫자에 대한 이진 소수점의 위치(소수점과 비슷함)를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="14969-180">Another part represents where to place the binary point (analogous to a decimal point) relative to those significant digits.</span></span>

      <span data-ttu-id="14969-181">수학의 10진수 숫자와 마찬가지로, C#에서 double에는 반올림 오류가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14969-181">Just like decimal numbers in math, doubles in C# can have rounding errors.</span></span> <span data-ttu-id="14969-182">다음 코드를 사용해 보세요.</span><span class="sxs-lookup"><span data-stu-id="14969-182">Try this code:</span></span>

      ```csharp
      double third = 1.0 / 3.0;
      Console.WriteLine(third);
      ```

      <span data-ttu-id="14969-183">`0.3` 반복은 `1/3`과 정확하게 동일하지는 않습니다.</span><span class="sxs-lookup"><span data-stu-id="14969-183">You know that `0.3` repeating is not exactly the same as `1/3`.</span></span>

      <span data-ttu-id="14969-184">***과제***</span><span class="sxs-lookup"><span data-stu-id="14969-184">***Challenge***</span></span>

      <span data-ttu-id="14969-185">`double` 형식을 사용하여 큰 숫자, 작은 숫자, 곱하기 및 나누기로 다른 계산을 수행해 보세요.</span><span class="sxs-lookup"><span data-stu-id="14969-185">Try other calculations with large numbers, small numbers, multiplication and division using the `double` type.</span></span>  <span data-ttu-id="14969-186">더 복잡한 계산을 수행해 보세요.</span><span class="sxs-lookup"><span data-stu-id="14969-186">Try more complicated calculations.</span></span>

      > [!NOTE]
      > <span data-ttu-id="14969-187">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class="sxs-lookup"><span data-stu-id="14969-187">This online coding experience is in preview mode.</span></span> <span data-ttu-id="14969-188">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class="sxs-lookup"><span data-stu-id="14969-188">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="14969-189">고정 소수점 형식 작업</span><span class="sxs-lookup"><span data-stu-id="14969-189">Work with fixed point types</span></span>
    durationInMinutes: 8
    content: |
      <span data-ttu-id="14969-190">C#의 기본적인 숫자 형식인 정수 형식과 double 형식을 살펴봤습니다.</span><span class="sxs-lookup"><span data-stu-id="14969-190">You've seen the basic numeric types in C#: integers and doubles.</span></span>  <span data-ttu-id="14969-191">학습할 또 다른 형식이 있습니다. 바로 `decimal` 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="14969-191">There is one other type to learn: the `decimal` type.</span></span> <span data-ttu-id="14969-192">`decimal` 형식은 범위가 작지만 `double`보다 전체 자릿수가 큽니다.</span><span class="sxs-lookup"><span data-stu-id="14969-192">The `decimal` type has a smaller range, but greater precision than `double`.</span></span> <span data-ttu-id="14969-193">**고정 소수점**이라는 용어는 소수점(또는 이진 소수점)이 이동하지 않음을 의미합니다.</span><span class="sxs-lookup"><span data-stu-id="14969-193">The term **fixed point** means that the decimal point (or binary point) doesn't move.</span></span> <span data-ttu-id="14969-194">이 형식에 대해 살펴보겠습니다.</span><span class="sxs-lookup"><span data-stu-id="14969-194">Let's take a look:</span></span>

      ```csharp
      decimal min = decimal.MinValue;
      decimal max = decimal.MaxValue;
      Console.WriteLine("The range of the decimal type is " + min + " to " + max);
      ```

      <span data-ttu-id="14969-195">범위가 `double` 형식보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="14969-195">Notice that the range is smaller than the `double` type.</span></span> <span data-ttu-id="14969-196">다음 코드를 사용하여 소수점이 있는 더 큰 전체 자릿수를 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14969-196">You can see the greater precision with the decimal type by trying the following code:</span></span>

      ```csharp
      double a = 1.0;
      double b = 3.0;
      Console.WriteLine(a / b);

      decimal c = 1.0M;
      decimal d = 3.0M;
      Console.WriteLine(c / d);
      ```

      <span data-ttu-id="14969-197">숫자의 `M` 접미사는 상수가 `decimal` 형식을 사용해야 함을 나타내는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="14969-197">The `M` suffix on the numbers is how you indicate that a constant should use the `decimal` type.</span></span>

      <span data-ttu-id="14969-198">소수점 형식을 사용하는 수학에는 소수점 오른쪽에 더 많은 숫자가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14969-198">Notice that the math using the decimal type has more digits to the right of the decimal point.</span></span> 

      <span data-ttu-id="14969-199">***과제***</span><span class="sxs-lookup"><span data-stu-id="14969-199">***Challenge***</span></span>

      <span data-ttu-id="14969-200">이제 여러 가지 숫자 형식을 살펴봤으므로 반지름이 2.50인치인 원의 면적을 계산하는 코드를 작성하세요.</span><span class="sxs-lookup"><span data-stu-id="14969-200">Now that you've seen the different numeric types, write code that calculates the area of a circle whose radius is 2.50 inches.</span></span> <span data-ttu-id="14969-201">원의 면적은 반지름 제곱 곱하기 PI입니다.</span><span class="sxs-lookup"><span data-stu-id="14969-201">Remember that the area of a circle is the radius squared multiplied by PI.</span></span> <span data-ttu-id="14969-202">힌트: C#에는 PI의 상수가 포함되어 있습니다. 즉 해당 값에 사용할 수 있는 `Math.PI`입니다.</span><span class="sxs-lookup"><span data-stu-id="14969-202">One hint: C# contains a constant for PI: `Math.PI` that you can use for that value.</span></span> 

      > [!NOTE]
      > <span data-ttu-id="14969-203">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class="sxs-lookup"><span data-stu-id="14969-203">This online coding experience is in preview mode.</span></span> <span data-ttu-id="14969-204">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class="sxs-lookup"><span data-stu-id="14969-204">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="14969-205">과제 완료</span><span class="sxs-lookup"><span data-stu-id="14969-205">Complete challenge</span></span>
    durationInMinutes: 1
    content: |
      <span data-ttu-id="14969-206">“C#의 숫자” 자습서를 완료했습니다.</span><span class="sxs-lookup"><span data-stu-id="14969-206">You've completed the "Numbers in C#" tutorial.</span></span> <span data-ttu-id="14969-207">다음 항목에서는 C#의 숫자에 대해 더 자세히 알아볼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14969-207">You can learn more about numbers in C# in the following topics:</span></span>

      <span data-ttu-id="14969-208">[정수 형식 표](../language-reference/keywords/integral-types-table.md) </span><span class="sxs-lookup"><span data-stu-id="14969-208">[Integral Types Table](../language-reference/keywords/integral-types-table.md) </span></span>  
      <span data-ttu-id="14969-209">[부동 소수점 형식 표](../language-reference/keywords/floating-point-types-table.md) </span><span class="sxs-lookup"><span data-stu-id="14969-209">[Floating-Point Types Table](../language-reference/keywords/floating-point-types-table.md) </span></span>  
      <span data-ttu-id="14969-210">[기본 제공 형식 표](../language-reference/keywords/built-in-types-table.md) </span><span class="sxs-lookup"><span data-stu-id="14969-210">[Built-In Types Table](../language-reference/keywords/built-in-types-table.md) </span></span>  
      <span data-ttu-id="14969-211">[암시적 숫자 변환 표](../language-reference/keywords/implicit-numeric-conversions-table.md) </span><span class="sxs-lookup"><span data-stu-id="14969-211">[Implicit Numeric Conversions Table](../language-reference/keywords/implicit-numeric-conversions-table.md) </span></span>  
      [<span data-ttu-id="14969-212">명시적 숫자 변환 표</span><span class="sxs-lookup"><span data-stu-id="14969-212">Explicit Numeric Conversions Table</span></span>](../language-reference/keywords/explicit-numeric-conversions-table.md)