### YamlMime:YamlDocument
documentType: Tutorial
title: "<span data-ttu-id=\"4eea4-101\">C#의 숫자</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-101\">Numbers in C#</span></span>"
metadata:
  title: "C#의 숫자"
  description: "숫자 형식에 대 한이 빠른 시작에 자세한 내용은 C# 대화형으로 브라우저를 사용 합니다. C# 코드를 작성하고 브라우저에서 직접 코드를 컴파일하고 실행한 결과를 확인할 수 있습니다."
  audience: Developer
  ms.custom: mvc
  level: Beginner
  nextTutorialHref: branches-and-loops
  nextTutorialTitle: "<span data-ttu-id=\"4eea4-105\">분기와 C#에서 루프</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-105\">Branches and loops in C#</span></span>"
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: bc859589078d1e2d16145125a80e738837c1ebf9
  ms.sourcegitcommit: 43c656811dd38a66a6672084c65d10c0cbbf2015
  ms.translationtype: HT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 11/22/2017
items:
- durationInMinutes: 1
  content: "<span data-ttu-id=\"4eea4-106\">이 빠른 시작에 설명 C#의 숫자 형식에 대 한 대화형으로 브라우저를 사용 하 여 C#으로 작성 하 여 컴파일 및 코드 실행의 결과 확인 합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-106\">This quick start teaches you about the number types in C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id=\"4eea4-107\">이 자습서에는 C#의 숫자 및 수학 연산을 살펴보는 일련의 단원이 포함되어 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-107\">It contains a series of lessons that explore numbers and math operations in C#.</span></span> <span data-ttu-id=\"4eea4-108\">이러한 단원에서는 C# 언어의 기본 사항을 설명합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-108\">These lessons teach you the fundamentals of the C# language.</span></span>\n"
- title: "<span data-ttu-id=\"4eea4-109\">정수 계산 살펴보기</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-109\">Explore integer math</span></span>"
  durationInMinutes: 4
  content: "<span data-ttu-id=\"4eea4-110\">대화형 창에서 다음 코드를 실행합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-110\">Run the following code in the interactive window.</span></span> <span data-ttu-id=\"4eea4-111\">그렇게 하려면 대화형 창에 다음 코드 블록을 입력하고 **실행** 단추를 클릭합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-111\">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>\n\n```csharp\nint a = 18;\nint b = 6;\nint c = a + b;\nConsole.WriteLine(c);\n```\n\n<span data-ttu-id=\"4eea4-112\">정수를 사용하는 기본 수학 연산 중 하나를 방금 살펴봤습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-112\">You've just seen one of the fundamental math operations with integers.</span></span> <span data-ttu-id=\"4eea4-113\">`int` 형식은 **정수**(양의 정수 또는 음의 정수)를 나타냅니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-113\">The `int` type represents an **integer**, a positive or negative whole number.</span></span> <span data-ttu-id=\"4eea4-114\">더하기의 경우 `+` 기호를 사용합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-114\">You use the `+` symbol for addition.</span></span> <span data-ttu-id=\"4eea4-115\">정수에 대해 다른 일반적인 수학 연산은 다음과 같습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-115\">Other common mathematical operations for integers include:</span></span>\n\n- <span data-ttu-id=\"4eea4-116\">빼기의 경우 `-`</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-116\">`-` for subtraction</span></span>\n- <span data-ttu-id=\"4eea4-117\">곱하기의 경우 `*`</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-117\">`*` for multiplication</span></span>\n- <span data-ttu-id=\"4eea4-118\">나누기의 경우 `/`</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-118\">`/` for division</span></span>\n\n> [!TIP]\n> <span data-ttu-id=\"4eea4-119\">이 빠른 시작 전체에서 대화형 창에서 작성 한 코드를 수정 하 여 직접 탐색할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-119\">Throughout this quick start, you can explore on your own by modifying the code you've written in the interactive window.</span></span> <span data-ttu-id=\"4eea4-120\">이 빠른 시작 각 단계에서 시도할 수 있는 예제를 제공 합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-120\">This quick start provides examples that you can try at each step.</span></span>\n\n<span data-ttu-id=\"4eea4-121\">다른 연산을 살펴보세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-121\">Start by exploring those different operations.</span></span> <span data-ttu-id=\"4eea4-122\">세 번째 줄을 수정하여 이러한 각 연산을 사용해 보세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-122\">Modify the third line to try each of these operations.</span></span> <span data-ttu-id=\"4eea4-123\">각각을 편집한 후 **실행** 단추를 클릭합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-123\">After each edit, click the **Run** button.</span></span>\n\n<span data-ttu-id=\"4eea4-124\">빼기:</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-124\">Subtraction:</span></span>\n\n```csharp\nint c = a - b;\n```\n\n<span data-ttu-id=\"4eea4-125\">곱하기:</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-125\">Multiplication:</span></span>\n\n```csharp\nint c = a * b;\n```\n\n<span data-ttu-id=\"4eea4-126\">나누기:</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-126\">Division:</span></span> \n\n```csharp\nint c = a / b;\n```\n\n<span data-ttu-id=\"4eea4-127\">원하는 경우 동일한 줄에서 여러 수학 연산을 수행하여 실험할 수도 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-127\">You can also experiment by performing multiple mathematics operations in the same line, if you'd like.</span></span>\n\n> [!TIP]\n> <span data-ttu-id=\"4eea4-128\">C# (또는 다른 프로그래밍 언어)를 살펴보면서 코드를 작성할 때 실수를 하게 될 것입니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-128\">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id=\"4eea4-129\">**컴파일러**는 그러한 오류를 찾아 사용자에게 보고합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-129\">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id=\"4eea4-130\">출력에 오류 메시지가 포함되어 있으면 예제 코드와 대화형 창의 코드를 자세히 살펴보고 수정 사항을 확인하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-130\">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>\n> <span data-ttu-id=\"4eea4-131\">이 연습은 C# 코드의 구조를 학습하는 데 도움이 됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-131\">That exercise will help you learn the structure of C# code.</span></span>     \n\n> [!NOTE]\n> <span data-ttu-id=\"4eea4-132\">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-132\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"4eea4-133\">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-133\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"4eea4-134\">연산 순서 알아보기</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-134\">Explore order of operations</span></span>"
  durationInMinutes: 7
  content: "<span data-ttu-id=\"4eea4-135\">C# 언어는 수학에서 배운 규칙과 일치하는 규칙으로 여러 가지 수학 연산의 우선 순위를 정의합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-135\">The C# language defines the precedence of different mathematics operations with rules consistent with the rules you learned in mathematics.</span></span>\n<span data-ttu-id=\"4eea4-136\">곱하기와 나누기는 더하기와 빼기보다 우선 순위가 높습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-136\">Multiplication and division take precedence over addition and subtraction.</span></span>\n<span data-ttu-id=\"4eea4-137\">대화형 창에서 다음 코드를 실행하여 살펴보세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-137\">Explore that by running the following code in the interactive window:</span></span>\n\n```csharp\nint a = 5;\nint b = 4;\nint c = 2;\nint d = a + b * c;\nConsole.WriteLine(d);\n```\n\n<span data-ttu-id=\"4eea4-138\">출력에서는 곱하기가 수행된 후 더하기가 수행되었음을 보여 줍니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-138\">The output demonstrates that the multiplication is performed before the addition.</span></span>\n\n<span data-ttu-id=\"4eea4-139\">먼저 수행하려는 연산 주위에 괄호를 추가하여 여러 연산의 순서를 적용할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-139\">You can force a different order of operation by adding parentheses around the operation or operations you want performed first:</span></span>\n\n```csharp\nint a = 5;\nint b = 4;\nint c = 2;\nint d = (a  + b) * c;\nConsole.WriteLine(d);\n```\n\n<span data-ttu-id=\"4eea4-140\">여러 다른 연산을 결합하여 자세히 살펴보세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-140\">Explore more by combining many different operations.</span></span> <span data-ttu-id=\"4eea4-141\">위에서 네 번째 줄을 다음과 같이 바꿉니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-141\">Replace the fourth line above with something like this:</span></span>\n\n```csharp\nint d = (a + b) - 6 * c + (12 * 4) / 3 + 12;\n```\n\n<span data-ttu-id=\"4eea4-142\">정수에 대해 흥미로운 동작을 이미 알고 있을 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-142\">You may have noticed an interesting behavior for integers.</span></span> <span data-ttu-id=\"4eea4-143\">정수 나누기를 항상 10 진수 또는 소수 부분을 포함 하도록 결과 기대 하는 경우에 정수 결과 생성 합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-143\">Integer division always produces an integer result, even when you'd expect the result to include a decimal or fractional portion.</span></span>\n\n<span data-ttu-id=\"4eea4-144\">이러한 동작을 본 적이 없다면 다음을 시도해 보세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-144\">If you haven't seen this behavior, try the following:</span></span>\n\n```csharp\nint a = 7;\nint b = 4;\nint c = 3;\nint d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\n<span data-ttu-id=\"4eea4-145\">**실행**을 클릭하여 결과를 다시 확인합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-145\">Click **Run** again to see the results.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"4eea4-146\">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-146\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"4eea4-147\">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-147\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"4eea4-148\">정수 전체 자릿수 및 한도 살펴보기</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-148\">Explore integer precision and limits</span></span>"
  durationInMinutes: 5
  content: "<span data-ttu-id=\"4eea4-149\">마지막 샘플에서는 정수 나누기가 결과를 자르는 것을 보여 줍니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-149\">That last sample showed you that integer division truncates the result.</span></span>\n<span data-ttu-id=\"4eea4-150\">**modulo** 연산자(`%` 문자)를 사용하여 **나머지**를 얻을 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-150\">You can get the **remainder** by using the **modulo** operator, the `%` character:</span></span>\n\n```csharp\nint a = 7;\nint b = 4;\nint c = 3;\nint d = (a  + b) / c;\nint e = (a + b) % c;\nConsole.WriteLine($\"quotient: {d}\");\nConsole.WriteLine($\"remainder: {e}\");\n```\n\n<span data-ttu-id=\"4eea4-151\">C# 정수 형식은 한 가지 다른 면에서 수학의 정수와 다릅니다. 즉 `int` 형식에는 최소 한도와 최대 한도가 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-151\">The C# integer type differs from mathematical integers in one other way: the `int` type has minimum and maximum limits.</span></span> <span data-ttu-id=\"4eea4-152\">대화형 창에서 이 코드를 실행하여 해당 한도를 확인하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-152\">Run this code in the interactive window to see those limits:</span></span>\n\n```csharp\nint max = int.MaxValue;\nint min = int.MinValue;\nConsole.WriteLine($\"The range of integers is {min} to {max}\");\n```\n\n<span data-ttu-id=\"4eea4-153\">계산이 해당 한도를 초과하는 값을 생성하는 경우 **언더플로** 또는 **오버플로** 조건이 발생합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-153\">If a calculation produces a value that exceeds those limits, you have an **underflow** or **overflow** condition.</span></span> <span data-ttu-id=\"4eea4-154\">답은 한 한도에서 다른 한도로 래핑하는 것으로 나타납니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-154\">The answer appears to wrap from one limit to the other.</span></span> <span data-ttu-id=\"4eea4-155\">대화형 창에 다음 두 줄을 추가하여 예제를 확인하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-155\">Add these two lines to the interactive window to see an example:</span></span>\n\n```csharp\nint what = max + 3;\nConsole.WriteLine($\"An example of overflow: {what}\");\n```\n\n<span data-ttu-id=\"4eea4-156\">답은 최소 (음의) 정수와 아주 가깝습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-156\">Notice that the answer is very close to the minimum (negative) integer.</span></span> <span data-ttu-id=\"4eea4-157\">`min + 2`와 같습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-157\">It's the same as `min + 2`.</span></span> <span data-ttu-id=\"4eea4-158\">더하기 연산은 정수에 대해 허용된 값을 **오버플로했습니다**.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-158\">The addition operation **overflowed** the allowed values for integers.</span></span>\n<span data-ttu-id=\"4eea4-159\">오버플로가 가능한 가장 큰 정수에서 가장 작은 정수로 “래핑”하기 때문에 답은 아주 큰 음수입니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-159\">The answer is a very large negative number because an overflow \"wraps around\" from the largest possible integer value to the smallest.</span></span>\n\n<span data-ttu-id=\"4eea4-160\">`int` 형식이 요구 사항을 충족하지 않을 때 사용하는 여러 한도와 전체 자릿수가 있는 다른 숫자 형식이 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-160\">There are other numeric types with different limits and precision that you would use when the `int` type doesn't meet your needs.</span></span> <span data-ttu-id=\"4eea4-161\">이에 대해 다음에 살펴보겠습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-161\">Let's explore those next.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"4eea4-162\">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-162\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"4eea4-163\">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-163\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"4eea4-164\">double 형식 작업</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-164\">Work with the double type</span></span>"
  durationInMinutes: 5
  content: "<span data-ttu-id=\"4eea4-165\">`double` 숫자 형식은 배정밀도 부동 소수점 수를 나타냅니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-165\">The `double` numeric type represents a double-precision floating point number.</span></span> <span data-ttu-id=\"4eea4-166\">이러한 용어는 생소할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-166\">Those terms may be new to you.</span></span> <span data-ttu-id=\"4eea4-167\">A **부동 소수점** 수는 매우 크거나 작은 크기에 정수가 아닌 숫자를 나타내는 데 유용 합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-167\">A **floating point** number is useful to represent non-integral numbers that may be very large or small in magnitude.</span></span> <span data-ttu-id=\"4eea4-168\">**배정밀도**란 이러한 숫자가 **단정밀도**보다 큰 전체 자릿수를 사용하여 저장됨을 의미합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-168\">**Double-precision** means that these numbers are stored using greater precision than **single-precision**.</span></span> <span data-ttu-id=\"4eea4-169\">최신 컴퓨터에서는 단정밀도 숫자보다 배정밀도를 더 많이 사용합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-169\">On modern computers, it is more common to use double precision than single precision numbers.</span></span>\n<span data-ttu-id=\"4eea4-170\">지금 살펴보세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-170\">Let's explore.</span></span> <span data-ttu-id=\"4eea4-171\">대화형 창에서 다음 코드를 실행하고 결과를 확인하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-171\">Try the following code in the interactive window and see the result:</span></span>\n\n```csharp\ndouble a = 5;\ndouble b = 4;\ndouble c = 2;\ndouble d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\n<span data-ttu-id=\"4eea4-172\">답에 몫의 소수 부분이 포함되어 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-172\">Notice that the answer includes the decimal portion of the quotient.</span></span> <span data-ttu-id=\"4eea4-173\">double을 사용하여 약간 더 복잡한 식을 사용해 보세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-173\">Try a slightly more complicated expression with doubles:</span></span>\n\n```csharp\ndouble a = 19;\ndouble b = 23;\ndouble c = 8;\ndouble d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\n<span data-ttu-id=\"4eea4-174\">double 값의 범위는 정수 값보다 훨씬 큽니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-174\">The range of a double value is much greater than integer values.</span></span> <span data-ttu-id=\"4eea4-175\">대화형 창에서 다음 코드를 실행합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-175\">Try the following code in the interactive window:</span></span>\n\n```csharp\ndouble max = double.MaxValue;\ndouble min = double.MinValue;\nConsole.WriteLine($\"The range of double is {min} to {max}\");\n```\n\n<span data-ttu-id=\"4eea4-176\">이러한 값은 과학적 표기법에 인쇄 됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-176\">These values are printed out in scientific notation.</span></span> <span data-ttu-id=\"4eea4-177\">왼쪽의 숫자는 `E` 는 significand 됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-177\">The number to the left of the `E` is the significand.</span></span> <span data-ttu-id=\"4eea4-178\">오른쪽의 숫자는 지수이며 10의 배수입니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-178\">The number to the right is the exponent, as a power of 10.</span></span> \n\n<span data-ttu-id=\"4eea4-179\">수학의 10진수 숫자와 마찬가지로, C#에서 double에는 반올림 오류가 발생할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-179\">Just like decimal numbers in math, doubles in C# can have rounding errors.</span></span> <span data-ttu-id=\"4eea4-180\">다음 코드를 사용해 보세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-180\">Try this code:</span></span>\n\n```csharp\ndouble third = 1.0 / 3.0;\nConsole.WriteLine(third);\n```\n\n<span data-ttu-id=\"4eea4-181\">`0.3` 반복은 `1/3`과 정확하게 동일하지는 않습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-181\">You know that `0.3` repeating is not exactly the same as `1/3`.</span></span>\n\n<span data-ttu-id=\"4eea4-182\">***과제***</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-182\">***Challenge***</span></span>\n\n<span data-ttu-id=\"4eea4-183\">`double` 형식을 사용하여 큰 숫자, 작은 숫자, 곱하기 및 나누기로 다른 계산을 수행해 보세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-183\">Try other calculations with large numbers, small numbers, multiplication and division using the `double` type.</span></span>  <span data-ttu-id=\"4eea4-184\">더 복잡한 계산을 수행해 보세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-184\">Try more complicated calculations.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"4eea4-185\">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-185\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"4eea4-186\">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-186\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"4eea4-187\">고정 소수점 형식 작업</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-187\">Work with fixed point types</span></span>"
  durationInMinutes: 8
  content: "<span data-ttu-id=\"4eea4-188\">C#의 기본적인 숫자 형식인 정수 형식과 double 형식을 살펴봤습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-188\">You've seen the basic numeric types in C#: integers and doubles.</span></span>  <span data-ttu-id=\"4eea4-189\">학습할 또 다른 형식이 있습니다. 바로 `decimal` 형식입니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-189\">There is one other type to learn: the `decimal` type.</span></span> <span data-ttu-id=\"4eea4-190\">`decimal` 형식 보다 더 정확 하지만 작은 범위에 `double`합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-190\">The `decimal` type has a smaller range but greater precision than `double`.</span></span> <span data-ttu-id=\"4eea4-191\">**고정 소수점**이라는 용어는 소수점(또는 이진 소수점)이 이동하지 않음을 의미합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-191\">The term **fixed point** means that the decimal point (or binary point) doesn't move.</span></span> <span data-ttu-id=\"4eea4-192\">이 형식에 대해 살펴보겠습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-192\">Let's take a look:</span></span>\n\n```csharp\ndecimal min = decimal.MinValue;\ndecimal max = decimal.MaxValue;\nConsole.WriteLine($\"The range of the decimal type is {min} to {max}\");\n```\n\n<span data-ttu-id=\"4eea4-193\">범위가 `double` 형식보다 작습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-193\">Notice that the range is smaller than the `double` type.</span></span> <span data-ttu-id=\"4eea4-194\">다음 코드를 사용하여 소수점이 있는 더 큰 전체 자릿수를 확인할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-194\">You can see the greater precision with the decimal type by trying the following code:</span></span>\n\n```csharp\ndouble a = 1.0;\ndouble b = 3.0;\nConsole.WriteLine(a / b);\n\ndecimal c = 1.0M;\ndecimal d = 3.0M;\nConsole.WriteLine(c / d);\n```\n\n<span data-ttu-id=\"4eea4-195\">숫자의 `M` 접미사는 상수가 `decimal` 형식을 사용해야 함을 나타내는 방법입니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-195\">The `M` suffix on the numbers is how you indicate that a constant should use the `decimal` type.</span></span>\n\n<span data-ttu-id=\"4eea4-196\">소수점 형식을 사용하는 수학에는 소수점 오른쪽에 더 많은 숫자가 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-196\">Notice that the math using the decimal type has more digits to the right of the decimal point.</span></span> \n\n<span data-ttu-id=\"4eea4-197\">***과제***</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-197\">***Challenge***</span></span>\n\n<span data-ttu-id=\"4eea4-198\">이제 여러 가지 숫자 형식을 살펴봤으므로 반지름이 2.50인치인 원의 면적을 계산하는 코드를 작성하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-198\">Now that you've seen the different numeric types, write code that calculates the area of a circle whose radius is 2.50 inches.</span></span> <span data-ttu-id=\"4eea4-199\">원의 면적은 반지름 제곱 곱하기 PI입니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-199\">Remember that the area of a circle is the radius squared multiplied by PI.</span></span> <span data-ttu-id=\"4eea4-200\">하나의 힌트: C# PI에 대 한 상수를 포함 합니다. <xref:System.Math.PI?displayProperty=nameWithType> 해당 값에 사용할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-200\">One hint: C# contains a constant for PI, <xref:System.Math.PI?displayProperty=nameWithType> that you can use for that value.</span></span> \n\n> [!NOTE]\n> <span data-ttu-id=\"4eea4-201\">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-201\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"4eea4-202\">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-202\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"4eea4-203\">과제 완료</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-203\">Complete challenge</span></span>"
  durationInMinutes: 1
  content: "<span data-ttu-id=\"4eea4-204\">\"숫자 C#에서\" 퀵 스타트를 완료 합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-204\">You've completed the \"Numbers in C#\" quick start.</span></span> \n\n<span data-ttu-id=\"4eea4-205\">사용자 고유의 개발 환경에서 이러한 빠른 시작을 계속할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-205\">You can continue these quick starts on your own development environment.</span></span> <span data-ttu-id=\"4eea4-206\">.NET 항목 [10 분 후에 시작](https://www.microsoft.com/net/core) 로컬 개발 환경 설정에 대 한 지침을 했습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-206\">The .NET topic [Get Started in 10 minutes](https://www.microsoft.com/net/core) has instructions for setting up your local development environment.</span></span> <span data-ttu-id=\"4eea4-207\">설치한 후 계속 [분기, 루프](branches-and-loops-local.md) 로컬 환경에서 합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-207\">Once you've done that, continue with [Branches and loops](branches-and-loops-local.md) in your local environment.</span></span>\n\n<span data-ttu-id=\"4eea4-208\">다음 항목에서는 C#의 숫자에 대해 더 자세히 알아볼 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-208\">You can learn more about numbers in C# in the following topics:</span></span>\n\n<span data-ttu-id=\"4eea4-209\">[정수 형식 표](../language-reference/keywords/integral-types-table.md) </span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-209\">[Integral Types Table](../language-reference/keywords/integral-types-table.md) </span></span>  \n<span data-ttu-id=\"4eea4-210\">[부동 소수점 형식 표](../language-reference/keywords/floating-point-types-table.md) </span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-210\">[Floating-Point Types Table](../language-reference/keywords/floating-point-types-table.md) </span></span>  \n<span data-ttu-id=\"4eea4-211\">[기본 제공 형식 표](../language-reference/keywords/built-in-types-table.md) </span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-211\">[Built-In Types Table](../language-reference/keywords/built-in-types-table.md) </span></span>  \n<span data-ttu-id=\"4eea4-212\">[암시적 숫자 변환 표](../language-reference/keywords/implicit-numeric-conversions-table.md) </span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-212\">[Implicit Numeric Conversions Table](../language-reference/keywords/implicit-numeric-conversions-table.md) </span></span>  \n[<span data-ttu-id=\"4eea4-213\">명시적 숫자 변환 표</span><span class=\"sxs-lookup\"><span data-stu-id=\"4eea4-213\">Explicit Numeric Conversions Table</span></span>](../language-reference/keywords/explicit-numeric-conversions-table.md)\0"
