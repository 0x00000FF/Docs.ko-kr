### YamlMime:Tutorial
title: "C#의 숫자"
metadata:
  title: "C#의 숫자 대화형 자습서 - C# 빠른 시작"
  description: "숫자 형식에 대한 이 빠른 시작에서는 브라우저를 사용하여 C#을 대화형으로 학습할 수 있습니다. C# 코드를 작성하고 브라우저에서 직접 코드를 컴파일하고 실행한 결과를 확인할 수 있습니다."
  audience: Developer
  ms.topic: get-started-article
  ms.custom: mvc
  level: Beginner
  nextTutorialHref: branches-and-loops
  nextTutorialTitle: "C#의 분기 및 루프"
  displayType: two-column
  interactive: csharp
  ms.prod: .net
  ms.technology: devlang-csharp
  ms.openlocfilehash: c714763870b0755ad42f919325bca69fccc0736a
  ms.sourcegitcommit: 3a96c706e4dbb4667bf3bf37edac9e1666646f93
  ms.translationtype: HT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 02/27/2018
items:
- durationInMinutes: 1
  content: "이 빠른 시작에서는 브라우저를 사용하여 C#을 작성하고 코드를 컴파일하고 실행한 결과를 확인하여, C#의 숫자 형식을 대화형으로 설명합니다. 이 자습서에는 C#의 숫자 및 수학 연산을 살펴보는 일련의 단원이 포함되어 있습니다. 이러한 단원에서는 C# 언어의 기본 사항을 설명합니다.\n"
- title: "정수 계산 살펴보기"
  durationInMinutes: 4
  content: "대화형 창에서 다음 코드를 실행합니다. 그렇게 하려면 대화형 창에 다음 코드 블록을 입력하고 **실행** 단추를 클릭합니다.\n\n```csharp\nint a = 18;\nint b = 6;\nint c = a + b;\nConsole.WriteLine(c);\n```\n\n정수를 사용하는 기본 수학 연산 중 하나를 방금 살펴봤습니다. `int` 형식은 **정수**(양의 정수 또는 음의 정수)를 나타냅니다. 더하기의 경우 `+` 기호를 사용합니다. 정수에 대해 다른 일반적인 수학 연산은 다음과 같습니다.\n\n- 빼기의 경우 `-`\n- 곱하기의 경우 `*`\n- 나누기의 경우 `/`\n\n> [!TIP]\n> 이 빠른 시작에서는 대화형 창에서 작성한 코드를 수정하여 자신만의 코드를 만들 수 있습니다. 이 빠른 시작에서는 각 단계에서 시도할 수 있는 예제를 제공합니다.\n\n다른 연산을 살펴보세요. 세 번째 줄을 수정하여 이러한 각 연산을 사용해 보세요. 각각을 편집한 후 **실행** 단추를 클릭합니다.\n\n빼기:\n\n```csharp\nint c = a - b;\n```\n\n곱하기:\n\n```csharp\nint c = a * b;\n```\n\n나누기: \n\n```csharp\nint c = a / b;\n```\n\n원하는 경우 동일한 줄에서 여러 수학 연산을 수행하여 실험할 수도 있습니다.\n\n> [!TIP]\n> C# (또는 다른 프로그래밍 언어)를 살펴보면서 코드를 작성할 때 실수를 하게 될 것입니다. **컴파일러**는 그러한 오류를 찾아 사용자에게 보고합니다. 출력에 오류 메시지가 포함되어 있으면 예제 코드와 대화형 창의 코드를 자세히 살펴보고 수정 사항을 확인하세요.\n> 이 연습은 C# 코드의 구조를 학습하는 데 도움이 됩니다.     \n\n> [!NOTE]\n> 이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다. 문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.\n"
- title: "연산 순서 알아보기"
  durationInMinutes: 7
  content: "C# 언어는 수학에서 배운 규칙과 일치하는 규칙으로 여러 가지 수학 연산의 우선 순위를 정의합니다.\n곱하기와 나누기는 더하기와 빼기보다 우선 순위가 높습니다.\n대화형 창에서 다음 코드를 실행하여 살펴보세요.\n\n```csharp\nint a = 5;\nint b = 4;\nint c = 2;\nint d = a + b * c;\nConsole.WriteLine(d);\n```\n\n출력에서는 곱하기가 수행된 후 더하기가 수행되었음을 보여 줍니다.\n\n먼저 수행하려는 연산 주위에 괄호를 추가하여 여러 연산의 순서를 적용할 수 있습니다.\n\n```csharp\nint a = 5;\nint b = 4;\nint c = 2;\nint d = (a  + b) * c;\nConsole.WriteLine(d);\n```\n\n여러 다른 연산을 결합하여 자세히 살펴보세요. 위에서 네 번째 줄을 다음과 같이 바꿉니다.\n\n```csharp\nint d = (a + b) - 6 * c + (12 * 4) / 3 + 12;\n```\n\n정수에 대해 흥미로운 동작을 이미 알고 있을 수 있습니다. 정수 나누기는 결과에 소수 또는 소수 부분이 포함될 것으로 예상되는 경우에도 항상 정수 결과를 생성합니다.\n\n이러한 동작을 본 적이 없다면 다음을 시도해 보세요.\n\n```csharp\nint a = 7;\nint b = 4;\nint c = 3;\nint d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\n**실행**을 클릭하여 결과를 다시 확인합니다.\n\n> [!NOTE]\n> 이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다. 문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.\n"
- title: "정수 전체 자릿수 및 한도 살펴보기"
  durationInMinutes: 5
  content: "마지막 샘플에서는 정수 나누기가 결과를 자르는 것을 보여 줍니다.\n**modulo** 연산자(`%` 문자)를 사용하여 **나머지**를 얻을 수 있습니다.\n\n```csharp\nint a = 7;\nint b = 4;\nint c = 3;\nint d = (a  + b) / c;\nint e = (a + b) % c;\nConsole.WriteLine($\"quotient: {d}\");\nConsole.WriteLine($\"remainder: {e}\");\n```\n\nC# 정수 형식은 한 가지 다른 면에서 수학의 정수와 다릅니다. 즉 `int` 형식에는 최소 한도와 최대 한도가 있습니다. 대화형 창에서 이 코드를 실행하여 해당 한도를 확인하세요.\n\n```csharp\nint max = int.MaxValue;\nint min = int.MinValue;\nConsole.WriteLine($\"The range of integers is {min} to {max}\");\n```\n\n계산이 해당 한도를 초과하는 값을 생성하는 경우 **언더플로** 또는 **오버플로** 조건이 발생합니다. 답은 한 한도에서 다른 한도로 래핑하는 것으로 나타납니다. 대화형 창에 다음 두 줄을 추가하여 예제를 확인하세요.\n\n```csharp\nint what = max + 3;\nConsole.WriteLine($\"An example of overflow: {what}\");\n```\n\n답은 최소 (음의) 정수와 아주 가깝습니다. `min + 2`와 같습니다. 더하기 연산은 정수에 대해 허용된 값을 **오버플로했습니다**.\n오버플로가 가능한 가장 큰 정수에서 가장 작은 정수로 “래핑”하기 때문에 답은 아주 큰 음수입니다.\n\n`int` 형식이 요구 사항을 충족하지 않을 때 사용하는 여러 한도와 전체 자릿수가 있는 다른 숫자 형식이 있습니다. 이에 대해 다음에 살펴보겠습니다.\n\n> [!NOTE]\n> 이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다. 문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.\n"
- title: "double 형식 작업"
  durationInMinutes: 5
  content: "`double` 숫자 형식은 배정밀도 부동 소수점 수를 나타냅니다. 이러한 용어는 생소할 수 있습니다. **부동 소수점** 수는 아주 크거나 작은 정수가 아닌 수를 나타낼 때 유용합니다. **배정밀도**란 이러한 숫자가 **단정밀도**보다 큰 전체 자릿수를 사용하여 저장됨을 의미합니다. 최신 컴퓨터에서는 단정밀도 숫자보다 배정밀도를 더 많이 사용합니다.\n지금 살펴보세요. 대화형 창에서 다음 코드를 실행하고 결과를 확인하세요.\n\n```csharp\ndouble a = 5;\ndouble b = 4;\ndouble c = 2;\ndouble d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\n답에 몫의 소수 부분이 포함되어 있습니다. double을 사용하여 약간 더 복잡한 식을 사용해 보세요.\n\n```csharp\ndouble a = 19;\ndouble b = 23;\ndouble c = 8;\ndouble d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\ndouble 값의 범위는 정수 값보다 훨씬 큽니다. 대화형 창에서 다음 코드를 실행합니다.\n\n```csharp\ndouble max = double.MaxValue;\ndouble min = double.MinValue;\nConsole.WriteLine($\"The range of double is {min} to {max}\");\n```\n\n이러한 값은 과학적 표기법으로 인쇄됩니다. `E`의 왼쪽에 있는 숫자는 유효 숫자입니다. 오른쪽의 숫자는 지수이며 10의 배수입니다. \n\n수학의 10진수 숫자와 마찬가지로, C#에서 double에는 반올림 오류가 발생할 수 있습니다. 다음 코드를 사용해 보세요.\n\n```csharp\ndouble third = 1.0 / 3.0;\nConsole.WriteLine(third);\n```\n\n`0.3` 반복은 `1/3`과 정확하게 동일하지는 않습니다.\n\n***과제***\n\n`double` 형식을 사용하여 큰 숫자, 작은 숫자, 곱하기 및 나누기로 다른 계산을 수행해 보세요.  더 복잡한 계산을 수행해 보세요.\n\n> [!NOTE]\n> 이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다. 문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.\n"
- title: "고정 소수점 형식 작업"
  durationInMinutes: 8
  content: "C#의 기본적인 숫자 형식인 정수 형식과 double 형식을 살펴봤습니다.  학습할 또 다른 형식이 있습니다. 바로 `decimal` 형식입니다. `decimal` 형식은 범위가 작지만 `double`보다 전체 자릿수가 큽니다. **고정 소수점**이라는 용어는 소수점(또는 이진 소수점)이 이동하지 않음을 의미합니다. 이 형식에 대해 살펴보겠습니다.\n\n```csharp\ndecimal min = decimal.MinValue;\ndecimal max = decimal.MaxValue;\nConsole.WriteLine($\"The range of the decimal type is {min} to {max}\");\n```\n\n범위가 `double` 형식보다 작습니다. 다음 코드를 사용하여 소수점이 있는 더 큰 전체 자릿수를 확인할 수 있습니다.\n\n```csharp\ndouble a = 1.0;\ndouble b = 3.0;\nConsole.WriteLine(a / b);\n\ndecimal c = 1.0M;\ndecimal d = 3.0M;\nConsole.WriteLine(c / d);\n```\n\n숫자의 `M` 접미사는 상수가 `decimal` 형식을 사용해야 함을 나타내는 방법입니다.\n\n소수점 형식을 사용하는 수학에는 소수점 오른쪽에 더 많은 숫자가 있습니다. \n\n***과제***\n\n이제 여러 가지 숫자 형식을 살펴봤으므로 반지름이 2.50센티미터인 원의 면적을 계산하는 코드를 작성하세요. 원의 면적은 반지름 제곱 곱하기 PI입니다. 힌트: .NET에는 PI의 상수가 포함되어 있습니다. 즉 해당 값에 사용할 수 있는 <xref:System.Math.PI?displayProperty=nameWithType>입니다. \n\n> [!NOTE]\n> 이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다. 문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.\n\n19에서 20 사이의 답을 받아야 합니다.\n"
- title: "과제 완료"
  durationInMinutes: 1
  content: "다음과 같은 답을 제시했나요?\n\n```csharp\ndouble radius = 2.50;\ndouble area = Math.PI * radius * radius;\nConsole.WriteLine(area);\n```\n\n원하는 경우 다른 수식을 사용해 보세요.\n\n> [!NOTE]\n> 이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다. 문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.\n"
- content: "“C#의 숫자” 빠른 시작을 완료했습니다. \n\n사용자의 개발 환경에서 이러한 빠른 시작을 계속 진행할 수 있습니다. [로컬 개발](local-environment.md)의 기본 내용을 알아본 후 빠른 시작을 선택하세요. 동일한 연습을 시도해 보고, 다음 빠른 시작으로 직접 이동하거나, [C#의 숫자](numbers-in-csharp-local.md) 빠른 시작을 다시 시작할 수 있습니다.\n\n다음 항목에서는 C#의 숫자에 대해 더 자세히 알아볼 수 있습니다.\n\n[정수 형식 표](../language-reference/keywords/integral-types-table.md)   \n[부동 소수점 형식 표](../language-reference/keywords/floating-point-types-table.md)   \n[기본 제공 형식 표](../language-reference/keywords/built-in-types-table.md)   \n[암시적 숫자 변환 표](../language-reference/keywords/implicit-numeric-conversions-table.md)   \n[명시적 숫자 변환 표](../language-reference/keywords/explicit-numeric-conversions-table.md)\0"
