### YamlMime:YamlDocument
documentType: Tutorial
title: "<span data-ttu-id=\"9f2f7-101\">C#의 컬렉션</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-101\">Collections in C#</span></span>"
metadata:
  title: "C#의 컬렉션 C#에서 시퀀스 및 컬렉션을 사용하는 방법에 대해 알아봅니다."
  description: "이 자습서에서는 브라우저를 사용하여 C#을 대화형으로 학습할 수 있습니다. C# 코드를 작성하고 브라우저에서 직접 코드를 컴파일하고 실행한 결과를 확인할 수 있습니다."
  audience: Developer
  ms.custom: mvc
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: e00cf6badcbd39cc1e9320095169d86efb9cad8f
  ms.sourcegitcommit: 43c656811dd38a66a6672084c65d10c0cbbf2015
  ms.translationtype: HT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 11/22/2017
items:
- durationInMinutes: 1
  content: "<span data-ttu-id=\"9f2f7-106\">이 빠른 시작에 설명 C# 대화형으로 브라우저를 사용 하 여를 컴파일 및 코드 실행의 결과 확인 하 고 C# 코드를 작성 합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-106\">This quick start teaches you C# interactively, using your browser to write C# code and see the results of compiling and running your code.</span></span> <span data-ttu-id=\"9f2f7-107\">컬렉션과 배열을 작성, 수정 및 탐색하는 일련의 단원이 포함되어 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-107\">It contains a series of lessons that create, modify and explore collections and arrays.</span></span>\n"
- title: "<span data-ttu-id=\"9f2f7-108\">목록 만들기</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-108\">Create lists</span></span>"
  durationInMinutes: 2
  content: "<span data-ttu-id=\"9f2f7-109\">대화형 창에서 다음 코드를 실행합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-109\">Run the following code in the interactive window.</span></span> <span data-ttu-id=\"9f2f7-110\">그렇게 하려면 대화형 창에 다음 코드 블록을 입력하고(“<name>”을 사용자의 이름으로 바꿈) **실행** 단추를 클릭합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-110\">To do that, type the following code block in the interactive window (replace \"<name>\" with your name) and click the **Run** button:</span></span>\n\n```csharp\nvar names = new List<string> { \"<name>\", \"Ana\", \"Felipe\" };\nforeach (var name in names)\n{\n  Console.WriteLine($\"Hello {name.ToUpper()}!\");\n}\n```\n\n<span data-ttu-id=\"9f2f7-111\">문자열 목록을 만들고, 해당 목록에 3개의 이름을 추가하고, 이름을 모두 대문자로 출력했습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-111\">You've just created a list of strings, added three names to that list, and printed out the names in all CAPS.</span></span> <span data-ttu-id=\"9f2f7-112\">이전 빠른 시작에서 학습한 개념을 사용하여 목록을 반복합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-112\">You're using concepts that you've learned in earlier quick starts to loop through the list.</span></span>\n\n<span data-ttu-id=\"9f2f7-113\">이름을 표시하는 코드는 **보간된 문자열**을 사용합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-113\">The code to display names makes use of **interpolated strings**.</span></span>  <span data-ttu-id=\"9f2f7-114\">`string` 앞에 `$` 문자를 넣으면 문자열 선언에 C# 코드를 포함할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-114\">When you precede a `string` with the `$` character, you can embed C# code in the string declaration.</span></span> <span data-ttu-id=\"9f2f7-115\">실제 문자열은 C# 코드를 생성하는 값으로 바꿉니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-115\">The actual string replaces that C# code with the value it generates.</span></span> <span data-ttu-id=\"9f2f7-116\">이 예제에서는 <xref:System.String.ToUpper%2A> 메서드를 호출했기 때문에 `{name.ToUpper()}`를 대문자로 변환된 각 이름으로 바꿉니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-116\">In this example, it replaces the `{name.ToUpper()}` with each name, converted to capital letters, because you called the <xref:System.String.ToUpper%2A> method.</span></span>\n\n<span data-ttu-id=\"9f2f7-117\">계속해서 살펴보겠습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-117\">Let's keep exploring.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"9f2f7-118\">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-118\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"9f2f7-119\">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-119\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"9f2f7-120\">목록 콘텐츠 수정</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-120\">Modify list contents</span></span>"
  durationInMinutes: 3
  content: "<span data-ttu-id=\"9f2f7-121\">생성한 컬렉션은 <xref:System.Collections.Generic.List%601> 형식을 사용합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-121\">The collection you created uses the <xref:System.Collections.Generic.List%601> type.</span></span> <span data-ttu-id=\"9f2f7-122\">이 형식은 요소의 시퀀스를 저장합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-122\">This type stores sequences of elements.</span></span> <span data-ttu-id=\"9f2f7-123\">꺾쇠 괄호 사이의 요소 형식을 지정합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-123\">You specify the type of the elements between the angle brackets.</span></span>\n\n<span data-ttu-id=\"9f2f7-124\">이 <xref:System.Collections.Generic.List%601> 형식은 늘리거나 줄일 수 있어 요소를 추가하거나 제거할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-124\">One important aspect of this <xref:System.Collections.Generic.List%601> type is that it can grow or shrink, enabling you to add or remove elements.</span></span> <span data-ttu-id=\"9f2f7-125\">이미 작성한 코드 아래에 다음 코드를 추가합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-125\">Add the following code below the code you've already written:</span></span>\n\n```csharp\nConsole.WriteLine();\nnames.Add(\"Maria\");\nnames.Add(\"Bill\");\nnames.Remove(\"Ana\");\nforeach (var name in names)\n{\n  Console.WriteLine($\"Hello {name.ToUpper()}!\");\n}\n```\n\n<span data-ttu-id=\"9f2f7-126\">목록 끝에 이름을 두 개 더 추가했습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-126\">You've added two more names to the end of the list.</span></span> <span data-ttu-id=\"9f2f7-127\">또한 이름을 하나 제거했습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-127\">You've also removed one as well.</span></span>\n\n<span data-ttu-id=\"9f2f7-128\"><xref:System.Collections.Generic.List%601>를 사용하면 **인덱스**별로 각 항목을 참조할 수도 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-128\">The <xref:System.Collections.Generic.List%601> enables you to reference individual items by **index** as well.</span></span> <span data-ttu-id=\"9f2f7-129\">`[` 및 `]` 토큰을 사용하여 항목에 액세스합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-129\">You access items using the `[` and `]` tokens.</span></span> <span data-ttu-id=\"9f2f7-130\">이미 작성한 코드 아래에 다음 코드를 추가하고 다음을 시도합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-130\">Add the following code below what you've already written and try it:</span></span>\n\n```csharp\nConsole.WriteLine($\"My name is {names[0]}.\");\nConsole.WriteLine($\"I've added {names[2]} and {names[3]} to the list.\");\n```\n\n<span data-ttu-id=\"9f2f7-131\">목록 끝을 지나서 액세스할 수 없습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-131\">You're not allowed to access past the end of the list.</span></span> <span data-ttu-id=\"9f2f7-132\"><xref:System.Collections.Generic.List%601.Count%2A> 속성을 사용하여 목록의 길이를 확인할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-132\">You can check how long the list is using the <xref:System.Collections.Generic.List%601.Count%2A> property.</span></span> <span data-ttu-id=\"9f2f7-133\">다음 코드를 추가하여 시도해 보세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-133\">Add the following code to try it:</span></span>\n\n```csharp\nConsole.WriteLine($\"The list has {names.Count} people in it\");\n```\n\n<span data-ttu-id=\"9f2f7-134\">**실행**을 클릭하여 결과를 다시 확인합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-134\">Click **Run** again to see the results.</span></span> <span data-ttu-id=\"9f2f7-135\">C#에서 인덱스는 0부터 시작하므로, 가장 큰 유효 인덱스는 목록의 항목 수보다 하나 작습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-135\">In C#, indices start at 0, so the largest valid index is one less than the number of items in the list.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"9f2f7-136\">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-136\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"9f2f7-137\">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-137\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"9f2f7-138\">목록 검색 및 정렬</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-138\">Search and sort lists</span></span>"
  durationInMinutes: 5
  content: "<span data-ttu-id=\"9f2f7-139\">샘플에서는 상대적으로 작은 목록을 사용하지만 응용 프로그램에서는 수천에 달하는 많은 요소가 포함된 목록을 작성할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-139\">Our samples use relatively small lists, but your applications may often create lists with many more elements, sometimes numbering in the thousands.</span></span> <span data-ttu-id=\"9f2f7-140\">이러한 큰 컬렉션에서 요소를 찾으려면 여러 항목의 목록을 검색해야 합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-140\">To find elements in these larger collections, you need to search the list for different items.</span></span> <span data-ttu-id=\"9f2f7-141\"><xref:System.Collections.Generic.List%601.IndexOf%2A> 메서드는 항목을 검색하고 항목의 인덱스를 반환합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-141\">The <xref:System.Collections.Generic.List%601.IndexOf%2A> method searches for an item and returns the index of the item.</span></span> <span data-ttu-id=\"9f2f7-142\">다음을 시도하여 작동 방식을 확인하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-142\">Try this to see how it works.</span></span>  <span data-ttu-id=\"9f2f7-143\">지금까지 작성한 코드 아래에 다음 코드를 추가합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-143\">Add the following code below what you've written so far:</span></span>\n\n```csharp\nvar index = names.IndexOf(\"Felipe\");\nif (index != -1)\n  Console.WriteLine($\"The name {names[index]} is at index {index}\");\n\nvar notFound = names.IndexOf(\"Not Found\");\n  Console.WriteLine($\"When an item is not found, IndexOf returns {notFound}\");\n```\n\n<span data-ttu-id=\"9f2f7-144\">항목이 목록에 있는지 알 수 없으므로 <xref:System.Collections.Generic.List%601.IndexOf%2A>에서 반환된 인덱스를 항상 확인해야 합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-144\">You may not know if an item is in the list, so you should always check the index returned by <xref:System.Collections.Generic.List%601.IndexOf%2A>.</span></span> <span data-ttu-id=\"9f2f7-145\">-1인 경우 항목을 찾을 수 없습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-145\">If it is -1, the item was not found.</span></span>\n\n<span data-ttu-id=\"9f2f7-146\">목록의 항목도 정렬할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-146\">The items in your list can be sorted as well.</span></span> <span data-ttu-id=\"9f2f7-147\"><xref:System.Collections.Generic.List%601.Sort%2A> 메서드는 일반적인 순서(문자열의 경우 사전순)로 목록의 모든 항목을 정렬합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-147\">The <xref:System.Collections.Generic.List%601.Sort%2A> method sorts all the items in the list in their normal order (alphabetically in the case of strings).</span></span> <span data-ttu-id=\"9f2f7-148\">이 코드를 추가하고 다시 실행하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-148\">Add this code and run again:</span></span>\n\n```csharp\nnames.Sort();\nforeach (var name in names)\n{\n  Console.WriteLine($\"Hello {name.ToUpper()}!\");\n}\n```\n\n> [!NOTE]\n> <span data-ttu-id=\"9f2f7-149\">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-149\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"9f2f7-150\">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-150\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"9f2f7-151\">다른 형식 목록</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-151\">Lists of other types</span></span>"
  durationInMinutes: 5
  content: "<span data-ttu-id=\"9f2f7-152\">지금까지 목록에 `string` 형식을 사용했습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-152\">You've been using the `string` type in lists so far.</span></span> <span data-ttu-id=\"9f2f7-153\">다른 형식을 사용하여 <xref:System.Collections.Generic.List%601>를 만들어 보겠습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-153\">Let's make a <xref:System.Collections.Generic.List%601> using a different type.</span></span> <span data-ttu-id=\"9f2f7-154\">숫자 집합을 빌드하겠습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-154\">Let's build a set of numbers.</span></span> <span data-ttu-id=\"9f2f7-155\">지금까지 작성한 코드를 삭제하고 다음으로 바꿉니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-155\">Delete the code you wrote so far, and replace it with this:</span></span>\n\n```csharp\nvar fibonacciNumbers = new List<int> {1, 1};\n```\n\n<span data-ttu-id=\"9f2f7-156\">정수 목록을 만들고 처음 두 정수를 값 1로 설정합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-156\">That creates a list of integers, and sets the first two integers to the value 1.</span></span> <span data-ttu-id=\"9f2f7-157\">숫자 시퀀스인 *피보나치 시퀀스*의 첫 번째 두 값입니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-157\">These are the first two values of a *Fibonacci Sequence*, a sequence of numbers.</span></span> <span data-ttu-id=\"9f2f7-158\">다음 각 피보나치 수는 이전의 두 수의 합계를 사용하여 찾습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-158\">Each next Fibonacci number is found by taking the sum of the previous two numbers.</span></span> <span data-ttu-id=\"9f2f7-159\">이 코드를 추가합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-159\">Add this code:</span></span>\n\n```csharp\nvar previous = fibonacciNumbers[fibonacciNumbers.Count - 1];\nvar previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];\n\nfibonacciNumbers.Add(previous + previous2);\n\nforeach(var item in fibonacciNumbers)\n    Console.WriteLine(item);\n```\n\n<span data-ttu-id=\"9f2f7-160\">**실행**을 눌러 결과를 확인합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-160\">Press **Run** to see the results;</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"9f2f7-161\">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-161\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"9f2f7-162\">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-162\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"9f2f7-163\">과제</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-163\">Challenge</span></span>"
  durationInMinutes: 10
  content: "<span data-ttu-id=\"9f2f7-164\">이 단원과 이전 단원에서 학습한 내용을 함께 적용할 수 있는지 확인하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-164\">See if you can put together some of the lessons from this and earlier lessons.</span></span> <span data-ttu-id=\"9f2f7-165\">피보나치 수를 사용하여 지금까지 빌드한 내용을 확장합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-165\">Expand on what you've built so far with Fibonacci Numbers.</span></span> <span data-ttu-id=\"9f2f7-166\">코드를 작성하여 시퀀스에서 처음 20개 수를 생성합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-166\">Try and write the code to generate the first 20 numbers in the sequence.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"9f2f7-167\">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-167\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"9f2f7-168\">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-168\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"9f2f7-169\">과제 완료</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-169\">Complete challenge</span></span>"
  durationInMinutes: 3
  content: "<span data-ttu-id=\"9f2f7-170\">다음과 같은 답을 제시했나요?</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-170\">Did you come up with something like this?</span></span>\n\n```csharp\nvar fibonacciNumbers = new List<int> {1, 1};\n\nwhile (fibonacciNumbers.Count < 20)\n{\n    var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];\n    var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];\n    \n    fibonacciNumbers.Add(previous + previous2);\n}\nforeach(var item in fibonacciNumbers)\n    Console.WriteLine(item);\n```\n\n<span data-ttu-id=\"9f2f7-171\">루프의 각 반복을 통해 목록의 마지막 두 정수를 사용하고, 더하고, 해당 값을 목록에 추가합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-171\">With each iteration of the loop, you're taking the last two integers in the list, summing them, and adding that value to the list.</span></span> <span data-ttu-id=\"9f2f7-172\">목록에 20개의 항목이 추가될 때까지 루프가 반복됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-172\">The loop repeats until you've added 20 items to the list.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"9f2f7-173\">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-173\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"9f2f7-174\">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-174\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- content: "<span data-ttu-id=\"9f2f7-175\">목록 퀵 스타트를 완료 합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-175\">You've completed the list quick start.</span></span> <span data-ttu-id=\"9f2f7-176\">이 빠른 시작은 최종 대화형 빠른 시작 합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-176\">This quick start is the final interactive quick start.</span></span> <span data-ttu-id=\"9f2f7-177\">사용자 고유의 개발 환경에서 이러한 빠른 시작을 계속할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-177\">You can continue these quickstarts on your own development environment.</span></span> <span data-ttu-id=\"9f2f7-178\">.NET 항목 [10 분 후에 시작](https://www.microsoft.com/net/core) 로컬 개발 환경 설정에 대 한 지침을 했습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-178\">The .NET topic [Get Started in 10 minutes](https://www.microsoft.com/net/core) has instructions for setting up your local development environment.</span></span> <span data-ttu-id=\"9f2f7-179\">설치한 후 계속 [클래스 소개](introduction-to-classes.md) 로컬 환경에서 합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-179\">Once you've done that, continue with [Introduction to classes](introduction-to-classes.md) in your local environment.</span></span>\n\n<span data-ttu-id=\"9f2f7-180\">[.NET 가이드](../../standard/index.md)의 [컬렉션](../../standard/collections/index.md) 항목에서 `List` 형식에 대해 더 자세히 학습할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-180\">You can learn more about working with the `List` type in the [.NET Guide](../../standard/index.md) topic on [collections](../../standard/collections/index.md).</span></span> <span data-ttu-id=\"9f2f7-181\">다른 많은 컬렉션 형식에 대해서도 학습합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9f2f7-181\">You'll also learn about many other collection types.</span></span>\0"
