### YamlMime:Tutorial
title: <span data-ttu-id="26373-101">Hello C#</span><span class="sxs-lookup"><span data-stu-id="26373-101">Hello C#</span></span>
metadata:
  title: Hello World 대화형 자습서 - C# 빠른 시작
  description: 이 빠른 시작에서는 브라우저를 사용하여 C#을 대화형으로 학습할 수 있습니다. C# 코드를 작성하고 브라우저에서 직접 코드를 컴파일하고 실행한 결과를 확인할 수 있습니다.
  audience: Developer
  level: Beginner
  ms.topic: quickstart
  nextTutorialHref: numbers-in-csharp.yml
  nextTutorialTitle: <span data-ttu-id="26373-105">C#의 숫자</span><span class="sxs-lookup"><span data-stu-id="26373-105">Numbers in C#</span></span>
  displayType: two-column
  interactive: csharp
  ms.custom: mvc
  ms.openlocfilehash: 395ed81b5845047063d84469d91e3d03f17f12ae
  ms.sourcegitcommit: 54231aa56fca059e9297888a96fbca1d4cf3746c
  ms.translationtype: HT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 05/25/2018
  ms.locfileid: "34549674"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="26373-106">이 빠른 시작에서는 브라우저를 사용하여 C#을 작성하고, 코드를 컴파일 및 실행한 결과를 확인하는 방법을 대화형으로 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="26373-106">This quickstart teaches you C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="26373-107">여기에는 “Hello World” 프로그램으로 시작하는 일련의 단원이 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="26373-107">It contains a series of lessons that begin with a "Hello World" program.</span></span> <span data-ttu-id="26373-108">이러한 단원에서는 C# 언어의 기본 사항을 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="26373-108">These lessons teach you the fundamentals of the C# language.</span></span>
- title: <span data-ttu-id="26373-109">첫 번째 C# 프로그램 실행</span><span class="sxs-lookup"><span data-stu-id="26373-109">Run your first C# program</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"26373-110\">대화형 창에서 다음 코드를 실행합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-110\">Run the following code in the interactive window.</span></span> <span data-ttu-id=\"26373-111\">그렇게 하려면 대화형 창에 다음 코드 블록을 입력하고 **실행** 단추를 클릭합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-111\">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>\n\n```csharp\nConsole.WriteLine(\"Hello World!\");\n```\n\n<span data-ttu-id=\"26373-112\">지금까지</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-112\">Congratulations!</span></span> <span data-ttu-id=\"26373-113\">첫 번째 C# 프로그램을 실행했습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-113\">You've run your first C# program.</span></span> <span data-ttu-id=\"26373-114\">“Hello World!” 메시지를 출력하는 간단한 프로그램입니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-114\">It's a simple program that prints the message \"Hello World!\".</span></span> <span data-ttu-id=\"26373-115\"><xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 메서드를 사용하여 해당 메시지를 출력했습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-115\">It used the <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> method to print that message.</span></span> <span data-ttu-id=\"26373-116\">`Console`은 콘솔 창을 나타내는 형식입니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-116\">`Console` is a type that represents the console window.</span></span> <span data-ttu-id=\"26373-117\">`WriteLine`은 텍스트를 해당 텍스트 콘솔에 출력하는 `Console` 형식의 메서드입니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-117\">`WriteLine` is a method of the `Console` type that prints a line of text to that text console.</span></span>\n\n<span data-ttu-id=\"26373-118\">계속하여 자세히 살펴보겠습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-118\">Let's move on and explore more.</span></span> <span data-ttu-id=\"26373-119\">이 단원의 나머지 부분에서는 C#에서 텍스트를 나타내는 `string` 형식 작업을 살펴봅니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-119\">The rest of this lesson explores working with the `string` type, which represents text in C#.</span></span> <span data-ttu-id=\"26373-120\">`Console` 형식과 마찬가지로 `string` 형식에는 메서드가 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-120\">Like the `Console` type, the `string` type has methods.</span></span> <span data-ttu-id=\"26373-121\">`string` 메서드는 텍스트 작업을 수행합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-121\">The `string` methods work with text.</span></span> \n\n> [!NOTE]\n> <span data-ttu-id=\"26373-122\">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-122\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"26373-123\">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-123\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="26373-124">변수 선언 및 사용</span><span class="sxs-lookup"><span data-stu-id="26373-124">Declare and use variables</span></span>
  durationInMinutes: 3
  content: "<span data-ttu-id=\"26373-125\">첫 번째 프로그램에서 `string` “Hello World!”를</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-125\">Your first program printed the `string` \"Hello World!\"</span></span> <span data-ttu-id=\"26373-126\">화면에 출력했습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-126\">on the screen.</span></span> \n\n> [!TIP]\n> <span data-ttu-id=\"26373-127\">C# (또는 다른 프로그래밍 언어)를 살펴보면서 코드를 작성할 때 실수를 하게 될 것입니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-127\">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id=\"26373-128\">**컴파일러**는 그러한 오류를 찾아 사용자에게 보고합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-128\">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id=\"26373-129\">출력에 오류 메시지가 포함되어 있으면 예제 코드와 대화형 창의 코드를 자세히 살펴보고 수정 사항을 확인하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-129\">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>\n> <span data-ttu-id=\"26373-130\">이 연습은 C# 코드의 구조를 학습하는 데 도움이 됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-130\">That exercise will help you learn the structure of C# code.</span></span> \n\n<span data-ttu-id=\"26373-131\">첫 번째 프로그램은 메시지를 하나만 출력할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-131\">Your first program is limited to printing one message.</span></span> <span data-ttu-id=\"26373-132\">**변수**를 사용하여 유용한 프로그램을 더 많이 작성할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-132\">You can write more useful programs by using **variables**.</span></span> <span data-ttu-id=\"26373-133\">**변수**는 여러 값을 사용하여 동일한 코드를 실행하는 데 사용할 수 있는 기호입니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-133\">A **variable** is a symbol you can use to run the same code with different values.</span></span> <span data-ttu-id=\"26373-134\">사용해 보겠습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-134\">Let's try it!</span></span> <span data-ttu-id=\"26373-135\">대화형 창에서 작성한 코드를 다음 코드로 바꿉니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-135\">Replace the code you've written in the interactive window with the following code:</span></span>\n\n```csharp\nstring aFriend = \"Bill\";\nConsole.WriteLine(aFriend);\n```\n\n<span data-ttu-id=\"26373-136\">첫 번째 줄은 `aFriend` 변수를 선언하고 “Bill” 값을 할당합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-136\">The first line declares a variable, `aFriend` and assigns it a value, \"Bill\".</span></span> <span data-ttu-id=\"26373-137\">두 번째 줄은 이름을 출력합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-137\">The second line prints out the name.</span></span>\n\n<span data-ttu-id=\"26373-138\">선언한 변수에 여러 값을 할당할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-138\">You can assign different values to any variable you declare.</span></span> <span data-ttu-id=\"26373-139\">이름을 친구 이름으로 변경할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-139\">You can change the name to one of your friends.</span></span> <span data-ttu-id=\"26373-140\">대화형 창에서 이미 추가한 코드 뒤에 이 두 줄을 추가합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-140\">Add these two lines in the interactive window following the code you've already added:</span></span>\n\n```csharp\naFriend = \"Maira\";\nConsole.WriteLine(aFriend);\n```\n\n<span data-ttu-id=\"26373-141\">동일한 코드 줄은 `aFriend` 변수에 저장된 값에 따라 두 가지 다른 메시지를 출력합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-141\">Notice that the same line of code prints two different messages, based on the value stored in the `aFriend` variable.</span></span>\n\n<span data-ttu-id=\"26373-142\">또한 마지막 두 메시지에서 “Hello” 단어가 누락되었음을 알 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-142\">You may have also noticed that the word \"Hello\" was missing in the last two messages.</span></span> <span data-ttu-id=\"26373-143\">지금 수정해 보겠습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-143\">Let's fix that now.</span></span>  <span data-ttu-id=\"26373-144\">메시지를 다음으로 출력하는 줄을 수정합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-144\">Modify the lines that print the message to the following:</span></span>\n\n```csharp\nConsole.WriteLine(\"Hello \" + aFriend);\n```\n\n<span data-ttu-id=\"26373-145\">**실행**을 클릭하여 결과를 다시 확인합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-145\">Click **Run** again to see the results.</span></span>\n\n<span data-ttu-id=\"26373-146\">진행하면서 `+`를 사용하여 인쇄할 문자열을 만들면 번거롭습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-146\">As we progress, creating strings to print using `+` becomes cumbersome.</span></span> <span data-ttu-id=\"26373-147\">[문자열 보간](../language-reference/tokens/interpolated.md)을 사용하면 더 간결하고 읽기 쉬운 방식으로 문자열을 종합할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-147\">[String interpolation](../language-reference/tokens/interpolated.md) lets you piece together strings in a more concise and readable way.</span></span>\n\n<span data-ttu-id=\"26373-148\">문자열의 여는 따옴표 앞에 `$`를 추가하면 중괄호로 된 문자열 안에 `aFriend` 변수와 같은 식을 포함할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-148\">If you add a `$` before the opening quote of the string, you can then include expressions, like the `aFriend` variable, inside the string in curly brackets.</span></span>\n\n\n```csharp\nConsole.WriteLine($\"Hello {aFriend}\");\n```\n\n<span data-ttu-id=\"26373-149\">**실행**을 클릭하여 결과를 다시 확인합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-149\">Click **Run** again to see the results.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"26373-150\">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-150\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"26373-151\">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-151\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="26373-152">문자열 작업</span><span class="sxs-lookup"><span data-stu-id="26373-152">Work with strings</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="26373-153">문자열을 사용하여 수행할 수 있는 작업을 살펴보았습니다.</span><span class="sxs-lookup"><span data-stu-id="26373-153">Your last edit was our first look at what you can do with strings.</span></span> <span data-ttu-id="26373-154">더 자세히 살펴보겠습니다.</span><span class="sxs-lookup"><span data-stu-id="26373-154">Let's explore more.</span></span>


    <span data-ttu-id="26373-155">`+`는 C#에서 연산자라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="26373-155">The `+` is called an operator in C#.</span></span> <span data-ttu-id="26373-156">`firstString + secondString` 같은 문자열에 적용되는 경우 새 문자열은 첫 번째 문자열의 텍스트 다음에 두 번째 문자열의 텍스트로 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="26373-156">When applied to strings like `firstString + secondString`, a new string is created with the text from the first followed by the text from the second.</span></span> <span data-ttu-id="26373-157">이를 *문자열 연결*이라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="26373-157">This is referred to as *string concatenation*.</span></span> <span data-ttu-id="26373-158">문자열 변수를 포함하여 어떤 수의 문자열도 결합할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="26373-158">You can combine any number of strings, including string variables.</span></span>  <span data-ttu-id="26373-159">다음과 같이 해보세요.</span><span class="sxs-lookup"><span data-stu-id="26373-159">Try this:</span></span>


    ```csharp

    string firstFriend = "Maria";

    string secondFriend = "Sage";

    Console.WriteLine($"My friends are {firstFriend} and {secondFriend}");

    ```


    <span data-ttu-id="26373-160">문자열을 더 자세히 살펴볼 때 `Length`를 사용하여 문자열 길이를 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="26373-160">As you explore more with strings, you can find the length of a string using `Length`.</span></span> <span data-ttu-id="26373-161">`Length`는 문자열의 **속성**이고 해당 문자열의 문자 수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="26373-161">`Length` is a **property** of a string and it returns the number of characters in that string.</span></span> <span data-ttu-id="26373-162">대화형 창의 맨 아래에 다음 코드를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="26373-162">Add the following code at the bottom of the interactive window:</span></span>


    ```csharp

    Console.WriteLine($"The name {firstFriend} has {firstFriend.Length} letters.");

    Console.WriteLine($"The name {secondFriend} has {secondFriend.Length} letters.");

    ```


    > [!TIP]

    > <span data-ttu-id="26373-163">이제 스스로 학습해 보세요.</span><span class="sxs-lookup"><span data-stu-id="26373-163">This is a good time to explore on your own.</span></span> <span data-ttu-id="26373-164">`Console.WriteLine()`으로 화면에 텍스트를 작성하는 방법을 학습했습니다.</span><span class="sxs-lookup"><span data-stu-id="26373-164">You've learned that `Console.WriteLine()` writes text to the screen.</span></span> <span data-ttu-id="26373-165">변수를 선언하고 문자열을 함께 연결하는 방법을 학습했습니다.</span><span class="sxs-lookup"><span data-stu-id="26373-165">You've learned how to declare variables and concatenate strings together.</span></span> <span data-ttu-id="26373-166">대화형 창에서 연습하세요.</span><span class="sxs-lookup"><span data-stu-id="26373-166">Experiment in the interactive window.</span></span> <span data-ttu-id="26373-167">더 많은 메시지를 직접 작성하세요.</span><span class="sxs-lookup"><span data-stu-id="26373-167">Write some more messages yourself.</span></span> <span data-ttu-id="26373-168">`+` 연산자를 사용하여 문자열을 빌드합니다.</span><span class="sxs-lookup"><span data-stu-id="26373-168">Build strings using the `+` operator.</span></span>


    > [!NOTE]

    > <span data-ttu-id="26373-169">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class="sxs-lookup"><span data-stu-id="26373-169">This online coding experience is in preview mode.</span></span> <span data-ttu-id="26373-170">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class="sxs-lookup"><span data-stu-id="26373-170">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="26373-171">더 많은 문자열 작업</span><span class="sxs-lookup"><span data-stu-id="26373-171">Do more with strings</span></span>
  durationInMinutes: 5
  content: "<span data-ttu-id=\"26373-172\">**메서드** <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>을 사용하여 메시지를 출력했습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-172\">You've been using a **method**, <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>, to print messages.</span></span> <span data-ttu-id=\"26373-173\">**메서드**는 몇몇 작업을 구현하는 코드 블록입니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-173\">A **method** is a block of code that implements some action.</span></span> <span data-ttu-id=\"26373-174\">메서드에는 액세스할 수 있도록 이름이 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-174\">It has a name, so you can access it.</span></span> \n\n<span data-ttu-id=\"26373-175\">`string` 형식에는 유용한 메서드가 많이 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-175\">The `string` type has many useful methods.</span></span> <span data-ttu-id=\"26373-176\"><xref:System.String.Trim%2A> 메서드, 관련 메서드 <xref:System.String.TrimStart%2A> 및 <xref:System.String.TrimEnd%2A>를 살펴보겠습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-176\">Let's explore the <xref:System.String.Trim%2A> method, and related methods <xref:System.String.TrimStart%2A> and <xref:System.String.TrimEnd%2A>.</span></span> <span data-ttu-id=\"26373-177\">이러한 메서드는 선행 및 후행 공백을 제거합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-177\">These methods remove leading and trailing spaces:</span></span>\n\n```csharp\nstring greeting = \"      Hello World!       \";\nConsole.WriteLine($\"[{greeting}]\");\n\nstring trimmedGreeting = greeting.TrimStart();\nConsole.WriteLine($\"[{trimmedGreeting}]\");\n\ntrimmedGreeting = greeting.TrimEnd();\nConsole.WriteLine($\"[{trimmedGreeting}]\");\n\ntrimmedGreeting = greeting.Trim();\nConsole.WriteLine($\"[{trimmedGreeting}]\");\n```\n\n<span data-ttu-id=\"26373-178\">이 샘플에서는 문자열 작업에 대한 몇 가지 중요한 개념을 자세히 설명합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-178\">This sample reinforces a couple of important concepts for working with strings.</span></span> <span data-ttu-id=\"26373-179\">문자열을 조작하는 메서드는 수정하기보다는 새 문자열 개체를 반환합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-179\">The methods that manipulate strings return new string objects rather than making modifications in place.</span></span> <span data-ttu-id=\"26373-180\">`Trim` 메서드에 대한 각 호출은 새 문자열을 반환하지만 원래 메시지는 변경하지 않습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-180\">You can see that each call to any of the `Trim` methods returns a new string, but does not change the original message.</span></span>\n\n<span data-ttu-id=\"26373-181\">문자열 작업에 사용할 수 있는 다른 메서드가 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-181\">There are other methods available to work with a string.</span></span> <span data-ttu-id=\"26373-182\">예를 들어 편집기 또는 워드 프로세서에서 검색 및 바꾸기 명령을 사용했을 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-182\">For example, you've probably used a search and replace command in an editor or word processor.</span></span> <span data-ttu-id=\"26373-183\"><xref:System.String.Replace%2A> 메서드는 `string`에서와 유사하게 작동합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-183\">The <xref:System.String.Replace%2A> method does something similar in a `string`.</span></span> <span data-ttu-id=\"26373-184\">하위 문자열을 검색하여 다른 텍스트로 바꿉니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-184\">It searches for a substring, and replaces it with different text.</span></span> <span data-ttu-id=\"26373-185\"><xref:System.String.Replace%2A> 메서드는 두 **매개 변수**를 사용합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-185\">The <xref:System.String.Replace%2A> method takes two **parameters**.</span></span> <span data-ttu-id=\"26373-186\">괄호 사이의 문자열입니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-186\">These are the strings between the parentheses.</span></span> <span data-ttu-id=\"26373-187\">첫 번째 문자열은 검색할 텍스트입니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-187\">The first string is the text to search for.</span></span> <span data-ttu-id=\"26373-188\">두 번째 문자열은 바꿀 텍스트입니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-188\">The second string is the text to replace it with.</span></span> <span data-ttu-id=\"26373-189\">직접 해보세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-189\">Try it for yourself.</span></span> <span data-ttu-id=\"26373-190\">이 코드를 추가합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-190\">Add this code:</span></span>\n\n```csharp\nstring sayHello = \"Hello World!\";\nConsole.WriteLine(sayHello);\nsayHello = sayHello.Replace(\"Hello\", \"Greetings\");\nConsole.WriteLine(sayHello);\n```\n\n<span data-ttu-id=\"26373-191\">두 가지 다른 유용한 메서드는 문자열을 모두 대문자로 지정하거나 모두 소문자로 지정합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-191\">Two other useful methods make a string ALL CAPS or all lower case.</span></span> <span data-ttu-id=\"26373-192\">다음 코드를 사용해 봅니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-192\">Try the following code:</span></span>\n\n```csharp\nConsole.WriteLine(sayHello.ToUpper());\nConsole.WriteLine(sayHello.ToLower());\n```\n\n> [!NOTE]\n> <span data-ttu-id=\"26373-193\">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-193\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"26373-194\">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-194\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="26373-195">검색 문자열</span><span class="sxs-lookup"><span data-stu-id="26373-195">Search strings</span></span>
  durationInMinutes: 10
  content: "<span data-ttu-id=\"26373-196\">*검색 및 바꾸기* 작업의 다른 부분은 문자열에서 텍스트를 찾는 것입니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-196\">The other part of a *search and replace* operation is to find text in a string.</span></span> <span data-ttu-id=\"26373-197\">검색에 <xref:System.String.Contains%2A> 메서드를 사용할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-197\">You can use the  <xref:System.String.Contains%2A> method for searching.</span></span> <span data-ttu-id=\"26373-198\">문자열에 하위 문자열이 포함되어 있는지 여부를 알려 줍니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-198\">It tells you if a string contains a substring inside it.</span></span> <span data-ttu-id=\"26373-199\">다음 코드를 사용하여 <xref:System.String.Contains%2A>를 살펴봅니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-199\">Try the following code to explore <xref:System.String.Contains%2A>:</span></span>\n\n```csharp\nstring songLyrics = \"You say goodbye, and I say hello\";\nConsole.WriteLine(songLyrics.Contains(\"goodbye\"));\nConsole.WriteLine(songLyrics.Contains(\"greetings\"));\n```\n\n<span data-ttu-id=\"26373-200\"><xref:System.String.Contains%2A> 메서드는 검색한 문자열을 찾았는지 여부를 알려주는 **부울** 값을 반환합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-200\">The <xref:System.String.Contains%2A> method returns a **boolean** value which tells you if the string you were searching for was found.</span></span> <span data-ttu-id=\"26373-201\">**부울**은 `true` 또는 `false` 값을 저장합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-201\">A **boolean** stores either a `true` or a `false` value.</span></span> <span data-ttu-id=\"26373-202\">이후 단원에서 **부울** 값에 대해 자세히 학습합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-202\">You'll learn more about **boolean** values in a later lesson.</span></span>\n\n<span data-ttu-id=\"26373-203\">***과제***</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-203\">***Challenge***</span></span>\n\n<span data-ttu-id=\"26373-204\">문자열 내 하위 문자열을 검색하는 두 개의 유사한 메서드 <xref:System.String.StartsWith%2A> 및 <xref:System.String.EndsWith%2A>가 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-204\">There are two similar methods, <xref:System.String.StartsWith%2A> and <xref:System.String.EndsWith%2A> that also search for sub-strings in a string.</span></span> <span data-ttu-id=\"26373-205\">이러한 메서드는 문자열의 시작 또는 끝 부분에 있는 하위 문자열을 찾습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-205\">These find a substring at the beginning or the end of the string.</span></span> <span data-ttu-id=\"26373-206\">이전 샘플을 수정하여 <xref:System.String.Contains%2A> 대신 <xref:System.String.StartsWith%2A> 및 <xref:System.String.EndsWith%2A>를 사용해 보세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-206\">Try to modify the previous sample to use <xref:System.String.StartsWith%2A> and <xref:System.String.EndsWith%2A> instead of <xref:System.String.Contains%2A>.</span></span> <span data-ttu-id=\"26373-207\">문자열의 시작 부분에서 “You” 또는 “goodbye”를 검색합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-207\">Search for \"You\" or \"goodbye\" at the beginning of a string.</span></span> <span data-ttu-id=\"26373-208\">문자열 끝 부분에서 “hello” 또는 “goodbye”를 검색합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-208\">Search for \"hello\" or \"goodbye\" at the end of a string.</span></span>\n\n> [!Note]\n> <span data-ttu-id=\"26373-209\">문자열 끝에 있는 텍스트를 테스트할 때에는 구두점을 확인합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-209\">Watch your punctuation when you test for the text at the end of the string.</span></span> <span data-ttu-id=\"26373-210\">문자열이 마침표로 끝나는 경우 마침표로 끝나는 문자열을 확인해야 합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-210\">If the string ends with a period, you must check for a string that ends with a period.</span></span>\n\n<span data-ttu-id=\"26373-211\">“You”로 시작하고 “hello”로 끝나는 `true`를, “goodbye”로 시작 또는 끝나는 경우 false를 받아야 합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-211\">You should get `true` for starting with \"You\" and ending with \"hello\" and false for starting with or ending with \"goodbye\".</span></span> \n\n> [!NOTE]\n> <span data-ttu-id=\"26373-212\">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-212\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"26373-213\">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"26373-213\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="26373-214">과제 완료</span><span class="sxs-lookup"><span data-stu-id="26373-214">Complete challenge</span></span>
  durationInMinutes: 3
  content: >
    <span data-ttu-id="26373-215">다음과 같은 답을 제시했나요?</span><span class="sxs-lookup"><span data-stu-id="26373-215">Did you come up with something like this?</span></span>


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.StartsWith("You"));

    Console.WriteLine(songLyrics.StartsWith("goodbye"));


    Console.WriteLine(songLyrics.EndsWith("hello"));

    Console.WriteLine(songLyrics.EndsWith("goodbye"));

    ```


    > [!NOTE]

    > <span data-ttu-id="26373-216">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class="sxs-lookup"><span data-stu-id="26373-216">This online coding experience is in preview mode.</span></span> <span data-ttu-id="26373-217">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class="sxs-lookup"><span data-stu-id="26373-217">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- content: >-
    <span data-ttu-id="26373-218">“Hello C#” 빠른 시작을 완료했습니다.</span><span class="sxs-lookup"><span data-stu-id="26373-218">You've completed the "Hello C#" quickstart.</span></span>


    <span data-ttu-id="26373-219">[C# 프로그래밍 가이드](../programming-guide/index.md)의 [문자열](../programming-guide/strings/index.md) 항목에서 `string` 형식 작업에 대해 더 자세히 학습할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="26373-219">You can learn more about working with the `string` type in the [C# Programming Guide](../programming-guide/index.md) topic on [strings](../programming-guide/strings/index.md).</span></span>

    <span data-ttu-id="26373-220">[문자열 작업에 대한 방법 팁](../how-to/index.md#working-with-strings).</span><span class="sxs-lookup"><span data-stu-id="26373-220">[How to tips on working with strings](../how-to/index.md#working-with-strings).</span></span>
