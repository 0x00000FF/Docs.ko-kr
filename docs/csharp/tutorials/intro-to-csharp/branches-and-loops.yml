### YamlMime:Tutorial
title: <span data-ttu-id="1c97c-101">분기 및 루프 문이 포함된 조건부 논리 알아보기</span><span class="sxs-lookup"><span data-stu-id="1c97c-101">Learn conditional logic with branch and loop statements</span></span>
metadata:
  title: 분기 및 루프 - C# 소개 대화형 자습서
  description: 분기 및 루프에 대한 이 자습서에서는 브라우저를 사용하여 C#을 대화형으로 학습할 수 있습니다. 브라우저에서 바로 C# 코드를 작성하고, 코드를 컴파일하고 실행한 결과를 확인할 수 있습니다.
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.date: 08/24/2018
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: <span data-ttu-id="1c97c-105">목록 컬렉션</span><span class="sxs-lookup"><span data-stu-id="1c97c-105">The list collection</span></span>
  ms.openlocfilehash: 0456582fb0aefa9e144b71517b9d8ed619929805
  ms.sourcegitcommit: 205b9a204742e9c77256d43ac9d94c3f82909808
  ms.translationtype: HT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 09/10/2019
  ms.locfileid: "70850785"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="1c97c-106">이 자습서에서는 변수를 검사하고 해당 변수에 따라 실행 경로를 변경하는 코드를 작성하는 방법에 대해 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-106">This tutorial teaches you how to write code that examines variables and changes execution path based on those variables.</span></span> <span data-ttu-id="1c97c-107">브라우저를 사용하여 C#을 대화형으로 작성하고, 코드를 컴파일하고 실행한 결과를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-107">You'll use your browser to write C# interactively and see the results of compiling and running your code.</span></span> <span data-ttu-id="1c97c-108">이 자습서에는 C#에서 분기 및 루프 구문을 살펴보는 일련의 단원이 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-108">This tutorial contains a series of lessons that explore branching and looping constructs in C#.</span></span> <span data-ttu-id="1c97c-109">이러한 단원에서는 C# 언어의 기본 사항을 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-109">These lessons teach you the fundamentals of the C# language.</span></span>
- title: <span data-ttu-id="1c97c-110">if 문을 사용하여 결정하기</span><span class="sxs-lookup"><span data-stu-id="1c97c-110">Make decisions using the if statement</span></span>
  durationInMinutes: 4
  content: >
    <span data-ttu-id="1c97c-111">대화형 창에서 다음 코드를 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-111">Run the following code in the interactive window.</span></span> <span data-ttu-id="1c97c-112">그렇게 하려면 대화형 창에 다음 코드 블록을 입력하고 **실행** 단추를 클릭합니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-112">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>


    ```csharp

    int a = 5;

    int b = 6;

    if (a + b > 10)
        Console.WriteLine("The answer is greater than 10.");
    ```


    <span data-ttu-id="1c97c-113">합계가 10보다 작도록 `b`의 선언을 수정합니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-113">Modify the declaration of `b` so that the sum is less than 10:</span></span>


    ```csharp

    int b = 3;

    ```


    <span data-ttu-id="1c97c-114">**실행** 단추를 다시 클릭합니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-114">Click the **Run** button again.</span></span> <span data-ttu-id="1c97c-115">답이 10보다 작기 때문에 아무것도 출력되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-115">Because the answer is less than 10, nothing is printed.</span></span> <span data-ttu-id="1c97c-116">테스트하는 **조건**은 false입니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-116">The **condition** you're testing is false.</span></span> <span data-ttu-id="1c97c-117">`if` 문에 대해 가능한 분기 중 하나(true 분기)만 작성했기 때문에 실행할 코드가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-117">You don't have any code to execute because you've only written one of the possible branches for an `if` statement: the true branch.</span></span>


    > [!TIP]

    > <span data-ttu-id="1c97c-118">C# (또는 다른 프로그래밍 언어)를 살펴보면서 코드를 작성할 때 실수를 하게 될 것입니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-118">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="1c97c-119">**컴파일러**는 그러한 오류를 찾아 사용자에게 보고합니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-119">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="1c97c-120">출력에 오류 메시지가 포함되어 있으면 예제 코드와 대화형 창의 코드를 자세히 살펴보고 수정 사항을 확인하세요.</span><span class="sxs-lookup"><span data-stu-id="1c97c-120">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>

    > <span data-ttu-id="1c97c-121">이 연습은 C# 코드의 구조를 학습하는 데 도움이 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-121">That exercise will help you learn the structure of C# code.</span></span>


    <span data-ttu-id="1c97c-122">이 첫 번째 샘플에서는 `if`의 기능과 부울 형식을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-122">This first sample shows the power of `if` and boolean types.</span></span> <span data-ttu-id="1c97c-123">*부울*은 `true` 또는 `false`의 두 값 중 하나를 가질 수 있는 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-123">A *boolean* is a variable that can have one of two values: `true` or `false`.</span></span> <span data-ttu-id="1c97c-124">C#은 부울 변수에 대한 특수 형식 `bool`을 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-124">C# defines a special type, `bool` for boolean variables.</span></span> <span data-ttu-id="1c97c-125">`if` 문은 `bool`의 값을 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-125">The `if` statement checks the value of a `bool`.</span></span> <span data-ttu-id="1c97c-126">값이 `true`인 경우 `if` 뒤의 문이 실행됩니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-126">When the value is `true`, the statement following the `if` executes.</span></span> <span data-ttu-id="1c97c-127">그러하지 않으면 건너뜁니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-127">Otherwise, it is skipped.</span></span>


    <span data-ttu-id="1c97c-128">조건을 확인하고 해당 조건에 따라 문을 실행하는 이 프로세스는 아주 강력합니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-128">This process of checking conditions and executing statements based on those conditions is very powerful.</span></span> <span data-ttu-id="1c97c-129">더 자세히 살펴보겠습니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-129">Let's explore more.</span></span>


    > [!NOTE]

    > <span data-ttu-id="1c97c-130">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-130">This online coding experience is in preview mode.</span></span> <span data-ttu-id="1c97c-131">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class="sxs-lookup"><span data-stu-id="1c97c-131">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="1c97c-132">if와 else를 함께 사용하기</span><span class="sxs-lookup"><span data-stu-id="1c97c-132">Make if and else work together</span></span>
  durationInMinutes: 10
  content: "\n<span data-ttu-id=\"1c97c-133\">true 분기와 false 분기의 여러 코드를 실행하려면 조건이 false일 때 실행되는 `else` 분기를 생성합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1c97c-133\">To execute different code in both the true and false branches, you create an `else` branch that executes when the condition is false.</span></span> <span data-ttu-id=\"1c97c-134\">다음과 같이 해보세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1c97c-134\">Try this:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\n<span data-ttu-id=\"1c97c-135\">`else` 키워드 뒤의 문은 테스트하는 조건이 `false`인 경우에만 실행됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1c97c-135\">The statement following the `else` keyword executes only when the condition being tested is `false`.</span></span> <span data-ttu-id=\"1c97c-136\">`if` 및 `else`를 부울 조건과 결합하면 필요한 모든 기능을 제공합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1c97c-136\">Combining `if` and `else` with boolean conditions provides all the power you need.</span></span>\n\n> [!IMPORTANT]\n> <span data-ttu-id=\"1c97c-137\">`if` 및 `else` 문 아래의 들여쓰기는 사용자가 보기 편하도록 하기 위함입니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1c97c-137\">The indentation under the `if` and `else` statements is for human readers.</span></span>\n> <span data-ttu-id=\"1c97c-138\">C# 언어는 들여쓰기 또는 공백을 중요하게 취급하지 않습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1c97c-138\">The C# language doesn't treat indentation or white space as significant.</span></span>\n> <span data-ttu-id=\"1c97c-139\">`if` 또는 `else` 키워드 뒤의 문은 조건에 따라 실행됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1c97c-139\">The statement following the `if` or `else` keyword will be executed based on the condition.</span></span> <span data-ttu-id=\"1c97c-140\">이 자습서의 모든 샘플에서는 문의 제어 흐름을 기준으로 줄을 들여쓰는 일반적인 방법을 따릅니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1c97c-140\">All the samples in this tutorial follow a common practice to indent lines based on the control flow of statements.</span></span>\n\n<span data-ttu-id=\"1c97c-141\">들여쓰기는 중요하지 않기 때문에 `{` 및 `}`를 사용하여 두 개 이상의 문이 조건부로 실행되는 블록의 일부가 되는 시기를 나타내야 합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1c97c-141\">Because indentation is not significant, you need to use `{` and `}` to indicate when you want more than one statement to be part of the block that executes conditionally.</span></span> <span data-ttu-id=\"1c97c-142\">C# 프로그래머는 일반적으로 모든 `if` 및 `else` 절에서 중괄호를 사용합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1c97c-142\">C# programmers typically use those braces on all `if` and `else` clauses.</span></span> <span data-ttu-id=\"1c97c-143\">다음 예제는 방금 작성한 코드와 동일합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1c97c-143\">The following example is the same as what you just created.</span></span> <span data-ttu-id=\"1c97c-144\">연습해 보세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1c97c-144\">Try it.</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> <span data-ttu-id=\"1c97c-145\">이 자습서의 나머지 부분에서 코드 샘플에는 일반적인 방법에 따라 모두 중괄호가 포함되어 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1c97c-145\">Through the rest of this tutorial, the code samples all include the braces, following accepted practices.</span></span>\n\n<span data-ttu-id=\"1c97c-146\">다음과 같이 더 복잡한 조건을 테스트할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1c97c-146\">You can test more complicated conditions:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not equal to the second\");\n}\n```\n\n<span data-ttu-id=\"1c97c-147\">`==` 기호는 같음을 테스트합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1c97c-147\">The `==` symbol tests for *equality*.</span></span> <span data-ttu-id=\"1c97c-148\">`==`을 사용하면 같음 테스트가 `a = 5`에서 확인한 할당과 구분됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1c97c-148\">Using `==` distinguishes the test for equality from assignment, which you saw in `a = 5`.</span></span>\n\n<span data-ttu-id=\"1c97c-149\">`&&`는 “and”를 나타냅니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1c97c-149\">The `&&` represents \"and\".</span></span> <span data-ttu-id=\"1c97c-150\">true 분기에서 문을 실행하려면 두 조건이 모두 true여야 합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1c97c-150\">It means both conditions must be true to execute the statement in the true branch.</span></span>  <span data-ttu-id=\"1c97c-151\">이러한 예제에서는 `{` 및 `}`로 문을 묶으면 각 조건부 분기에 여러 문을 가질 수 있음도 보여 줍니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1c97c-151\">These examples also show that you can have multiple statements in each conditional branch, provided you enclose them in `{` and `}`.</span></span>\n\n<span data-ttu-id=\"1c97c-152\">`||`을 사용하여 “or”을 나타낼 수도 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1c97c-152\">You can also use  `||` to represent \"or\":</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not equal to the second\");\n}\n```\n\n<span data-ttu-id=\"1c97c-153\">`a`, `b` 및 `c`의 값을 수정하고 `&&` 및 `||` 간에 전환하여 살펴봅니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1c97c-153\">Modify the values of `a`, `b`, and `c` and switch between `&&` and `||` to explore.</span></span> <span data-ttu-id=\"1c97c-154\">`&&` 및 `||` 연산자가 어떻게 작동하는지 더 잘 이해할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1c97c-154\">You'll gain more understanding of how the `&&` and `||` operators work.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"1c97c-155\">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1c97c-155\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"1c97c-156\">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1c97c-156\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="1c97c-157">루프를 사용하여 작업 반복</span><span class="sxs-lookup"><span data-stu-id="1c97c-157">Use loops to repeat operations</span></span>
  durationInMinutes: 6
  content: >
    <span data-ttu-id="1c97c-158">대규모 프로그램을 만드는 또 다른 중요한 개념은 **루프**입니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-158">Another important concept to create larger programs is **loops**.</span></span> <span data-ttu-id="1c97c-159">루프를 사용하여 두 번 이상 실행하려는 문을 반복합니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-159">You'll use loops to repeat statements that you want executed more than once.</span></span> <span data-ttu-id="1c97c-160">대화형 창에서 다음 코드를 사용해 보세요.</span><span class="sxs-lookup"><span data-stu-id="1c97c-160">Try this code in the interactive window:</span></span>


    ```csharp

    int counter = 0;

    while (counter < 10)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    }

    ```


    <span data-ttu-id="1c97c-161">`while` 문은 조건을 확인하고 `while` 뒤의 문을 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-161">The `while` statement checks a condition and executes the statement following the `while`.</span></span> <span data-ttu-id="1c97c-162">조건이 false가 될 때까지 조건 확인 및 문 실행을 반복합니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-162">It will repeat checking the condition and executing those statements until the condition is false.</span></span>


    <span data-ttu-id="1c97c-163">이 예제에서는 다른 새 연산자가 하나 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-163">There's one other new operator in this example.</span></span> <span data-ttu-id="1c97c-164">`counter` 변수 뒤의 `++`는 **증가** 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-164">The `++` after the `counter` variable is the **increment** operator.</span></span> <span data-ttu-id="1c97c-165">카운터 값에 1을 더하고 카운터 변수에 해당 값을 저장합니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-165">It adds 1 to the value of counter, and stores that value in the counter variable.</span></span>


    > [!IMPORTANT]

    > <span data-ttu-id="1c97c-166">코드를 실행할 때 `while` 루프 조건이 false로 전환되는지 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-166">Make sure that the `while` loop condition does switch to false as you execute the code.</span></span> <span data-ttu-id="1c97c-167">그러하지 않으면 프로그램이 종료되지 않는 **무한 루프**를 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-167">Otherwise, you create an **infinite loop** where your program never ends.</span></span> <span data-ttu-id="1c97c-168">코드를 실행하는 엔진이 제한 시간을 초과하고 프로그램에서 아무것도 출력하지 않을 것이기 때문에 시연하지 않겠습니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-168">Let's not demonstrate that, because the engine that runs your code will time out and you'll see no output from your program.</span></span>


    <span data-ttu-id="1c97c-169">`while` 루프는 `while` 뒤에 코드를 실행하기 전에 조건을 테스트합니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-169">The `while` loop tests the condition before executing the code following the `while`.</span></span> <span data-ttu-id="1c97c-170">`do` ... `while` 루프는 코드를 먼저 실행한 후 조건을 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-170">The `do` ... `while` loop executes the code first, and then checks the condition.</span></span> <span data-ttu-id="1c97c-171">예를 들면 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-171">It looks like this:</span></span>


    ```csharp

    int counter = 0;

    do

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    } while (counter < 10);

    ```


    <span data-ttu-id="1c97c-172">이 `do` 루프와 이전 `while` 루프는 동일하게 작동합니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-172">This `do` loop and the earlier `while` loop work the same.</span></span>


    <span data-ttu-id="1c97c-173">마지막 루프 문으로 넘어가겠습니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-173">Let's move on to one last loop statement.</span></span>


    > [!NOTE]

    > <span data-ttu-id="1c97c-174">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-174">This online coding experience is in preview mode.</span></span> <span data-ttu-id="1c97c-175">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class="sxs-lookup"><span data-stu-id="1c97c-175">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="1c97c-176">for 루프 작업</span><span class="sxs-lookup"><span data-stu-id="1c97c-176">Work with the for loop</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="1c97c-177">C# 코드에서 볼 수 있는 또 다른 일반적인 루프 문은 `for` 루프입니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-177">Another common loop statement that you'll see in C# code is the `for` loop.</span></span> <span data-ttu-id="1c97c-178">대화형 창에서 다음 코드를 사용해 보세요.</span><span class="sxs-lookup"><span data-stu-id="1c97c-178">Try this code in the interactive window:</span></span>


    ```csharp

    for(int counter = 0; counter < 10; counter++)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
    }

    ```


    <span data-ttu-id="1c97c-179">`while` 루프 및 이미 사용한 `do` 루프와 동일한 작업을 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-179">This does the same work as the `while` loop and the `do` loop you've already used.</span></span> <span data-ttu-id="1c97c-180">`for` 문에는 작동 방식을 제어하는 세 부분이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-180">The `for` statement has three parts that control how it works.</span></span>


    <span data-ttu-id="1c97c-181">첫 번째 부분은 **for 이니셜라이저입니다**. `int counter = 0;`은 `counter`가 루프 변수임을 선언하고 첫 번째 값을 `0`으로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-181">The first part is the **for initializer**: `int counter = 0;` declares that `counter` is the loop variable, and sets its initial value to `0`.</span></span>


    <span data-ttu-id="1c97c-182">중간 부분은 **for 조건입니다**. `counter < 10`은 이 `for` 루프가 카운터 값이 10보다 작으면 계속 실행됨을 선언합니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-182">The middle part is the **for condition**: `counter < 10` declares that this `for` loop continues to execute as long as the value of counter is less than 10.</span></span>


    <span data-ttu-id="1c97c-183">마지막 부분은 **for 반복기입니다**. `counter++`는 `for` 문 다음의 블록을 실행한 후 루프 변수를 수정하는 방법을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-183">The final part is the **for iterator**: `counter++` specifies how to modify the loop variable after executing the block following the `for` statement.</span></span> <span data-ttu-id="1c97c-184">여기서 `counter`는 블록이 실행될 때마다 1씩 증가하도록 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-184">Here, it specifies that `counter` should be incremented by 1 each time the block executes.</span></span>


    <span data-ttu-id="1c97c-185">직접 실습해 보세요.</span><span class="sxs-lookup"><span data-stu-id="1c97c-185">Experiment with these yourself.</span></span> <span data-ttu-id="1c97c-186">다음 각각을 시도해 보세요.</span><span class="sxs-lookup"><span data-stu-id="1c97c-186">Try each of the following:</span></span>


    - <span data-ttu-id="1c97c-187">다른 값으로 시작하도록 이니셜라이저를 변경합니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-187">Change the initializer to start at a different value.</span></span>

    - <span data-ttu-id="1c97c-188">다른 값에서 중지하도록 조건을 변경합니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-188">Change the condition to stop at a different value.</span></span>


    <span data-ttu-id="1c97c-189">완료하면, 학습한 내용을 토대로 직접 코드를 작성해 보겠습니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-189">When you're done, let's move on to write some code yourself to use what you've learned.</span></span>


    > [!NOTE]

    > <span data-ttu-id="1c97c-190">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-190">This online coding experience is in preview mode.</span></span> <span data-ttu-id="1c97c-191">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class="sxs-lookup"><span data-stu-id="1c97c-191">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="1c97c-192">분기 및 루프 결합</span><span class="sxs-lookup"><span data-stu-id="1c97c-192">Combine branches and loops</span></span>
  durationInMinutes: 12
  content: >
    <span data-ttu-id="1c97c-193">이제 C# 언어로 된 `if` 문과 루프 구조를 확인했습니다. C# 코드를 작성하여 3으로 나눌 수 있는, 1에서 20까지의 모든 정수의 합계를 찾을 수 있는지 확인해 보세요.</span><span class="sxs-lookup"><span data-stu-id="1c97c-193">Now that you've seen the `if` statement and the looping constructs in the C# language, see if you can write C# code to find the sum of all integers 1 through 20 that are divisible by 3.</span></span>  <span data-ttu-id="1c97c-194">다음은 몇 가지 힌트입니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-194">Here are a few hints:</span></span>


    - <span data-ttu-id="1c97c-195">`%` 연산자는 나누기 연산의 나머지를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-195">The `%` operator gives you the remainder of a division operation.</span></span>

    - <span data-ttu-id="1c97c-196">`if` 문은 숫자가 합계의 일부여야 하는지를 확인하는 조건을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-196">The `if` statement gives you the condition to see if a number should be part of the sum.</span></span>

    - <span data-ttu-id="1c97c-197">`for` 루프는 1에서 20까지의 모든 숫자에 대해 일련의 단계를 반복하는 데 도움이 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-197">The `for` loop can help you repeat a series of steps for all the numbers 1 through 20.</span></span>


    <span data-ttu-id="1c97c-198">직접 시도해 보세요.</span><span class="sxs-lookup"><span data-stu-id="1c97c-198">Try it yourself.</span></span> <span data-ttu-id="1c97c-199">그런 다음 어떻게 했는지 확인하세요.</span><span class="sxs-lookup"><span data-stu-id="1c97c-199">Then check how you did.</span></span> <span data-ttu-id="1c97c-200">힌트로 답에 대해 63을 받아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-200">As a hint, you should get 63 for an answer.</span></span>


    > [!NOTE]

    > <span data-ttu-id="1c97c-201">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-201">This online coding experience is in preview mode.</span></span> <span data-ttu-id="1c97c-202">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class="sxs-lookup"><span data-stu-id="1c97c-202">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="1c97c-203">과제 완료</span><span class="sxs-lookup"><span data-stu-id="1c97c-203">Complete challenge</span></span>
  durationInMinutes: 1
  content: >
    <span data-ttu-id="1c97c-204">다음과 같은 답을 제시했나요?</span><span class="sxs-lookup"><span data-stu-id="1c97c-204">Did you come up with something like this?</span></span>


    ```csharp

    int sum = 0;

    for (int number = 1; number < 21; number++)

    {
      if (number % 3 == 0)
      {
        sum = sum + number;
      }
    }

    Console.WriteLine($"The sum is {sum}");

    ```


    > [!NOTE]

    > <span data-ttu-id="1c97c-205">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-205">This online coding experience is in preview mode.</span></span> <span data-ttu-id="1c97c-206">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class="sxs-lookup"><span data-stu-id="1c97c-206">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="1c97c-207">지금까지</span><span class="sxs-lookup"><span data-stu-id="1c97c-207">Congratulations!</span></span>
  content: >-
    <span data-ttu-id="1c97c-208">“분기 및 루프” 대화형 자습서를 완료했습니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-208">You've completed the "branches and loops" interactive tutorial.</span></span> <span data-ttu-id="1c97c-209">아래 **목록 모음** 링크를 클릭하여 다음 대화형 자습서를 시작하거나, [.NET 사이트](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro)를 방문하여 .NET Core SDK를 다운로드하고 머신에 프로젝트를 만들고 계속 코딩할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-209">You can click the **list collection** link below to start the next interactive tutorial, or you can visit the [.NET site](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="1c97c-210">“다음 단계” 섹션은 이 자습서로 돌아옵니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-210">The "Next steps" section brings you back to these tutorials.</span></span>


    <span data-ttu-id="1c97c-211">다음 항목에서는 해당 개념에 대해 더 자세히 알아볼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1c97c-211">You can learn more about these concepts in these topics:</span></span>


    - [<span data-ttu-id="1c97c-212">If 및 else 문</span><span class="sxs-lookup"><span data-stu-id="1c97c-212">If and else statement</span></span>](../../language-reference/keywords/if-else.md)

    - [<span data-ttu-id="1c97c-213">While 문</span><span class="sxs-lookup"><span data-stu-id="1c97c-213">While statement</span></span>](../../language-reference/keywords/while.md)

    - [<span data-ttu-id="1c97c-214">Do 문</span><span class="sxs-lookup"><span data-stu-id="1c97c-214">Do statement</span></span>](../../language-reference/keywords/do.md)

    - [<span data-ttu-id="1c97c-215">For 문</span><span class="sxs-lookup"><span data-stu-id="1c97c-215">For statement</span></span>](../../language-reference/keywords/for.md)
