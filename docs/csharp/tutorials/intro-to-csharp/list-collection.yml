### YamlMime:Tutorial
title: <span data-ttu-id="36279-101">일반 목록 형식을 사용하여 데이터 컬렉션을 관리하는 방법 알아보기</span><span class="sxs-lookup"><span data-stu-id="36279-101">Learn to manage data collections using the generic list type</span></span>
metadata:
  title: 데이터 컬렉션 - C# 소개 대화형 자습서
  description: 이 자습서에서는 브라우저를 사용하여 C#을 대화형으로 학습할 수 있습니다. C# 코드를 작성하고 브라우저에서 직접 코드를 컴파일하고 실행한 결과를 확인할 수 있습니다.
  audience: Developer
  ms.custom: mvc
  ms.date: 10/23/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 8ee13ec60f0504982c33ecc61940b731d320d2de
  ms.sourcegitcommit: c4e9d05644c9cb89de5ce6002723de107ea2e2c4
  ms.translationtype: HT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 05/19/2019
  ms.locfileid: "65880557"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="36279-105">이 자습서는 브라우저를 사용하여 C# 코드를 작성하고 코드를 컴파일하고 실행한 결과를 확인하는 방법을 대화형으로 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="36279-105">This tutorial teaches you C# interactively, using your browser to write C# code and see the results of compiling and running your code.</span></span> <span data-ttu-id="36279-106">컬렉션과 배열을 작성, 수정 및 탐색하는 일련의 단원이 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="36279-106">It contains a series of lessons that create, modify, and explore collections and arrays.</span></span>
- title: <span data-ttu-id="36279-107">목록 만들기</span><span class="sxs-lookup"><span data-stu-id="36279-107">Create lists</span></span>
  durationInMinutes: 2
  content: >
    <span data-ttu-id="36279-108">대화형 창에서 다음 코드를 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="36279-108">Run the following code in the interactive window.</span></span> <span data-ttu-id="36279-109">그렇게 하려면 대화형 창에 다음 코드 블록을 입력하고(`<name>`을 사용자의 이름으로 바꿈) **실행** 단추를 클릭합니다.</span><span class="sxs-lookup"><span data-stu-id="36279-109">To do that, type the following code block in the interactive window (replace `<name>` with your name) and click the **Run** button:</span></span>


    ```csharp

    var names = new List<string> { "<name>", "Ana", "Felipe" };

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    <span data-ttu-id="36279-110">문자열 목록을 만들고, 해당 목록에 세 개의 이름을 추가하고, 모든 CAPS에 이름을 인쇄했습니다.</span><span class="sxs-lookup"><span data-stu-id="36279-110">You've created a list of strings, added three names to that list, and printed out the names in all CAPS.</span></span> <span data-ttu-id="36279-111">이전 자습서에서 학습한 개념을 사용하여 목록을 반복합니다.</span><span class="sxs-lookup"><span data-stu-id="36279-111">You're using concepts that you've learned in earlier tutorials to loop through the list.</span></span>


    <span data-ttu-id="36279-112">이름을 표시하는 코드는 [문자열 보간](../../language-reference/tokens/interpolated.md) 기능을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="36279-112">The code to display names makes use of the [string interpolation](../../language-reference/tokens/interpolated.md) feature.</span></span> <span data-ttu-id="36279-113">`string` 앞에 `$` 문자를 넣으면 문자열 선언에 C# 코드를 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="36279-113">When you precede a `string` with the `$` character, you can embed C# code in the string declaration.</span></span> <span data-ttu-id="36279-114">실제 문자열은 C# 코드를 생성하는 값으로 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="36279-114">The actual string replaces that C# code with the value it generates.</span></span> <span data-ttu-id="36279-115">이 예제에서는 <xref:System.String.ToUpper%2A?displayProperty=nameWithType> 메서드를 호출했기 때문에 `{name.ToUpper()}`를 대문자로 변환된 각 이름으로 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="36279-115">In this example, it replaces the `{name.ToUpper()}` with each name, converted to capital letters, because you called the <xref:System.String.ToUpper%2A?displayProperty=nameWithType> method.</span></span>


    <span data-ttu-id="36279-116">계속해서 살펴보겠습니다.</span><span class="sxs-lookup"><span data-stu-id="36279-116">Let's keep exploring.</span></span>


    > [!NOTE]

    > <span data-ttu-id="36279-117">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class="sxs-lookup"><span data-stu-id="36279-117">This online coding experience is in preview mode.</span></span> <span data-ttu-id="36279-118">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class="sxs-lookup"><span data-stu-id="36279-118">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="36279-119">목록 콘텐츠 수정</span><span class="sxs-lookup"><span data-stu-id="36279-119">Modify list contents</span></span>
  durationInMinutes: 3
  content: >
    <span data-ttu-id="36279-120">생성한 컬렉션은 <xref:System.Collections.Generic.List%601> 형식을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="36279-120">The collection you created uses the <xref:System.Collections.Generic.List%601> type.</span></span> <span data-ttu-id="36279-121">이 형식은 요소의 시퀀스를 저장합니다.</span><span class="sxs-lookup"><span data-stu-id="36279-121">This type stores sequences of elements.</span></span> <span data-ttu-id="36279-122">꺾쇠 괄호 사이의 요소 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="36279-122">You specify the type of the elements between the angle brackets.</span></span>


    <span data-ttu-id="36279-123">이 <xref:System.Collections.Generic.List%601> 형식은 늘리거나 줄일 수 있어 요소를 추가하거나 제거할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="36279-123">One important aspect of this <xref:System.Collections.Generic.List%601> type is that it can grow or shrink, enabling you to add or remove elements.</span></span> <span data-ttu-id="36279-124">해당 내용을 표시한 후 내용을 수정하여 결과를 볼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="36279-124">You can see the results by modifying the contents after you've displayed its contents.</span></span> <span data-ttu-id="36279-125">이미 작성한 코드 아래에 다음 코드를 추가합니다(내용을 인쇄하는 루프 아래).</span><span class="sxs-lookup"><span data-stu-id="36279-125">Add the following code below the code you've already written (below the loop that prints the contents):</span></span>


    ```csharp

    Console.WriteLine();

    names.Add("Maria");

    names.Add("Bill");

    names.Remove("Ana");

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    <span data-ttu-id="36279-126">목록 끝에 이름을 두 개 더 추가했습니다.</span><span class="sxs-lookup"><span data-stu-id="36279-126">You've added two more names to the end of the list.</span></span> <span data-ttu-id="36279-127">또한 이름을 하나 제거했습니다.</span><span class="sxs-lookup"><span data-stu-id="36279-127">You've also removed one as well.</span></span> <span data-ttu-id="36279-128">이 코드 블록의 출력은 초기 내용을 표시한 다음, 빈 줄과 새 내용을 인쇄합니다.</span><span class="sxs-lookup"><span data-stu-id="36279-128">The output from this block of code shows the initial contents, then prints a blank line and the new contents.</span></span>


    <span data-ttu-id="36279-129"><xref:System.Collections.Generic.List%601>를 사용하면 **인덱스**별로 각 항목을 참조할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="36279-129">The <xref:System.Collections.Generic.List%601> enables you to reference individual items by **index** as well.</span></span> <span data-ttu-id="36279-130">`[` 및 `]` 토큰을 사용하여 항목에 액세스합니다.</span><span class="sxs-lookup"><span data-stu-id="36279-130">You access items using the `[` and `]` tokens.</span></span> <span data-ttu-id="36279-131">이미 작성한 코드 아래에 다음 코드를 추가하고 다음을 시도합니다.</span><span class="sxs-lookup"><span data-stu-id="36279-131">Add the following code below what you've already written and try it:</span></span>


    ```csharp

    Console.WriteLine($"My name is {names[0]}.");

    Console.WriteLine($"I've added {names[2]} and {names[3]} to the list.");

    ```


    <span data-ttu-id="36279-132">목록 끝을 지나서 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="36279-132">You're not allowed to access past the end of the list.</span></span> <span data-ttu-id="36279-133"><xref:System.Collections.Generic.List%601.Count%2A> 속성을 사용하여 목록의 길이를 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="36279-133">You can check how long the list is using the <xref:System.Collections.Generic.List%601.Count%2A> property.</span></span> <span data-ttu-id="36279-134">다음 코드를 추가하여 시도해 보세요.</span><span class="sxs-lookup"><span data-stu-id="36279-134">Add the following code to try it:</span></span>


    ```csharp

    Console.WriteLine($"The list has {names.Count} people in it");

    ```


    <span data-ttu-id="36279-135">**실행**을 클릭하여 결과를 다시 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="36279-135">Click **Run** again to see the results.</span></span> <span data-ttu-id="36279-136">C#에서 인덱스는 0부터 시작하므로, 가장 큰 유효 인덱스는 목록의 항목 수보다 하나 작습니다.</span><span class="sxs-lookup"><span data-stu-id="36279-136">In C#, indices start at 0, so the largest valid index is one less than the number of items in the list.</span></span>


    > [!NOTE]

    > <span data-ttu-id="36279-137">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class="sxs-lookup"><span data-stu-id="36279-137">This online coding experience is in preview mode.</span></span> <span data-ttu-id="36279-138">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class="sxs-lookup"><span data-stu-id="36279-138">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="36279-139">목록 검색 및 정렬</span><span class="sxs-lookup"><span data-stu-id="36279-139">Search and sort lists</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="36279-140">샘플에서는 상대적으로 작은 목록을 사용하지만 애플리케이션에서는 수천에 달하는 많은 요소가 포함된 목록을 작성할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="36279-140">Our samples use relatively small lists, but your applications may often create lists with many more elements, sometimes numbering in the thousands.</span></span> <span data-ttu-id="36279-141">이러한 큰 컬렉션에서 요소를 찾으려면 여러 항목의 목록을 검색해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="36279-141">To find elements in these larger collections, you need to search the list for different items.</span></span> <span data-ttu-id="36279-142"><xref:System.Collections.Generic.List%601.IndexOf%2A> 메서드는 항목을 검색하고 항목의 인덱스를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="36279-142">The <xref:System.Collections.Generic.List%601.IndexOf%2A> method searches for an item and returns the index of the item.</span></span> <span data-ttu-id="36279-143">작동 방식을 확인해 보세요.</span><span class="sxs-lookup"><span data-stu-id="36279-143">Try it to see how it works.</span></span>  <span data-ttu-id="36279-144">지금까지 작성한 코드 아래에 다음 코드를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="36279-144">Add the following code below what you've written so far:</span></span>


    ```csharp

    var index = names.IndexOf("Felipe");

    if (index != -1)
      Console.WriteLine($"The name {names[index]} is at index {index}");

    var notFound = names.IndexOf("Not Found");
      Console.WriteLine($"When an item is not found, IndexOf returns {notFound}");
    ```


    <span data-ttu-id="36279-145">항목이 목록에 있는지 알 수 없으므로 <xref:System.Collections.Generic.List%601.IndexOf%2A>에서 반환된 인덱스를 항상 확인해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="36279-145">You may not know if an item is in the list, so you should always check the index returned by <xref:System.Collections.Generic.List%601.IndexOf%2A>.</span></span> <span data-ttu-id="36279-146">-1인 경우 항목을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="36279-146">If it is -1, the item was not found.</span></span>


    <span data-ttu-id="36279-147">목록의 항목도 정렬할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="36279-147">The items in your list can be sorted as well.</span></span> <span data-ttu-id="36279-148"><xref:System.Collections.Generic.List%601.Sort%2A> 메서드는 일반적인 순서(문자열의 경우 사전순)로 목록의 모든 항목을 정렬합니다.</span><span class="sxs-lookup"><span data-stu-id="36279-148">The <xref:System.Collections.Generic.List%601.Sort%2A> method sorts all the items in the list in their normal order (alphabetically in the case of strings).</span></span> <span data-ttu-id="36279-149">이 코드를 추가하고 다시 실행하세요.</span><span class="sxs-lookup"><span data-stu-id="36279-149">Add this code and run again:</span></span>


    ```csharp

    names.Sort();

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    > [!NOTE]

    > <span data-ttu-id="36279-150">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class="sxs-lookup"><span data-stu-id="36279-150">This online coding experience is in preview mode.</span></span> <span data-ttu-id="36279-151">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class="sxs-lookup"><span data-stu-id="36279-151">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="36279-152">다른 형식 목록</span><span class="sxs-lookup"><span data-stu-id="36279-152">Lists of other types</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="36279-153">지금까지 목록에 `string` 형식을 사용했습니다.</span><span class="sxs-lookup"><span data-stu-id="36279-153">You've been using the `string` type in lists so far.</span></span> <span data-ttu-id="36279-154">다른 형식을 사용하여 <xref:System.Collections.Generic.List%601>를 만들어 보겠습니다.</span><span class="sxs-lookup"><span data-stu-id="36279-154">Let's make a <xref:System.Collections.Generic.List%601> using a different type.</span></span> <span data-ttu-id="36279-155">숫자 집합을 빌드하겠습니다.</span><span class="sxs-lookup"><span data-stu-id="36279-155">Let's build a set of numbers.</span></span> <span data-ttu-id="36279-156">지금까지 작성한 코드를 삭제하고 다음 코드로 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="36279-156">Delete the code you wrote so far, and replace it with the following code:</span></span>


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};

    ```


    <span data-ttu-id="36279-157">정수 목록을 만들고 처음 두 정수를 값 1로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="36279-157">That creates a list of integers, and sets the first two integers to the value 1.</span></span> <span data-ttu-id="36279-158">*피보나치 시퀀스*는 숫자의 연속으로 두 개의 1로 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="36279-158">The *Fibonacci Sequence*, a sequence of numbers, starts with two 1s.</span></span> <span data-ttu-id="36279-159">다음 각 피보나치 수는 이전의 두 수의 합계를 사용하여 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="36279-159">Each next Fibonacci number is found by taking the sum of the previous two numbers.</span></span> <span data-ttu-id="36279-160">이 코드를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="36279-160">Add this code:</span></span>


    ```csharp

    var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];

    var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];


    fibonacciNumbers.Add(previous + previous2);


    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    <span data-ttu-id="36279-161">**실행**을 눌러 결과를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="36279-161">Press **Run** to see the results;</span></span>


    > [!NOTE]

    > <span data-ttu-id="36279-162">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class="sxs-lookup"><span data-stu-id="36279-162">This online coding experience is in preview mode.</span></span> <span data-ttu-id="36279-163">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class="sxs-lookup"><span data-stu-id="36279-163">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="36279-164">과제</span><span class="sxs-lookup"><span data-stu-id="36279-164">Challenge</span></span>
  durationInMinutes: 10
  content: >
    <span data-ttu-id="36279-165">이 단원과 이전 단원에서 학습한 개념을 함께 적용할 수 있는지 확인하세요.</span><span class="sxs-lookup"><span data-stu-id="36279-165">See if you can put together some of the concepts from this and earlier lessons.</span></span> <span data-ttu-id="36279-166">피보나치 수를 사용하여 지금까지 빌드한 내용을 확장합니다.</span><span class="sxs-lookup"><span data-stu-id="36279-166">Expand on what you've built so far with Fibonacci Numbers.</span></span> <span data-ttu-id="36279-167">코드를 작성하여 시퀀스에서 처음 20개 수를 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="36279-167">Try and write the code to generate the first 20 numbers in the sequence.</span></span> <span data-ttu-id="36279-168">(힌트: 20번째 피보나치 수는 6765입니다.)</span><span class="sxs-lookup"><span data-stu-id="36279-168">(As a hint, the 20th Fibonacci number is 6765.)</span></span>


    > [!NOTE]

    > <span data-ttu-id="36279-169">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class="sxs-lookup"><span data-stu-id="36279-169">This online coding experience is in preview mode.</span></span> <span data-ttu-id="36279-170">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class="sxs-lookup"><span data-stu-id="36279-170">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="36279-171">과제 완료</span><span class="sxs-lookup"><span data-stu-id="36279-171">Complete challenge</span></span>
  durationInMinutes: 3
  content: >
    <span data-ttu-id="36279-172">다음과 같은 답을 제시했나요?</span><span class="sxs-lookup"><span data-stu-id="36279-172">Did you come up with something like this?</span></span>


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};


    while (fibonacciNumbers.Count < 20)

    {
        var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];
        var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];

        fibonacciNumbers.Add(previous + previous2);
    }

    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    <span data-ttu-id="36279-173">루프의 각 반복을 통해 목록의 마지막 두 정수를 사용하고, 더하고, 해당 값을 목록에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="36279-173">With each iteration of the loop, you're taking the last two integers in the list, summing them, and adding that value to the list.</span></span> <span data-ttu-id="36279-174">목록에 20개의 항목이 추가될 때까지 루프가 반복됩니다.</span><span class="sxs-lookup"><span data-stu-id="36279-174">The loop repeats until you've added 20 items to the list.</span></span>


    > [!NOTE]

    > <span data-ttu-id="36279-175">이 온라인 코딩 환경은 미리 보기 모드로 제공됩니다.</span><span class="sxs-lookup"><span data-stu-id="36279-175">This online coding experience is in preview mode.</span></span> <span data-ttu-id="36279-176">문제가 발생하면 [dotnet/try 리포지토리](https://github.com/dotnet/try/issues)에 보고하세요.</span><span class="sxs-lookup"><span data-stu-id="36279-176">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- content: >-
    <span data-ttu-id="36279-177">목록 대화형 자습서를 완료했습니다.</span><span class="sxs-lookup"><span data-stu-id="36279-177">You've completed the list interactive tutorial.</span></span> <span data-ttu-id="36279-178">이는 C# 대화형 자습서의 최종 소개입니다.</span><span class="sxs-lookup"><span data-stu-id="36279-178">That's the final introduction to C# interactive tutorial.</span></span> <span data-ttu-id="36279-179">[.NET 사이트](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial)를 방문하여 .NET Core SDK를 다운로드하고, 머신에 프로젝트를 만들고, 계속해서 코딩할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="36279-179">You can visit the [.NET site](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="36279-180">“계속 학습” 단계에서 이러한 자습서로 돌아와 머신에 프로젝트를 빌드합니다.</span><span class="sxs-lookup"><span data-stu-id="36279-180">The "Keep Learning" step brings you back to these tutorials to build projects on your machine.</span></span>


    <span data-ttu-id="36279-181">다음 문서에서는 [.NET 컬렉션](../../../standard/collections/index.md)에 대해 자세히 알아볼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="36279-181">You can learn more about [.NET collections](../../../standard/collections/index.md) in the following articles:</span></span>

    - [<span data-ttu-id="36279-182">컬렉션 형식 선택</span><span class="sxs-lookup"><span data-stu-id="36279-182">Selecting a collection type</span></span>](../../../standard/collections/selecting-a-collection-class.md)

    - [<span data-ttu-id="36279-183">일반적으로 사용되는 컬렉션 형식</span><span class="sxs-lookup"><span data-stu-id="36279-183">Commonly used collection types</span></span>](../../../standard/collections/commonly-used-collection-types.md)

    - [<span data-ttu-id="36279-184">제네릭 컬렉션 사용 기준</span><span class="sxs-lookup"><span data-stu-id="36279-184">When to use generic collections</span></span>](../../../standard/collections/when-to-use-generic-collections.md)
