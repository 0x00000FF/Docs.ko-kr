### YamlMime:Tutorial
title: C# 7.0 살펴보기 - C# 대화형 자습서
metadata:
  title: C# 7.0 살펴보기 - 브라우저를 사용하여 C# 7.0의 새 기능을 대화형으로 사용해 보기
  description: 이 자습서에서는 브라우저를 사용하여 C# 7.0을 대화형으로 살펴볼 수 있습니다. 보다 간결하고 가독성이 높은 코드를 구현하는 C# 7.0에서 사용할 수 있는 새로운 관용구를 살펴볼 수 있습니다.
  audience: Developer
  level: intermediate
  ms.date: 03/20/2019
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 70f4e93460c69b54702f160d502163827ec73218
  ms.sourcegitcommit: 0aca6c5d166d7961a1e354c248495645b97a1dc5
  ms.translationtype: HT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 03/30/2019
  ms.locfileid: "58675525"
items:
- durationInMinutes: 1
  content: >
    이 자습서에서는 브라우저를 사용하여 C#을 작성하고 코드를 컴파일하고 실행한 결과를 확인하면서 C# 7.0 기능을 대화형으로 살펴볼 수 있습니다. 여기에는 더 간결한 최신 C# 7.0 기능을 사용하도록 이전 버전의 C# 방식을 수정하는 일련의 단원이 포함되어 있습니다. 이 문서의 나머지 부분에서는 이러한 각 기능을 간략히 설명하고 이러한 기능을 살펴볼 수 있는 링크를 제공합니다.
- title: 할당 위치에 출력 변수 선언
  durationInMinutes: 2
  content: "`out` 매개 변수를 지원하는 기존 구문이 이 버전에서 개선되었습니다. 이 페이지의 맨 아래에서 *포커스 모드로 전환* 단추를 클릭한 다음, 대화형 창에서 다음 코드를 실행합니다. \n\n[!code-csharp[OutVariableOldStyle](~/samples/snippets/csharp/new-in-7/program.cs#OutVariableOldStyle \"classic out variable declaration\")]\n\n이제 개별 선언 문을 작성하는 대신 메서드 호출의 인수 목록에서 `out` 변수를 선언할 수 있습니다. 선언을 메서드 호출로 이동시킬 수 있습니다. 대화형 창의 맨 아래에 다음 코드를 추가합니다.\n\n[!code-csharp[OutVariableDeclarations](~/samples/snippets/csharp/new-in-7/program.cs#OutVariableDeclarations \"Out variable declarations\")]\n\n`int` 선언을 `var` 선언으로 변경할 수 있습니다. 대화형 창에 다음 코드를 추가합니다.\n\n[!code-csharp[OutVarVariableDeclarations](~/samples/snippets/csharp/new-in-7/program.cs#OutVarVariableDeclarations \"Implicitly typed Out variable\")]\n\n새 구문에서는 기존 구문에서 다음과 같은 두 가지 주요 장점을 제공합니다.\n\n* 코드를 읽기가 더 쉽습니다. \n    - 위의 다른 줄이 아니라 사용하는 위치에서 out 변수를 선언합니다.\n* 초기 값을 할당할 필요가 없습니다.\n    - 메서드 호출에서 사용되는 위치에 `out` 변수를 선언하면 변수가 선언되기 전에 실수로 사용할 가능성이 없습니다.\n\n선언된 변수의 범위는 `if` 문을 포함하는 범위입니다. 따라서 이후에도 해당 변수를 사용할 수 있습니다. 다음 코드 조각에 표시된 대로 마지막 `if` 블록을 수정합니다.\n\n```csharp\nif (!int.TryParse(input, out int result))\n{    \n    return null;\n}\n\nConsole.WriteLine(result);\n```\n"
- title: 튜플은 간단한 데이터 구조체를 만듭니다.
  durationInMinutes: 1
  content: "튜플은 데이터 멤버를 나타내는 여러 필드가 포함된 간단한 데이터 구조입니다. 필드는 유효성이 검사되지 않고 자체 메서드를 정의할 수 없습니다.\n\n> [!NOTE]\n> 튜플은 C# 7.0 이전부터 사용할 수 있었지만 비효율적이었고 언어 지원이 없었습니다. 즉, 튜플 요소는 `Item1`, `Item2` 등으로만 참조될 수 있었습니다. C# 7.0은 튜플에 대한 언어 지원을 제공하므로 새롭고 보다 효율적인 튜플 형식을 사용하여 튜플 필드에 의미 체계 이름을 사용할 수 있습니다.\n\n명명된 각 멤버에 값을 할당하여 튜플을 만들 수 있습니다.\n\n[!code-csharp[NamedTuple](~/samples/snippets/csharp/new-in-7/program.cs#NamedTuple \"Named tuple\")]\n\n`namedLetters` 튜플에는 `Alpha` 및 `Beta`라는 필드가 포함됩니다. 이러한 이름은 컴파일 시간에만 존재하며 런타임 시 보존되지 않습니다(예: 리플렉션을 사용하여 튜플을 검사하는 경우).\n\n튜플 할당에서 할당의 오른쪽에 필드의 이름을 지정할 수도 있습니다. \n\n[!code-csharp[ImplicitNamedTuple](~/samples/snippets/csharp/new-in-7/program.cs#ImplicitNamedTuple \"Implicitly named tuple\")]\n\n할당의 왼쪽 및 오른쪽에서 모두 필드의 이름을 지정할 수 있지만 오른쪽 이름은 무시됩니다.\n\n튜플은 `private` 및 `internal` 메서드의 반환 형식으로 가장 유용합니다. 튜플은 이러한 메서드에 여러 개의 불연속 값을 반환하는 간단한 구문을 제공합니다.\n\n튜플을 만드는 것이 클래스 또는 구조체를 만드는 것보다 더 효율적이고 더 생산적입니다. 두 개 이상의 값을 전달하는 데이터 구조를 정의하는 더 간단한 구문이 포함됩니다. 아래 예제 메서드는 정수 시퀀스에서 발견된 최소값 및 최대값을 반환합니다.\n\n[!code-csharp[TupleReturningMethod](~/samples/snippets/csharp/new-in-7/program.cs#TupleReturningMethod \"Tuple returning method\")]\n\n메서드에서 반환된 튜플의 멤버를 패키지 해제하려는 경우가 있을 수 있습니다.  이 작업을 수행하려면 튜플에서 각 값에 대한 개별 변수를 선언합니다. 이 작업을 튜플 *분해*라고 합니다. 브라우저에서 다음 코드를 추가하여 사용해보세요.\n\n[!code-csharp[CallingWithDeconstructor](~/samples/snippets/csharp/new-in-7/program.cs#CallingWithDeconstructor \"Deconstructing a tuple\")]\n\n튜플로 작업할 때 튜플 결과의 모든 멤버를 사용하지 않는 경우가 있습니다. 이 경우에 변수 대신 `_`을 사용하여 반환된 값 중 하나 이상을 버릴 수 있습니다. 브라우저에서 다음 코드를 추가하여 사용해보세요.\n\n[!code-csharp[DiscardTupleMember](~/samples/snippets/csharp/new-in-7/program.cs#DiscardMember \"Discard a tuple member\")]\n\n[튜플 문서](../../tuples.md)에서 튜플에 대해 자세히 알아볼 수 있습니다.\n[버리기 문서](../../discards.md)에서 버리는 방법에 대해 자세히 알아볼 수 있습니다.\n"
- title: is 식에서 형식 패턴을 사용합니다.
  durationInMinutes: 2
  content: >
    `is` 패턴 식은 친숙한 [`is` 연산자](../../language-reference/keywords/is.md#pattern-matching-with-is)를 확장하여 형식을 넘어서 개체를 쿼리합니다.


    브라우저 창에서 다음 코드를 사용해보세요.


    [!code-csharp[SimpleIs](~/samples/snippets/csharp/new-in-7/patternmatch.cs#SimpleIsPattern "Simple Is pattern")]


    대신 변수 선언을 문자열로 변경합니다.


    ```csharp

    object count = "5";

    ```


    이제 `is` 식이 false이므로 `else` 분기가 실행됩니다. else 분기에서 `count`를 `number`로 변경하려고 합니다.


    ```csharp

    Console.WriteLine($"{number} is not an integer");

    ```


    위에서는 `number`가 `else` 분기에 할당되지 않았기 때문에 컴파일되지 않습니다. `if` 문의 `true` 분기에서만 할당됩니다.


    `is` 식 형식 패턴은 적은 수의 형식을 테스트하는 경우에 유용합니다. 여러 형식을 테스트해야 하는 경우가 있습니다. 그러면 패턴 일치 `switch` 문이 필요합니다.
- title: switch 문에서 패턴 일치
  durationInMinutes: 2
  content: >
    *일치 식*에는 이미 C# 언어의 일부인 `switch` 문에 기반을 둔 친숙한 구문이 있습니다. 이전 페이지에서 살펴본 `is` 식 구문에 따라 간단한 샘플을 시작해보겠습니다.


    [!code-csharp[SimpleSwitch](~/samples/snippets/csharp/new-in-7/patternmatch.cs#SimpleSwitchPattern "simple switch")]


    앞의 코드는 `int` 또는 `null`을 검사합니다. 다른 모든 형식은 기본 사례에 도달했습니다. 다음 두 줄을 추가하여 동작을 확인합니다.


    [!code-csharp[AddLongCase](~/samples/snippets/csharp/new-in-7/patternmatch.cs#TestLong "Add a case for long")]


    `switch` 식은 nullable 형식을 해당하는 형식으로 변환합니다. 다음을 추가하여 확인합니다.


    [!code-csharp[NullableCase](~/samples/snippets/csharp/new-in-7/patternmatch.cs#NullableSwitch "Add a nullable case")]


    switch 문에 다른 형식 패턴 식을 원하는 만큼 추가할 수 있습니다. `null` 사례 앞에 다음을 추가합니다.


    [!code-csharp[MoreTypeCases](~/samples/snippets/csharp/new-in-7/patternmatch.cs#MoreCases "Add more type cases")]


    다음 테스트를 추가하여 작동하는지 확인합니다.


    [!code-csharp[AddMoreTests](~/samples/snippets/csharp/new-in-7/patternmatch.cs#MoreTests "Add more type tests")]


    일치 식은 상수도 지원합니다. 이 방법에서는 간단한 사례를 제외하여 시간을 절약할 수 있습니다.


    [!code-csharp[ConstantCase](~/samples/snippets/csharp/new-in-7/patternmatch.cs#ConstantCase "Add a constant case")]


    `case int:` 식 *전에* 이전 사례를 추가해야 합니다. 해당 사례 뒤에 추가하면 컴파일러에서는 이전 사례에 의해 이미 처리되었다고 경고합니다.


    `when` 절을 패턴 사례에 추가하여 형식 또는 상수 값 이외의 다른 조건을 테스트할 수 있습니다. 일반 `string` 사례 위에 다음과 같은 사례를 추가해보세요.


    [!code-csharp[WhenClause](~/samples/snippets/csharp/new-in-7/patternmatch.cs#WhenClause "Add a when clause")]


    다음과 같은 코드를 사용하여 테스트합니다.


    [!code-csharp[TestWhenClause](~/samples/snippets/csharp/new-in-7/patternmatch.cs#TestWhenClause "Test the when clause")]


    패턴 일치 식에 대한 새로운 구문을 사용하면 개체 형식 또는 기타 속성에 따라 분명하고 간결한 구문을 사용하여 더 쉽게 디스패치 알고리즘을 만들 수 있습니다. 패턴 일치 식을 사용하면 상속이 관련되지 않은 데이터 형식에서 이러한 구문을 사용할 수 있습니다.


    패턴 일치에 대한 자세한 내용은 [C#의 패턴 일치](../../pattern-matching.md)에 관련된 문서를 참조하세요.
- title: ref local 및 return을 사용하여 메모리 스토리지를 최적화합니다.
  durationInMinutes: 2
  content: >
    이 기능을 통해 다른 곳에 정의된 변수에 대한 참조를 사용 및 반환하는 알고리즘이 가능해집니다. 대량 매트릭스를 사용하고 특정한 특성을 가진 단일 위치를 찾는 것을 예로 들 수 있습니다. 하나의 메서드가 매트릭스에 있는 단일 위치에 대해 두 개의 인덱스를 반환합니다.


    [!code-csharp[EverythingByValue](~/samples/snippets/csharp/new-in-7/MatrixSearch.cs#EverythingByValue "return indices by value")]


    다음 코드를 사용하여 이 메서드를 테스트할 수 있습니다.


    [!code-csharp[TestByValue](~/samples/snippets/csharp/new-in-7/MatrixSearch.cs#TestByValue "test code for return indices by value")]



    이 `Find` 메서드는 매트릭스의 항목에 인덱스를 반환합니다. 그러면 호출자는 해당 인덱스를 사용하여 매트릭을 역참조하고 단일 요소를 수정하는 코드를 작성합니다. 변경할 매트릭스의 요소에 대한 *참조*를 반환하는 메서드를 작성하는 것이 좋습니다.


    ref local 기능을 보여 주고 내부 스토리지에 대한 참조를 반환하는 메서드를 만드는 방법을 보여 주는 일련의 변경을 살펴보겠습니다. 계속해서, 실수로 잘못 사용하지 않도록 방지하는 ref return 및 ref local 기능의 규칙을 알아봅니다.


    먼저 튜플 대신 `ref int`를 반환하도록 `Find` 메서드 선언을 수정합니다.


    ```csharp

    ref int Find(int[,] matrix, Func<int, bool> predicate)

    ```


    올바른 인덱스에 있는 항목을 반환하도록 반환 문을 수정합니다.


    ```csharp

    return matrix[i,j];

    ```


    대신 예외를 throw하도록 마지막 반환을 변경합니다.


    ```csharp

    throw new InvalidOperationException("Not found");

    ```


    컴파일되지 않습니다. 메서드 선언은 `ref` 반환을 나타내지만 반환 문은 반환 값을 지정합니다. `ref` 키워드를 각 반환 문에 추가해야 합니다. 이는 참조에 의한 반환을 나타내고 나중에 코드를 읽는 개발자가 메서드가 참조에 의해 반환된다는 것을 기억하도록 도와줍니다.


    ```csharp

    return ref matrix[i,j];

    ```


    이제 메서드는 매트릭스의 정수 값에 대한 참조를 반환하므로 메서드가 호출되는 위치를 수정해야 합니다. `var` 선언은 `valItem`이 이제 튜플이 아닌 `int`임을 의미합니다. 호출 코드를 다음으로 변경합니다.


    ```csharp

    var valItem = Find(matrix, (val) => val == 42);

    Console.WriteLine(valItem);

    valItem = 24;

    Console.WriteLine(matrix[4, 2]);

    ```


    위 예제의 두 번째 `WriteLine` 문은 `24`가 아닌 `42` 값을 출력합니다. `valItem` 변수는 `ref int`가 아닌 `int`입니다. `var` 키워드를 사용하면 컴파일러가 형식을 지정할 수 있지만 `ref` 한정자가 암시적으로 추가되지 않습니다. 대신, `ref return`이 참조하는 값이 할당의 왼쪽에 있는 변수로 *복사*됩니다. 변수는 `ref` local이 아닙니다.


    반환 값이 참조인 경우 반환된 참조를 수정하기 위해 지역 변수 선언에 `ref` 한정자를 추가하고 `Find`를 호출하기 전에 변수를 참조로 만들어야 합니다. 다음과 일치하도록 브라우저에서 테스트 코드를 수정합니다.


    [!code-csharp[EverythingByValue](~/samples/snippets/csharp/new-in-7/MatrixSearch.cs#TestByValue "test code for return object by reference")]


    이제 위 예제의 두 번째 `WriteLine` 문은 매트릭스의 스토리지가 수정되었음을 나타내는 `24` 값을 출력합니다. 지역 변수는 `ref` 한정자로 선언되었고 `ref` return을 사용합니다. `ref` 변수는 선언될 때 초기화되어야 합니다. 선언과 초기화를 분할할 수 없습니다.


    C# 언어에는 `ref` local 및 return을 잘못 사용하는 경우를 방지하는 세 가지 다른 규칙이 있습니다.


    * 표준 메서드 반환 값을 `ref` 로컬 변수에 할당할 수 없습니다.

    * 메서드 실행보다 길게 수명이 연장되지 않는 변수로 `ref`를 반환할 수는 없습니다.

    * `ref` local 및 return은 비동기 메서드와 함께 사용할 수 없습니다.


    ref local 및 ref return을 추가하면 값을 복사하거나 역참조 작업을 여러 번 수행하는 경우를 방지하여 더 효율적인 알고리즘이 가능해집니다.


    자세한 내용은 [ref 키워드](../../language-reference/keywords/ref.md) 문서를 참조하세요.
- title: 로컬 함수를 사용하여 코드에 대한 액세스를 최소화합니다.
  durationInMinutes: 2
  content: "이제 다른 함수 안에 중첩된 로컬 함수를 선언할 수 있습니다. 따라서 이러한 함수의 가시성을 최소화할 수 있습니다. 로컬 함수에 대한 세 가지 확실한 사용 사례는 다음과 같습니다.\n\n- 재귀 함수.\n- 반복기 메서드\n- 비동기 메서드\n\n재귀 메서드를 시작해보겠습니다. 브라우저에서 다음 코드를 사용하여 `6!`(계승)을 계산하세요.\n\n```csharp\nint LocalFunctionFactorial(int n)\n{\n    return nthFactorial(n);\n\n    int nthFactorial(int number) => (number < 2) ? \n        1 : number * nthFactorial(number - 1);\n}\n\nConsole.WriteLine(LocalFunctionFactorial(6));\n```\n\n재귀 알고리즘을 구현하는 데 로컬 함수를 사용하는 것이 좋습니다. 공용 반복기 메서드 및 공용 비동기 메서드에 일반적으로 사용됩니다. 두 메서드 형식 모두 프로그래머가 예상한 것보다 늦게 오류를 보고하는 코드를 생성합니다. 반복기 메서드의 경우 모든 예외는 반환된 시퀀스를 열거하는 코드를 호출할 경우에만 관찰됩니다. 비동기 메서드의 경우 모든 예외는 반환된 `Task`가 대기 상태일 경우에만 관찰됩니다.\n\n반복기 메서드는 브라우저에서 쉽게 살펴볼 수 있으므로 이 살펴보기에서 사용해보겠습니다. 브라우저에서 반복기 메서드를 호출하는 다음 코드를 사용하세요.\n\n[!code-csharp[IteratorMethod](~/samples/snippets/csharp/new-in-7/Iterator.cs#SnippetIteratorMethod \"Iterator method\")]\n\n코드를 실행합니다. 코드가 두 번째 결과 세트를 반복하기 시작하는 경우 예외가 throw됩니다. 첫 번째 결과 세트를 반복하는 코드는 이미 실행되었습니다. 이 샘플은 모두 사소하고 데이터 구조를 변경하지 않습니다. 따라서 무해하고 문제를 해결하기 쉽습니다. 그러나 두 개의 반복기 개체가 다른 자식 메서드에서 만들어질 수 있는 대규모 프로그램에서는 근본 원인을 찾기 어려울 수 있습니다. 첫 번째 반복기가 메서드 데이터 상태를 변경하는 경우 데이터 손상이 발생할 수 있습니다. 작업이 완료되기 전에 예외가 즉시 throw되도록 하려고 합니다. 공용 메서드가 모든 인수의 유효성을 검사하고 로컬 함수가 열거형을 수행하도록 코드를 리팩터링할 수 있습니다.\n\n[!code-csharp[IteratorMethodRefactored](~/samples/snippets/csharp/new-in-7/Iterator.cs#IteratorMethodLocalInteractive \"Iterator method refactored\")]\n\n이전 버전을 사용하면 로컬 메서드가 외부 메서드의 컨텍스트에서만 참조되도록 합니다. 로컬 함수에 대한 규칙을 적용하면 개발자가 클래스의 다른 위치에서 로컬 함수를 실수로 호출하고 인수 유효성 검사를 건너뛸 수 없게 됩니다.\n\n`async` 메서드에서 같은 방법을 사용하면 인수 유효성 검사에서 발생하는 예외가 비동기 작업이 시작되기 전에 throw됩니다.\n\n> [!NOTE]\n> 로컬 함수가 지원하는 일부 디자인은 *람다 식*을 사용하여 완료할 수 있습니다. 관심 있는 사용자는 [차이점을 자세히 확인](../../local-functions-vs-lambdas.md)할 수 있습니다.\n"
- content: C# 7에서 새로운 기능을 모두 살펴았습니다. 이제 애플리케이션에서 직접 사용해 보세요. [C# 7의 새로운 기능](../../whats-new/csharp-7.md) 문서에서 전체 목록을 볼 수 있습니다.
