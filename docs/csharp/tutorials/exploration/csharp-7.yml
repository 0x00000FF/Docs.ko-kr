### YamlMime:Tutorial
title: <span data-ttu-id="5fa95-101">C# 7.0 살펴보기 - C# 대화형 자습서</span><span class="sxs-lookup"><span data-stu-id="5fa95-101">Explore C# 7.0 - C# interactive tutorial</span></span>
metadata:
  title: C# 7.0 살펴보기 - 브라우저를 사용하여 C# 7.0의 새 기능을 대화형으로 사용해 보기
  description: 이 자습서에서는 브라우저를 사용하여 C# 7.0을 대화형으로 살펴볼 수 있습니다. 보다 간결하고 가독성이 높은 코드를 구현하는 C# 7.0에서 사용할 수 있는 새로운 관용구를 살펴볼 수 있습니다.
  audience: Developer
  level: intermediate
  ms.date: 03/20/2019
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 1b1de22769c86f75684f41635287a73558d1d15a
  ms.sourcegitcommit: 2701302a99cafbe0d86d53d540eb0fa7e9b46b36
  ms.translationtype: HT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 04/28/2019
  ms.locfileid: "64750376"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="5fa95-105">이 자습서에서는 브라우저를 사용하여 C#을 작성하고 코드를 컴파일하고 실행한 결과를 확인하면서 C# 7.0 기능을 대화형으로 살펴볼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-105">This tutorial lets you explore C# 7.0 features interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="5fa95-106">여기에는 더 간결한 최신 C# 7.0 기능을 사용하도록 이전 버전의 C# 방식을 수정하는 일련의 단원이 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-106">It contains a series of lessons that modify earlier C# practices to use newer, more concise C# 7.0 features.</span></span> <span data-ttu-id="5fa95-107">이 문서의 나머지 부분에서는 이러한 각 기능을 간략히 설명하고 이러한 기능을 살펴볼 수 있는 링크를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-107">The rest of this article provides an overview of each of these features, with a link to explore each feature.</span></span>
- title: <span data-ttu-id="5fa95-108">할당 위치에 출력 변수 선언</span><span class="sxs-lookup"><span data-stu-id="5fa95-108">Out variable declarations at the assignment location</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"5fa95-109\">`out` 매개 변수를 지원하는 기존 구문이 이 버전에서 개선되었습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-109\">The existing syntax that supports `out` parameters has been improved in this version.</span></span> <span data-ttu-id=\"5fa95-110\">이 페이지의 맨 아래에서 *포커스 모드로 전환* 단추를 클릭한 다음, 대화형 창에서 다음 코드를 실행합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-110\">Click the *Enter Focus Mode* button at the bottom of this page, then try the following code in the interactive window:</span></span> \n\n[!code-csharp[OutVariableOldStyle](~/samples/snippets/csharp/new-in-7/program.cs#OutVariableOldStyle \"classic out variable declaration\")]\n\n<span data-ttu-id=\"5fa95-111\">이제 개별 선언 문을 작성하는 대신 메서드 호출의 인수 목록에서 `out` 변수를 선언할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-111\">You can now declare `out` variables in the argument list of a method call, rather than writing a separate declaration statement.</span></span> <span data-ttu-id=\"5fa95-112\">선언을 메서드 호출로 이동시킬 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-112\">You can move the declaration into the method call.</span></span> <span data-ttu-id=\"5fa95-113\">대화형 창의 맨 아래에 다음 코드를 추가합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-113\">Add the following code to the bottom of the interactive window:</span></span>\n\n[!code-csharp[OutVariableDeclarations](~/samples/snippets/csharp/new-in-7/program.cs#OutVariableDeclarations \"Out variable declarations\")]\n\n<span data-ttu-id=\"5fa95-114\">`int` 선언을 `var` 선언으로 변경할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-114\">You can change the `int` declaration to a `var` declaration.</span></span> <span data-ttu-id=\"5fa95-115\">대화형 창에 다음 코드를 추가합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-115\">Add the following code to the interactive window:</span></span>\n\n[!code-csharp[OutVarVariableDeclarations](~/samples/snippets/csharp/new-in-7/program.cs#OutVarVariableDeclarations \"Implicitly typed Out variable\")]\n\n<span data-ttu-id=\"5fa95-116\">새 구문에서는 기존 구문에서 다음과 같은 두 가지 주요 장점을 제공합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-116\">The new syntax provides two important advantages over the existing syntax:</span></span>\n\n* <span data-ttu-id=\"5fa95-117\">코드를 읽기가 더 쉽습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-117\">The code is easier to read.</span></span> \n    - <span data-ttu-id=\"5fa95-118\">위의 다른 줄이 아니라 사용하는 위치에서 out 변수를 선언합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-118\">You declare the out variable where you use it, not on another line above.</span></span>\n* <span data-ttu-id=\"5fa95-119\">초기 값을 할당할 필요가 없습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-119\">No need to assign an initial value.</span></span>\n    - <span data-ttu-id=\"5fa95-120\">메서드 호출에서 사용되는 위치에 `out` 변수를 선언하면 변수가 선언되기 전에 실수로 사용할 가능성이 없습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-120\">By declaring the `out` variable where it is used in a method call, you can't accidentally use it before it is assigned.</span></span>\n\n<span data-ttu-id=\"5fa95-121\">선언된 변수의 범위는 `if` 문을 포함하는 범위입니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-121\">The declared variable's scope is the scope enclosing the `if` statement.</span></span> <span data-ttu-id=\"5fa95-122\">따라서 이후에도 해당 변수를 사용할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-122\">This allows you to use the variable afterwards.</span></span> <span data-ttu-id=\"5fa95-123\">다음 코드 조각에 표시된 대로 마지막 `if` 블록을 수정합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-123\">Modify the last `if` block as shown in the following snippet.</span></span>\n\n```csharp\nif (!int.TryParse(input, out int result))\n{    \n    return null;\n}\n\nConsole.WriteLine(result);\n```\n"
- title: <span data-ttu-id="5fa95-124">튜플은 간단한 데이터 구조체를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-124">Tuples create light-weight data structures</span></span>
  durationInMinutes: 1
  content: "<span data-ttu-id=\"5fa95-125\">튜플은 데이터 멤버를 나타내는 여러 필드가 포함된 간단한 데이터 구조입니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-125\">Tuples are lightweight data structures that contain multiple fields to represent the data members.</span></span> <span data-ttu-id=\"5fa95-126\">필드는 유효성이 검사되지 않고 자체 메서드를 정의할 수 없습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-126\">The fields are not validated, and you cannot define your own methods.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"5fa95-127\">튜플은 C# 7.0 이전부터 사용할 수 있었지만 비효율적이었고 언어 지원이 없었습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-127\">Tuples were available before C# 7.0, but they were inefficient and had no language support.</span></span> <span data-ttu-id=\"5fa95-128\">즉, 튜플 요소는 `Item1`, `Item2` 등으로만 참조될 수 있었습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-128\">This meant that tuple elements could only be referenced as `Item1`, `Item2` and so on.</span></span> <span data-ttu-id=\"5fa95-129\">C# 7.0은 튜플에 대한 언어 지원을 제공하므로 새롭고 보다 효율적인 튜플 형식을 사용하여 튜플 필드에 의미 체계 이름을 사용할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-129\">C# 7.0 introduces language support for tuples, which enables semantic names for the fields of a tuple using new more efficient tuple types.</span></span>\n\n<span data-ttu-id=\"5fa95-130\">명명된 각 멤버에 값을 할당하여 튜플을 만들 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-130\">You can create a tuple by assigning a value to each named member:</span></span>\n\n[!code-csharp[NamedTuple](~/samples/snippets/csharp/new-in-7/program.cs#NamedTuple \"Named tuple\")]\n\n<span data-ttu-id=\"5fa95-131\">`namedLetters` 튜플에는 `Alpha` 및 `Beta`라는 필드가 포함됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-131\">The `namedLetters` tuple contains fields referred to as `Alpha` and `Beta`.</span></span> <span data-ttu-id=\"5fa95-132\">이러한 이름은 컴파일 시간에만 존재하며 런타임 시 보존되지 않습니다(예: 리플렉션을 사용하여 튜플을 검사하는 경우).</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-132\">Those names exist only at compile time and are not preserved at runtime (when inspecting the tuple using reflection, for example).</span></span>\n\n<span data-ttu-id=\"5fa95-133\">튜플 할당에서 할당의 오른쪽에 필드의 이름을 지정할 수도 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-133\">In a tuple assignment, you can also specify the names of the fields on the right-hand side of the assignment:</span></span> \n\n[!code-csharp[ImplicitNamedTuple](~/samples/snippets/csharp/new-in-7/program.cs#ImplicitNamedTuple \"Implicitly named tuple\")]\n\n<span data-ttu-id=\"5fa95-134\">할당의 왼쪽 및 오른쪽에서 모두 필드의 이름을 지정할 수 있지만 오른쪽 이름은 무시됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-134\">You can specify names for the fields on both the left and right-hand side of the assignment, but the names on the right side are ignored.</span></span>\n\n<span data-ttu-id=\"5fa95-135\">튜플은 `private` 및 `internal` 메서드의 반환 형식으로 가장 유용합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-135\">Tuples are most useful as return types for `private` and `internal` methods.</span></span> <span data-ttu-id=\"5fa95-136\">튜플은 이러한 메서드에 여러 개의 불연속 값을 반환하는 간단한 구문을 제공합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-136\">Tuples provide a simple syntax for those methods to return multiple discrete values.</span></span>\n\n<span data-ttu-id=\"5fa95-137\">튜플을 만드는 것이 클래스 또는 구조체를 만드는 것보다 더 효율적이고 더 생산적입니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-137\">Creating a tuple is more efficient and more productive that creating a class or struct.</span></span> <span data-ttu-id=\"5fa95-138\">두 개 이상의 값을 전달하는 데이터 구조를 정의하는 더 간단한 구문이 포함됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-138\">It has a simpler, lightweight syntax to define a data structure that carries more than one value.</span></span> <span data-ttu-id=\"5fa95-139\">아래 예제 메서드는 정수 시퀀스에서 발견된 최솟값 및 최댓값을 반환합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-139\">The example method below returns the minimum and maximum values found in a sequence of integers.</span></span> <span data-ttu-id=\"5fa95-140\">브라우저에서 다음 코드를 추가하여 사용해보세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-140\">Add the following code in your browser to try it:</span></span>\n\n[!code-csharp[TupleReturningMethod](~/samples/snippets/csharp/new-in-7/program.cs#TupleReturningMethod \"Tuple returning method\")]\n\n<span data-ttu-id=\"5fa95-141\">메서드에서 반환된 튜플의 멤버를 패키지 해제하려는 경우가 있을 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-141\">There may be times when you want to unpackage the members of a tuple that were returned from a method.</span></span>  <span data-ttu-id=\"5fa95-142\">이 작업을 수행하려면 튜플에서 각 값에 대한 개별 변수를 선언합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-142\">You can do that by declaring separate variables for each of the values in the tuple.</span></span> <span data-ttu-id=\"5fa95-143\">이 작업을 튜플 *분해*라고 합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-143\">This is called *deconstructing* the tuple.</span></span> <span data-ttu-id=\"5fa95-144\">브라우저에서 다음 코드를 추가하여 사용해보세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-144\">Add the following code in your browser to try it:</span></span>\n\n[!code-csharp[CallingWithDeconstructor](~/samples/snippets/csharp/new-in-7/program.cs#CallingWithDeconstructor \"Deconstructing a tuple\")]\n\n<span data-ttu-id=\"5fa95-145\">튜플로 작업할 때 튜플 결과의 모든 멤버를 사용하지 않는 경우가 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-145\">As you work with tuples, you'll often find that you don't use all of the members of a tuple result.</span></span> <span data-ttu-id=\"5fa95-146\">이 경우에 변수 대신 `_`을 사용하여 반환된 값 중 하나 이상을 버릴 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-146\">When that happens, you can discard one or more of the returned values by using `_` in place of a variable.</span></span> <span data-ttu-id=\"5fa95-147\">브라우저에서 다음 코드를 추가하여 사용해보세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-147\">Add the following code in your browser to try it:</span></span>\n\n[!code-csharp[DiscardTupleMember](~/samples/snippets/csharp/new-in-7/program.cs#DiscardMember \"Discard a tuple member\")]\n\n<span data-ttu-id=\"5fa95-148\">[튜플 문서](../../tuples.md)에서 튜플에 대해 자세히 알아볼 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-148\">You can learn more in depth about tuples in the [tuples article](../../tuples.md).</span></span>\n<span data-ttu-id=\"5fa95-149\">[버리기 문서](../../discards.md)에서 버리는 방법에 대해 자세히 알아볼 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-149\">You can learn more about discards in the [discards article](../../discards.md).</span></span>\n"
- title: <span data-ttu-id="5fa95-150">is 식에서 형식 패턴을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-150">Use the type pattern with the is expression</span></span>
  durationInMinutes: 2
  content: >
    <span data-ttu-id="5fa95-151">`is` 패턴 식은 친숙한 [`is` 연산자](../../language-reference/keywords/is.md#pattern-matching-with-is)를 확장하여 형식을 넘어서 개체를 쿼리합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-151">The `is` pattern expression extends the familiar [`is` operator](../../language-reference/keywords/is.md#pattern-matching-with-is) to query an object beyond its type.</span></span>


    <span data-ttu-id="5fa95-152">브라우저 창에서 다음 코드를 사용해보세요.</span><span class="sxs-lookup"><span data-stu-id="5fa95-152">Try the following code in your browser window:</span></span>


    [!code-csharp[SimpleIs](~/samples/snippets/csharp/new-in-7/patternmatch.cs#SimpleIsPattern "Simple Is pattern")]


    <span data-ttu-id="5fa95-153">대신 변수 선언을 문자열로 변경합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-153">Change the variable declaration to a string instead:</span></span>


    ```csharp

    object count = "5";

    ```


    <span data-ttu-id="5fa95-154">이제 `is` 식이 false이므로 `else` 분기가 실행됩니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-154">Now, the `is` expression is false, so the `else` branch is executed.</span></span> <span data-ttu-id="5fa95-155">else 분기에서 `count`를 `number`로 변경하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-155">Try to change `count` to `number` in the else branch:</span></span>


    ```csharp

    Console.WriteLine($"{number} is not an integer");

    ```


    <span data-ttu-id="5fa95-156">위에서는 `number`가 `else` 분기에 할당되지 않았기 때문에 컴파일되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-156">The above won't compile because `number` isn't assigned in the `else` branch.</span></span> <span data-ttu-id="5fa95-157">`if` 문의 `true` 분기에서만 할당됩니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-157">It's only assigned in the `true` branch of the `if` statement.</span></span>


    <span data-ttu-id="5fa95-158">`is` 식 형식 패턴은 적은 수의 형식을 테스트하는 경우에 유용합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-158">The `is` expression type pattern is useful when you have a small number of types to test against.</span></span> <span data-ttu-id="5fa95-159">여러 형식을 테스트해야 하는 경우가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-159">Often, you may need to test multiple types.</span></span> <span data-ttu-id="5fa95-160">그러면 패턴 일치 `switch` 문이 필요합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-160">That requires the pattern matching `switch` statement.</span></span>
- title: <span data-ttu-id="5fa95-161">switch 문에서 패턴 일치</span><span class="sxs-lookup"><span data-stu-id="5fa95-161">Pattern matching in the switch statement</span></span>
  durationInMinutes: 2
  content: >
    <span data-ttu-id="5fa95-162">*일치 식*에는 이미 C# 언어의 일부인 `switch` 문에 기반을 둔 친숙한 구문이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-162">The *match expression* has a familiar syntax, based on the `switch` statement already part of the C# language.</span></span> <span data-ttu-id="5fa95-163">이전 페이지에서 살펴본 `is` 식 구문에 따라 간단한 샘플을 시작해보겠습니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-163">Let's start with a small sample based on the `is` expression syntax you explored on the previous page:</span></span>


    [!code-csharp[SimpleSwitch](~/samples/snippets/csharp/new-in-7/patternmatch.cs#SimpleSwitchPattern "simple switch")]


    <span data-ttu-id="5fa95-164">앞의 코드는 `int` 또는 `null`을 검사합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-164">The preceding code checks for an `int` or `null`.</span></span> <span data-ttu-id="5fa95-165">다른 모든 형식은 기본 사례에 도달했습니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-165">Every other type reached the default case.</span></span> <span data-ttu-id="5fa95-166">다음 두 줄을 추가하여 동작을 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-166">Add the following two lines to verify the behavior:</span></span>


    [!code-csharp[AddLongCase](~/samples/snippets/csharp/new-in-7/patternmatch.cs#TestLong "Add a case for long")]


    <span data-ttu-id="5fa95-167">`switch` 식은 nullable 형식을 해당하는 형식으로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-167">The `switch` expression will convert a nullable type to its corresponding type.</span></span> <span data-ttu-id="5fa95-168">다음을 추가하여 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-168">Add the following to verify:</span></span>


    [!code-csharp[NullableCase](~/samples/snippets/csharp/new-in-7/patternmatch.cs#NullableSwitch "Add a nullable case")]


    <span data-ttu-id="5fa95-169">switch 문에 다른 형식 패턴 식을 원하는 만큼 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-169">You can add any number of other type pattern expressions to the switch statements.</span></span> <span data-ttu-id="5fa95-170">`null` 사례 앞에 다음을 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-170">Add these before the `null` case:</span></span>


    [!code-csharp[MoreTypeCases](~/samples/snippets/csharp/new-in-7/patternmatch.cs#MoreCases "Add more type cases")]


    <span data-ttu-id="5fa95-171">다음 테스트를 추가하여 작동하는지 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-171">Make sure these work by adding the following tests:</span></span>


    [!code-csharp[AddMoreTests](~/samples/snippets/csharp/new-in-7/patternmatch.cs#MoreTests "Add more type tests")]


    <span data-ttu-id="5fa95-172">일치 식은 상수도 지원합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-172">The match expressions also support constants.</span></span> <span data-ttu-id="5fa95-173">이 방법에서는 간단한 사례를 제외하여 시간을 절약할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-173">This can save time by factoring out simple cases:</span></span>


    [!code-csharp[ConstantCase](~/samples/snippets/csharp/new-in-7/patternmatch.cs#ConstantCase "Add a constant case")]


    <span data-ttu-id="5fa95-174">`case int:` 식 *전에* 이전 사례를 추가해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-174">You must add the preceding case *before* the `case int:` expression.</span></span> <span data-ttu-id="5fa95-175">해당 사례 뒤에 추가하면 컴파일러에서는 이전 사례에 의해 이미 처리되었다고 경고합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-175">If you add it after that case, the compiler warns you that it has already been handled by a previous case.</span></span>


    <span data-ttu-id="5fa95-176">`when` 절을 패턴 사례에 추가하여 형식 또는 상수 값 이외의 다른 조건을 테스트할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-176">You can add a `when` clause to any pattern case so that you can test other conditions beyond a type or a constant value.</span></span> <span data-ttu-id="5fa95-177">일반 `string` 사례 위에 다음과 같은 사례를 추가해보세요.</span><span class="sxs-lookup"><span data-stu-id="5fa95-177">Try it by adding the following case above the general `string` case:</span></span>


    [!code-csharp[WhenClause](~/samples/snippets/csharp/new-in-7/patternmatch.cs#WhenClause "Add a when clause")]


    <span data-ttu-id="5fa95-178">다음과 같은 코드를 사용하여 테스트합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-178">Test it with something like the following code:</span></span>


    [!code-csharp[TestWhenClause](~/samples/snippets/csharp/new-in-7/patternmatch.cs#TestWhenClause "Test the when clause")]


    <span data-ttu-id="5fa95-179">패턴 일치 식에 대한 새로운 구문을 사용하면 개체 형식 또는 기타 속성에 따라 분명하고 간결한 구문을 사용하여 더 쉽게 디스패치 알고리즘을 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-179">The new syntax for pattern matching expressions makes it easier to create dispatch algorithms using a clear and concise syntax based on an object's type or other properties.</span></span> <span data-ttu-id="5fa95-180">패턴 일치 식을 사용하면 상속이 관련되지 않은 데이터 형식에서 이러한 구문을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-180">Pattern matching expressions enable these constructs on data types that are unrelated by inheritance.</span></span>


    <span data-ttu-id="5fa95-181">패턴 일치에 대한 자세한 내용은 [C#의 패턴 일치](../../pattern-matching.md)에 관련된 문서를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="5fa95-181">You can learn more about pattern matching in the article dedicated to [pattern matching in C#](../../pattern-matching.md).</span></span>
- title: <span data-ttu-id="5fa95-182">ref local 및 return을 사용하여 메모리 스토리지를 최적화합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-182">Optimize memory storage using ref locals and returns</span></span>
  durationInMinutes: 2
  content: >
    <span data-ttu-id="5fa95-183">이 기능을 통해 다른 곳에 정의된 변수에 대한 참조를 사용 및 반환하는 알고리즘이 가능해집니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-183">This feature enables algorithms that use and return references to variables defined elsewhere.</span></span> <span data-ttu-id="5fa95-184">대량 매트릭스를 사용하고 특정한 특성을 가진 단일 위치를 찾는 것을 예로 들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-184">One example is with large matrices and finding a single location with certain characteristics.</span></span> <span data-ttu-id="5fa95-185">하나의 메서드가 매트릭스에 있는 단일 위치에 대해 두 개의 인덱스를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-185">One method would return the two indices a single location in the matrix:</span></span>


    [!code-csharp[EverythingByValue](~/samples/snippets/csharp/new-in-7/MatrixSearch.cs#EverythingByValue "return indices by value")]


    <span data-ttu-id="5fa95-186">다음 코드를 사용하여 이 메서드를 테스트할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-186">You can test this method using the following code:</span></span>


    [!code-csharp[TestByValue](~/samples/snippets/csharp/new-in-7/MatrixSearch.cs#TestByValue "test code for return indices by value")]



    <span data-ttu-id="5fa95-187">이 `Find` 메서드는 매트릭스의 항목에 인덱스를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-187">This `Find` method returns the indices to the item in the matrix.</span></span> <span data-ttu-id="5fa95-188">그러면 호출자는 해당 인덱스를 사용하여 매트릭을 역참조하고 단일 요소를 수정하는 코드를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-188">That leads callers to write code that uses those indices to dereference the matrix and modify a single element.</span></span> <span data-ttu-id="5fa95-189">변경할 매트릭스의 요소에 대한 *참조*를 반환하는 메서드를 작성하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-189">You'd rather write a method that returns a *reference* to the element of the matrix that you want to change.</span></span>


    <span data-ttu-id="5fa95-190">ref local 기능을 보여 주고 내부 스토리지에 대한 참조를 반환하는 메서드를 만드는 방법을 보여 주는 일련의 변경을 살펴보겠습니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-190">Let's walk through a series of changes to demonstrate the ref local feature and show how to create a method that returns a reference to internal storage.</span></span> <span data-ttu-id="5fa95-191">계속해서, 실수로 잘못 사용하지 않도록 방지하는 ref return 및 ref local 기능의 규칙을 알아봅니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-191">Along the way, you'll learn the rules of the ref return and ref local feature that protect you from accidentally misusing it.</span></span>


    <span data-ttu-id="5fa95-192">먼저 튜플 대신 `ref int`를 반환하도록 `Find` 메서드 선언을 수정합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-192">Start by modifying the `Find` method declaration so that it returns a `ref int` instead of a tuple.</span></span>


    ```csharp

    ref int Find(int[,] matrix, Func<int, bool> predicate)

    ```


    <span data-ttu-id="5fa95-193">올바른 인덱스에 있는 항목을 반환하도록 반환 문을 수정합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-193">Modify the return statement to return the item at the correct indices:</span></span>


    ```csharp

    return matrix[i,j];

    ```


    <span data-ttu-id="5fa95-194">대신 예외를 throw하도록 마지막 반환을 변경합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-194">Change the final return to throw an exception instead:</span></span>


    ```csharp

    throw new InvalidOperationException("Not found");

    ```


    <span data-ttu-id="5fa95-195">컴파일되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-195">Note that this won't compile.</span></span> <span data-ttu-id="5fa95-196">메서드 선언은 `ref` 반환을 나타내지만 반환 문은 반환 값을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-196">The method declaration indicates a `ref` return, but the return statement specifies a value return.</span></span> <span data-ttu-id="5fa95-197">`ref` 키워드를 각 반환 문에 추가해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-197">You must add the `ref` keyword to each return statement.</span></span> <span data-ttu-id="5fa95-198">이는 참조에 의한 반환을 나타내고 나중에 코드를 읽는 개발자가 메서드가 참조에 의해 반환된다는 것을 기억하도록 도와줍니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-198">That indicates return by reference, and helps developers reading the code later remember that the method returns by reference:</span></span>


    ```csharp

    return ref matrix[i,j];

    ```


    <span data-ttu-id="5fa95-199">이제 메서드는 매트릭스의 정수 값에 대한 참조를 반환하므로 메서드가 호출되는 위치를 수정해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-199">Now that the method returns a reference to the integer value in the matrix, you need to modify where it's called.</span></span> <span data-ttu-id="5fa95-200">`var` 선언은 `valItem`이 이제 튜플이 아닌 `int`임을 의미합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-200">The `var` declaration means that `valItem` is now an `int` rather than a tuple.</span></span> <span data-ttu-id="5fa95-201">호출 코드를 다음으로 변경합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-201">Change the calling code to the following:</span></span>


    ```csharp

    var valItem = Find(matrix, (val) => val == 42);

    Console.WriteLine(valItem);

    valItem = 24;

    Console.WriteLine(matrix[4, 2]);

    ```


    <span data-ttu-id="5fa95-202">위 예제의 두 번째 `WriteLine` 문은 `24`가 아닌 `42` 값을 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-202">The second `WriteLine` statement in the example above prints out the value `42`, not `24`.</span></span> <span data-ttu-id="5fa95-203">`valItem` 변수는 `ref int`가 아닌 `int`입니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-203">The variable `valItem` is an `int`, not a `ref int`.</span></span> <span data-ttu-id="5fa95-204">`var` 키워드를 사용하면 컴파일러가 형식을 지정할 수 있지만 `ref` 한정자가 암시적으로 추가되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-204">The `var` keyword enables the compiler to specify the type but will not implicitly add the `ref` modifier.</span></span> <span data-ttu-id="5fa95-205">대신, `ref return`이 참조하는 값이 할당의 왼쪽에 있는 변수로 *복사*됩니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-205">Instead, the value referred to by the `ref return` is *copied* to the variable on the left-hand side of the assignment.</span></span> <span data-ttu-id="5fa95-206">변수는 `ref` local이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-206">The variable is not a `ref` local.</span></span>


    <span data-ttu-id="5fa95-207">반환 값이 참조인 경우 반환된 참조를 수정하기 위해 지역 변수 선언에 `ref` 한정자를 추가하고 `Find`를 호출하기 전에 변수를 참조로 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-207">In order to modify the returned reference, you need to add the `ref` modifier to the local variable declaration and before the call to `Find` to make the variable a reference when the return value is a reference.</span></span> <span data-ttu-id="5fa95-208">다음과 일치하도록 브라우저에서 테스트 코드를 수정합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-208">Modify the test code in your browser to match the following:</span></span>


    [!code-csharp[EverythingByValue](~/samples/snippets/csharp/new-in-7/MatrixSearch.cs#TestByValue "test code for return object by reference")]


    <span data-ttu-id="5fa95-209">이제 위 예제의 두 번째 `WriteLine` 문은 매트릭스의 스토리지가 수정되었음을 나타내는 `24` 값을 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-209">Now, the second `WriteLine` statement in the example above prints out the value `24`, indicating that the storage in the matrix has been modified.</span></span> <span data-ttu-id="5fa95-210">지역 변수는 `ref` 한정자로 선언되었고 `ref` return을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-210">The local variable has been declared with the `ref` modifier, and it will take a `ref` return.</span></span> <span data-ttu-id="5fa95-211">`ref` 변수는 선언될 때 초기화되어야 합니다. 선언과 초기화를 분할할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-211">You must initialize a `ref` variable when it is declared; you cannot split the declaration and the initialization.</span></span>


    <span data-ttu-id="5fa95-212">C# 언어에는 `ref` local 및 return을 잘못 사용하는 경우를 방지하는 세 가지 다른 규칙이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-212">The C# language has three other rules that protect you from misusing the `ref` locals and returns:</span></span>


    * <span data-ttu-id="5fa95-213">표준 메서드 반환 값을 `ref` 로컬 변수에 할당할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-213">You cannot assign a standard method return value to a `ref` local variable.</span></span>

    * <span data-ttu-id="5fa95-214">메서드 실행보다 길게 수명이 연장되지 않는 변수로 `ref`를 반환할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-214">You cannot return a `ref` to a variable whose lifetime does not extend beyond the execution of the method.</span></span>

    * <span data-ttu-id="5fa95-215">`ref` local 및 return은 비동기 메서드와 함께 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-215">`ref` locals and returns can't be used with async methods.</span></span>


    <span data-ttu-id="5fa95-216">ref local 및 ref return을 추가하면 값을 복사하거나 역참조 작업을 여러 번 수행하는 경우를 방지하여 더 효율적인 알고리즘이 가능해집니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-216">The addition of ref locals and ref returns enable algorithms that are more efficient by avoiding copying values or performing dereferencing operations multiple times.</span></span>


    <span data-ttu-id="5fa95-217">자세한 내용은 [ref 키워드](../../language-reference/keywords/ref.md) 문서를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="5fa95-217">For more information, see the [ref keyword](../../language-reference/keywords/ref.md) article.</span></span>
- title: <span data-ttu-id="5fa95-218">로컬 함수를 사용하여 코드에 대한 액세스를 최소화합니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-218">Minimize access to code with local functions</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"5fa95-219\">이제 다른 함수 안에 중첩된 로컬 함수를 선언할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-219\">You can now declare local functions that are nested inside other functions.</span></span> <span data-ttu-id=\"5fa95-220\">따라서 이러한 함수의 가시성을 최소화할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-220\">This enables you to minimize the visibility of these functions.</span></span> <span data-ttu-id=\"5fa95-221\">로컬 함수에 대한 세 가지 확실한 사용 사례는 다음과 같습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-221\">There are three obvious use cases for local functions:</span></span>\n\n- <span data-ttu-id=\"5fa95-222\">재귀 함수.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-222\">Recursive functions.</span></span>\n- <span data-ttu-id=\"5fa95-223\">반복기 메서드</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-223\">Iterator methods.</span></span>\n- <span data-ttu-id=\"5fa95-224\">비동기 메서드</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-224\">Asynchronous methods.</span></span>\n\n<span data-ttu-id=\"5fa95-225\">재귀 메서드를 시작해보겠습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-225\">Let's start with recursive methods.</span></span> <span data-ttu-id=\"5fa95-226\">브라우저에서 다음 코드를 사용하여 `6!`(계승)을 계산하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-226\">Try the following code in the browser to calculate `6!` (factorial):</span></span>\n\n```csharp\nint LocalFunctionFactorial(int n)\n{\n    return nthFactorial(n);\n\n    int nthFactorial(int number) => (number < 2) ? \n        1 : number * nthFactorial(number - 1);\n}\n\nConsole.WriteLine(LocalFunctionFactorial(6));\n```\n\n<span data-ttu-id=\"5fa95-227\">재귀 알고리즘을 구현하는 데 로컬 함수를 사용하는 것이 좋습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-227\">Local functions are a great way to implement recursive algorithms.</span></span> <span data-ttu-id=\"5fa95-228\">공용 반복기 메서드 및 공용 비동기 메서드에 일반적으로 사용됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-228\">Other common uses are for public iterator methods and public async methods.</span></span> <span data-ttu-id=\"5fa95-229\">두 메서드 형식 모두 프로그래머가 예상한 것보다 늦게 오류를 보고하는 코드를 생성합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-229\">Both types of methods generate     code that reports errors later than programmers might expect.</span></span> <span data-ttu-id=\"5fa95-230\">반복기 메서드의 경우 모든 예외는 반환된 시퀀스를 열거하는 코드를 호출할 경우에만 관찰됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-230\">In the case of iterator methods, any exceptions are observed only when calling code that enumerates the returned sequence.</span></span> <span data-ttu-id=\"5fa95-231\">비동기 메서드의 경우 모든 예외는 반환된 `Task`가 대기 상태일 경우에만 관찰됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-231\">In the case of async methods, any exceptions are only observed when the returned `Task` is awaited.</span></span>\n\n<span data-ttu-id=\"5fa95-232\">반복기 메서드는 브라우저에서 쉽게 살펴볼 수 있으므로 이 살펴보기에서 사용해보겠습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-232\">Iterator methods are easier to explore in the browser, so let's use those in this exploration.</span></span> <span data-ttu-id=\"5fa95-233\">브라우저에서 반복기 메서드를 호출하는 다음 코드를 사용하세요.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-233\">Try the following code that calls an iterator method in your browser:</span></span>\n\n[!code-csharp[IteratorMethod](~/samples/snippets/csharp/new-in-7/Iterator.cs#SnippetIteratorMethod \"Iterator method\")]\n\n<span data-ttu-id=\"5fa95-234\">코드를 실행합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-234\">Run the code.</span></span> <span data-ttu-id=\"5fa95-235\">코드가 두 번째 결과 세트를 반복하기 시작하는 경우 예외가 throw됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-235\">Notice that the exception is thrown when the code begins iterating the second result set.</span></span> <span data-ttu-id=\"5fa95-236\">첫 번째 결과 세트를 반복하는 코드는 이미 실행되었습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-236\">The code that iterates the first result set has already run.</span></span> <span data-ttu-id=\"5fa95-237\">이 샘플은 모두 사소하고 데이터 구조를 변경하지 않습니다. 따라서 무해하고 문제를 해결하기 쉽습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-237\">This sample is both small and doesn't change any data structures, so it's harmless and easy to fix.</span></span> <span data-ttu-id=\"5fa95-238\">그러나 두 개의 반복기 개체가 다른 자식 메서드에서 만들어질 수 있는 대규모 프로그램에서는 근본 원인을 찾기 어려울 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-238\">But, in a larger program, where the two iterator objects may be created in different child methods the root cause could be hard to find.</span></span> <span data-ttu-id=\"5fa95-239\">첫 번째 반복기가 메서드 데이터 상태를 변경하는 경우 데이터 손상이 발생할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-239\">If the first iterator method changed data state, it could even cause data corruption.</span></span> <span data-ttu-id=\"5fa95-240\">작업이 완료되기 전에 예외가 즉시 throw되도록 하려고 합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-240\">You'd prefer the exception was thrown immediately, before any work is done.</span></span> <span data-ttu-id=\"5fa95-241\">공용 메서드가 모든 인수의 유효성을 검사하고 로컬 함수가 열거형을 수행하도록 코드를 리팩터링할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-241\">You can refactor the code so that the public method validates all arguments, and a local function performs the enumeration:</span></span>\n\n[!code-csharp[IteratorMethodRefactored](~/samples/snippets/csharp/new-in-7/Iterator.cs#IteratorMethodLocalInteractive \"Iterator method refactored\")]\n\n<span data-ttu-id=\"5fa95-242\">이전 버전을 사용하면 로컬 메서드가 외부 메서드의 컨텍스트에서만 참조되도록 합니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-242\">The preceding version makes it clear that the local method is referenced only in the context of the outer method.</span></span> <span data-ttu-id=\"5fa95-243\">로컬 함수에 대한 규칙을 적용하면 개발자가 클래스의 다른 위치에서 로컬 함수를 실수로 호출하고 인수 유효성 검사를 건너뛸 수 없게 됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-243\">The rules for local functions also ensure that a developer can't accidentally call the local function from another location in the class and bypass the argument validation.</span></span>\n\n<span data-ttu-id=\"5fa95-244\">`async` 메서드에서 같은 방법을 사용하면 인수 유효성 검사에서 발생하는 예외가 비동기 작업이 시작되기 전에 throw됩니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-244\">The same technique can be employed with `async` methods to ensure that exceptions arising from argument validation are thrown before the asynchronous work begins.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"5fa95-245\">로컬 함수가 지원하는 일부 디자인은 *람다 식*을 사용하여 완료할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-245\">Some of the designs that are supported by local functions could also be accomplished using *lambda expressions*.</span></span> <span data-ttu-id=\"5fa95-246\">관심 있는 사용자는 [차이점을 자세히 확인](../../local-functions-vs-lambdas.md)할 수 있습니다.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5fa95-246\">Those interested can [read more about the differences](../../local-functions-vs-lambdas.md).</span></span>\n"
- content: <span data-ttu-id="5fa95-247">C# 7에서 새로운 기능을 모두 살펴았습니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-247">You've completed an exploration of the major new features in C# 7.</span></span> <span data-ttu-id="5fa95-248">이제 애플리케이션에서 직접 사용해 보세요.</span><span class="sxs-lookup"><span data-stu-id="5fa95-248">Now try them yourself in your applications.</span></span> <span data-ttu-id="5fa95-249">[C# 7의 새로운 기능](../../whats-new/csharp-7.md) 문서에서 전체 목록을 볼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5fa95-249">You can see the full list in the [what's new in C# 7](../../whats-new/csharp-7.md) article.</span></span>
